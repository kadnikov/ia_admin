"use strict";var App=angular.module("app",["ngLocale","ngCookies","ngResource","ngSanitize","pascalprecht.translate","ui.bootstrap","ui.router","ui.utils","ui.layout","angular-growl","angularMoment","angularUtils.directives.dirPagination","schemaForm","angular-jqgrid","app.partials","app.common.config","app.common.directives","app.common.services","app.search.services","app.todo.controllers","app.todo.services","app.system.controllers","app.system.services","app.cmis.services"]);angular.module("angular-jqgrid",[]).directive("jqGrid",function(){return{restrict:"EA",template:"<table></table>",scope:{dataset:"=",options:"=",callback:"=",pager:"="},link:function(scope,element,attributes){var jqGrid=null,height=attributes.height||"100%",init=function(){var gridObj;if(void 0===scope.dataset)return gridObj;var options={};return options.data=scope.dataset,options=$.extend(!0,options,scope.options),options.height=height,gridObj=$(element.children()[0]).jqGrid(options),scope.callback&&scope.callback(gridObj),gridObj};$(window).on("resize",function(){var parentElement=angular.element(element).parent();jqGrid.setGridWidth(parentElement.width())});var onOptionsChanged=function(){jqGrid=init()},unwatchOptions=scope.$watch("options",onOptionsChanged,!0),onDatasetChanged=function(dataset){var startDataChanged=(new Date).getTime();if(jqGrid){if(jqGrid.jqGrid("clearGridData"),jqGrid.get(0).p.treeGrid){var perfTime=(new Date).getTime();jqGrid.get(0).addJSONData({rows:dataset}),console.log("addJSONData : ",(new Date).getTime()-perfTime,"ms")}else jqGrid.jqGrid("setGridParam",{datatype:"local",data:dataset,rowNum:dataset.length});return console.log("onDatasetChanged : ",(new Date).getTime()-startDataChanged,"ms"),jqGrid.trigger("reload")}jqGrid=init()},unwatchDataset=scope.$watch("dataset",onDatasetChanged,!1);element.on("$destroy",function(){unwatchDataset(),unwatchOptions()})}}}),angular.module("app.common.config",[]).config(["$urlRouterProvider","$locationProvider",function($urlRouterProvider,$locationProvider){$urlRouterProvider.otherwise("/"),$locationProvider.html5Mode(!1)}]).config(["$translateProvider",function($translateProvider){$translateProvider.useStaticFilesLoader({prefix:"/iaadmin/frontend/i18n/",suffix:".json"}),$translateProvider.preferredLanguage("en"),$translateProvider.useLocalStorage(),$translateProvider.useMissingTranslationHandlerLog()}]).config(["growlProvider",function(growlProvider){growlProvider.globalTimeToLive(5e3)}]),angular.module("app.common.directives",[]).directive("staticInclude",["$http","$templateCache","$compile",function($http,$templateCache,$compile){return function(scope,element,attrs){var templatePath=attrs.staticInclude;$http.get(templatePath,{cache:$templateCache}).success(function(response){var contents=$("<div/>").html(response).contents();element.html(contents),$compile(contents)(scope)})}}]),angular.module("app.common.services",[]).service("NotificationService",["$rootScope","growl",function($rootScope,growl){function displayNotification(message,type){"success"===type?growl.addSuccessMessage(message):"warn"===type?growl.addWarnMessage(message):"info"===type?growl.addInfoMessage(message):growl.addErrorMessage(message)}var flashMessageQueue=[];return $rootScope.$on("$stateChangeSuccess",function(){for(;flashMessageQueue.length>0;){var item=flashMessageQueue.shift();item&&displayNotification(item.message,item.type)}}),{flashMessage:function(message,type){flashMessageQueue.push({message:message,type:type||"info"})}}}]),angular.module("app.cmis.services",["ngResource"]).factory("CMIS",["$resource","NotificationService",function($resource){var api=$resource("/jooq/browser/test/root?cmisselector=children&objectId=:id",{id:"@id"},{query:{method:"GET",params:{},isArray:!1}});return{query:function(folderId,pageNumber,pageSize){return api.query({id:folderId,page:pageNumber,size:pageSize,sort:"ID,DESC"}).$promise}}}]),angular.module("app.system.controllers",[]).constant("paginationConfig",{pageSize:200}).config(["$stateProvider",function($stateProvider){$stateProvider.state("system",{url:"/","abstract":!0,template:"<ui-view/>"}).state("system.index",{url:"",controller:"SystemListController",templateUrl:"frontend/partials/todo/todo-list.html",resolve:{searchResults:["System","paginationConfig",function(System,paginationConfig){return System.query(0,paginationConfig.pageSize)}]}}).state("system.add",{url:"system/add",controller:"AddSystemController",templateUrl:"frontend/partials/todo/add-todo.html"}).state("system.edit",{url:"system/:systemId/edit",controller:"EditSystemController",templateUrl:"frontend/partials/todo/edit-todo.html",resolve:{updatedTodo:["System","$stateParams",function(System,$stateParams){return $stateParams.systemId?System.get($stateParams.systemId):null}]}}).state("system.searchform",{url:"system/searchform/:systemId",controller:"SearchFormController",templateUrl:"frontend/partials/todo/search-form.html",resolve:{updatedTodo:["System","$stateParams",function(System,$stateParams){return $stateParams.systemId?System.get($stateParams.systemId):null}]}}).state("system.editform",{url:"system/:systemId/editform",controller:"EditSysFormController",templateUrl:"frontend/partials/todo/edit-form.html",resolve:{updatedTodo:["System","$stateParams",function(System,$stateParams){return $stateParams.systemId?System.get($stateParams.systemId):null}]}}).state("system.view",{url:"system/:systemId",controller:"ViewSystemController",templateUrl:"frontend/partials/todo/view-todo.html",resolve:{viewedTodo:["System","$stateParams",function(System,$stateParams){return $stateParams.systemId?System.get($stateParams.systemId):null}]}})}]).controller("SystemListController",["$scope","$state","searchResults","paginationConfig",function($scope,$state,searchResults,paginationConfig){console.log("Rendering documents."),$scope.todos=searchResults.content,console.log(searchResults),console.log(searchResults.totalElements),console.log(paginationConfig.pageSize),$scope.pagination={currentPage:searchResults.number+1,itemsPerPage:paginationConfig.pageSize,totalItems:searchResults.totalElements},$scope.addTodo=function(){$state.go("system.add")}}]).controller("AddSystemController",["$scope","$state","System",function($scope,$state,System){console.log("Rendering add todo entry page."),$scope.todo={},$scope.saveTodo=function(){if($scope.todoForm.$valid){var onSuccess=function(added){$state.go("system.view",{systemId:added.id},{reload:!0,inherit:!0,notify:!0})};$scope.todo.data=""==$scope.todo.data?{}:JSON.parse($scope.todo.data),System.save($scope.todo,onSuccess)}}}]).controller("DeleteSystemController",["$scope","$modalInstance","$state","System","deletedTodo",function($scope,$modalInstance,$state,System,deletedTodo){$scope.todo=deletedTodo,$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.delete=function(){var onSuccess=function(){$modalInstance.close(),$state.go("system.index",{},{reload:!0,inherit:!0,notify:!0})};System.delete($scope.todo,onSuccess)}}]).controller("EditSysFormController",["$scope","$state","updatedTodo","System",function($scope,$state,updatedTodo,System){if(console.log(updatedTodo),$scope.todo=updatedTodo,"type"==updatedTodo.type){$scope.schema={type:"object",title:"schema",required:["symbolicName","storage_policy"],properties:{symbolicName:{type:"string",title:"Символьный идентификатор типа"},storage_policy:{title:"Политика хранения",type:"string"},parent:{type:"string",title:"Родительский тип"},access:{type:"array",items:{type:"string"},title:"Доступ по-умолчанию для документа"},properties:{type:"array",items:{type:"object",properties:{name:{title:"Идентификатор атрибута",type:"string"},title:{title:"Заголовок атрибута",type:"string"},type:{title:"Тип атрибута",type:"string","enum":["string","number"]}},required:["name","title","type"]}}}};var groups=[];$.ajax({type:"GET",url:"/jooq/api/system/groups",dataType:"json",async:!1,success:function(res){for(var bb=0;bb<res.length;bb++){console.log(res[bb]);var group={};group.value=res[bb].id,group.name=res[bb].title,groups.push(group)}}}),console.log(groups),$scope.form=[{key:"symbolicName"},{key:"storage_policy",type:"select",titleMap:[{value:"fs_policy",name:"Файловая система"},{value:"s3_local_policy",name:"Scality"}]},{key:"parent"},{type:"tabs",tabs:[{title:"Атрибуты",items:[{key:"properties",type:"tabarray",add:"Добавить",remove:"Удалить",style:{remove:"btn-danger"},title:"{{ value.name || 'Tab '+$index }}",items:["properties[].name","properties[].title","properties[].type"]}]},{title:"Права доступа",items:[{key:"access",type:"checkboxes",titleMap:groups}]}]}];var props=$scope.todo.data.schema.properties,model=$scope.todo.data;model.symbolicName=$scope.todo.symbolicName,model.parent=$scope.todo.parent,model.properties=[];for(var prop in props){var mprop={name:prop,title:props[prop].title,type:props[prop].type};model.properties.push(mprop)}console.log(model),$scope.model=model}else{var typeUrl="/jooq/api/system/s/"+$scope.todo.type;$.ajax({type:"GET",url:typeUrl,dataType:"json",async:!1,success:function(res){$scope.schema=res.data.schema}}),$scope.form=["*"],console.log("$scope.schema ----------------"),console.log($scope.schema),$scope.model=$scope.todo.data}$scope.saveTodo=function(){if($scope.todoForm.$valid){var onSuccess=function(updated){$state.go("system.view",{systemId:updated.id},{reload:!0,inherit:!0,notify:!0})};if("type"==updatedTodo.type){for(var resprops=$scope.model.properties,resprop={},i=0;i<resprops.length;i++)resprop[resprops[i].name]={},resprop[resprops[i].name].title=resprops[i].title,resprop[resprops[i].name].type=resprops[i].type;$scope.todo.data.schema.properties=resprop,$scope.todo.data.schema.type="object",$scope.todo.symbolicName=$scope.model.symbolicName,$scope.todo.parent=$scope.model.parent}else $scope.todo.data=$scope.model,$scope.model.symbolicName&&($scope.todo.symbolicName=$scope.model.symbolicName),$scope.model.parent&&($scope.todo.parent=$scope.model.parent);console.log($scope.todo),System.update($scope.todo,onSuccess)}}}]).controller("SearchFormController",["$scope","$state","updatedTodo","System",function($scope,$state,updatedTodo){console.log(updatedTodo),$scope.todo=updatedTodo,$scope.schema=$scope.todo.data.schema,$scope.form=$scope.todo.data.form;var model={};$scope.model=model,$scope.saveTodo=function(){if($scope.todoForm.$valid){console.log($scope.todo)}}}]).controller("EditSystemController",["$scope","$state","updatedTodo","System",function($scope,$state,updatedTodo,System){console.log(updatedTodo),$scope.todo=updatedTodo,$scope.todo.data=JSON.stringify($scope.todo.data),$scope.saveTodo=function(){if($scope.todoForm.$valid){var onSuccess=function(updated){$state.go("system.view",{systemId:updated.id},{reload:!0,inherit:!0,notify:!0})};$scope.todo.data=JSON.parse($scope.todo.data),System.update($scope.todo,onSuccess)}}}]).controller("ViewSystemController",["$scope","$state","viewedTodo",function($scope,$state,viewedTodo){console.log("Rendering view todo entry page."),$scope.todo=viewedTodo,$scope.showEditPage=function(){$state.go("system.edit",{systemId:$scope.todo.id},{reload:!0,inherit:!0,notify:!0})},$scope.showEditFormPage=function(){$state.go("system.editform",{systemId:$scope.todo.id},{reload:!0,inherit:!0,notify:!0})}}]),angular.module("app.system.services",["ngResource"]).factory("System",["$resource","NotificationService",function($resource,NotificationService){var api=$resource("/jooq/api/system/:id",{id:"@id"},{query:{method:"GET",params:{},isArray:!1},get:{method:"GET"},save:{method:"POST"},update:{method:"PUT"}});return{"delete":function(todo,successCallback){return api.delete(todo,function(){NotificationService.flashMessage("todo.notifications.delete.success","success"),successCallback()})},query:function(pageNumber,pageSize){return api.query({page:pageNumber,size:pageSize,sort:"ID,DESC"}).$promise},get:function(todoId){return api.get({id:todoId}).$promise},save:function(todo,successCallback){api.save(todo,function(added){NotificationService.flashMessage("todo.notifications.add.success","success"),successCallback(added)})},update:function(todo,successCallback){api.update(todo,function(updated){NotificationService.flashMessage("todo.notifications.update.success","success"),successCallback(updated)})}}}]),angular.module("app.todo.controllers",["ui.bootstrap"]).constant("paginationConfig",{pageSize:200}).config(["$stateProvider",function($stateProvider){$stateProvider.state("todo",{url:"/","abstract":!0,template:"<ui-view/>"}).state("todo.index",{url:"",controller:"TodoListController",templateUrl:"frontend/partials/todo/todo-list.html",resolve:{searchResults:["Todos","paginationConfig",function(Todos,paginationConfig){return Todos.query(0,paginationConfig.pageSize)}]}}).state("todo.tree",{url:"todo/tree",controller:"TodoTreeController",templateUrl:"frontend/partials/todo/todo-tree.html",resolve:{searchResults:["CMIS","paginationConfig","$stateParams",function(CMIS,paginationConfig){return CMIS.query("0",0,paginationConfig.pageSize)}]}}).state("todo.page",{url:"todo/page/:pageNumber/size/:pageSize",controller:"TodoListController",templateUrl:"frontend/partials/todo/todo-list.html",resolve:{searchResults:["Todos","$stateParams",function(Todos,$stateParams){return Todos.query($stateParams.pageNumber-1,$stateParams.pageSize)}]}}).state("todo.add",{url:"todo/add",controller:"AddTodoController",templateUrl:"frontend/partials/todo/add-todo.html"}).state("todo.edit",{url:"todo/:todoId/edit",controller:"EditTodoController",templateUrl:"frontend/partials/todo/edit-todo.html",resolve:{updatedTodo:["Todos","$stateParams",function(Todos,$stateParams){return $stateParams.todoId?Todos.get($stateParams.todoId):null}]}}).state("todo.editform",{url:"todo/:todoId/editform",controller:"EditDocFormController",templateUrl:"frontend/partials/todo/edit-form.html",resolve:{updatedTodo:["Todos","$stateParams",function(Todos,$stateParams){return $stateParams.todoId?Todos.get($stateParams.todoId):null}]}}).state("todo.search",{url:"todo/search/:searchTerm/page/:pageNumber/size/:pageSize",controller:"SearchResultController",templateUrl:"frontend/partials/search/search-results.html",resolve:{searchTerm:["$stateParams",function($stateParams){return $stateParams.searchTerm}],searchResults:["Search","$stateParams",function(Search,$stateParams){return $stateParams.searchTerm?Search.findBySearchTerm($stateParams.searchTerm,$stateParams.pageNumber-1,$stateParams.pageSize):null}]}}).state("todo.view",{url:"todo/:todoId",controller:"ViewTodoController",templateUrl:"frontend/partials/todo/view-todo.html",resolve:{viewedTodo:["Todos","$stateParams",function(Todos,$stateParams){return $stateParams.todoId?Todos.get($stateParams.todoId):null}]}})}]).controller("TodoListController",["$scope","$state","searchResults","paginationConfig",function($scope,$state,searchResults,paginationConfig){console.log("Rendering documents."),$scope.todos=searchResults.content,console.log(searchResults),console.log(searchResults.totalElements),console.log(paginationConfig.pageSize),$scope.pagination={currentPage:searchResults.number+1,itemsPerPage:paginationConfig.pageSize,totalItems:searchResults.totalElements},$scope.addTodo=function(){$state.go("todo.add")},$scope.openTree=function(){$state.go("todo.tree")},$scope.pageChanged=function(newPageNumber){$state.go("todo.page",{pageNumber:newPageNumber,pageSize:paginationConfig.pageSize},{reload:!0,inherit:!0,notify:!0})}}]).controller("EditTodoController",["$scope","$state","updatedTodo","Todos",function($scope,$state,updatedTodo,Todos){console.log(updatedTodo),$scope.todo=updatedTodo,$scope.todo.data=JSON.stringify($scope.todo.data),$scope.saveTodo=function(){if($scope.todoForm.$valid){var onSuccess=function(updated){$state.go("todo.view",{todoId:updated.id},{reload:!0,inherit:!0,notify:!0})};$scope.todo.data=JSON.parse($scope.todo.data),Todos.update($scope.todo,onSuccess)}}}]).controller("SearchController",["$scope","$state","paginationConfig",function($scope,$state,paginationConfig){var userWritingSearchTerm=!1,minimumSearchTermLength=3;$scope.missingChars=minimumSearchTermLength,$scope.searchTerm="",$scope.searchFieldBlur=function(){userWritingSearchTerm=!1},$scope.searchFieldFocus=function(){userWritingSearchTerm=!0},$scope.showMissingCharacterText=function(){return userWritingSearchTerm&&$scope.searchTerm.length<minimumSearchTermLength?!0:!1},$scope.search=function(){$scope.searchTerm.length<minimumSearchTermLength?$scope.missingChars=minimumSearchTermLength-$scope.searchTerm.length:($scope.missingChars=0,$state.go("todo.search",{searchTerm:$scope.searchTerm,pageNumber:1,pageSize:paginationConfig.pageSize},{reload:!0,inherit:!0,notify:!0}))}}]).controller("SearchResultController",["$scope","$state","paginationConfig","searchTerm","searchResults",function($scope,$state,paginationConfig,searchTerm,searchResults){console.log("Rendering search results page."),$scope.todos=searchResults.content,$scope.pagination={currentPage:searchResults.number+1,itemsPerPage:paginationConfig.pageSize,totalItems:searchResults.totalElements},$scope.pageChanged=function(newPageNumber){$state.go("todo.search",{searchTerm:searchTerm,pageNumber:newPageNumber,pageSize:paginationConfig.pageSize},{reload:!0,inherit:!0,notify:!0})}}]).controller("CreateDocumentModalController",["$scope","$modalInstance","$state","Todos","cmisUrl","loadGrid","currentFolderId",function($scope,$modalInstance,$state,Todos,cmisUrl,loadGrid,currentFolderId){$scope.todo={},$scope.form={},$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.saveDocument=function(){if($scope.form.document.$valid){var onSuccess=function(added){$modalInstance.close();var resJson={};resJson.cmisaction="move",resJson.targetFolderId=currentFolderId,resJson.succinct="true",$.ajax({headers:{Accept:"application/json, text/plain, */*","Content-Type":"application/x-www-form-urlencoded;charset=utf-8"},type:"POST",url:cmisUrl+"?objectId="+added.id,dataType:"text",contentType:"application/x-www-form-urlencoded",async:!1,data:$.param(resJson),success:function(res){console.log("Saved! - "+res),loadGrid(currentFolderId);var url=$state.href("todo.editform",{todoId:added.id});window.open(url,"_blank")},error:function(res){console.log("ERROR"),console.log(res)}})};$scope.todo.data={},Todos.save($scope.todo,onSuccess)}}}]).controller("CreateFolderModalController",["$scope","$modalInstance","$state","Todos","cmisUrl","loadGrid","currentFolderId",function($scope,$modalInstance,$state,Todos,cmisUrl,loadGrid,currentFolderId){$scope.todo={},$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.saveFolder=function(){console.log("$scope.todoForm - "+$scope.todo.title);var resJson={};resJson.cmisaction="createFolder",resJson["propertyId[0]"]="cmis:name",resJson["propertyValue[0]"]=$scope.todo.title,resJson["propertyId[1]"]="cmis:objectTypeId",resJson["propertyValue[1]"]="folder",resJson.succinct="true",$.ajax({headers:{Accept:"application/json, text/plain, */*","Content-Type":"application/x-www-form-urlencoded;charset=utf-8"},type:"POST",url:cmisUrl+"?objectId="+currentFolderId,dataType:"text",contentType:"application/x-www-form-urlencoded",async:!1,data:$.param(resJson),success:function(res){console.log("Saved! - "+res),loadGrid(currentFolderId),$modalInstance.close()},error:function(res){console.log("ERROR"),console.log(res)}})}}]).controller("DocumentModalController",["$scope","$modalInstance","$state","Todos","viewedDoc",function($scope,$modalInstance,$state,Todos,viewedDoc){$scope.todo=viewedDoc,$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.editDocument=function(){var url=$state.href("todo.edit",{todoId:$scope.todo.id});window.open(url,"_blank")},$scope.editDocumentProps=function(){var url=$state.href("todo.editform",{todoId:$scope.todo.id});window.open(url,"_blank")}}]).controller("TodoTreeController",["$scope","$state","$modal","Todos","searchResults","paginationConfig",function($scope,$state,$modal,Todos,searchResults,paginationConfig){console.log("Rendering documents tree.");$scope.cmis_root="/jooq/browser/test/root",$("#treecontainer").jstree({core:{data:{url:function(node){return"#"===node.id?$scope.cmis_root+"?objectId=0&cmisselector=children":$scope.cmis_root+"?objectId="+node.id+"&cmisselector=children"},dataFilter:function(data){var nodes=[];return $.each(JSON.parse(data).objects,function(i,item){var node={};node.id=item.object.properties["cmis:objectId"].value,node.data={type:item.object.properties["cmis:objectTypeId"].value,baseType:item.object.properties["cmis:baseTypeId"].value},node.text=item.object.properties["cmis:name"].value,"cmis:folder"==item.object.properties["cmis:baseTypeId"].value&&(node.children=!0),nodes.push(node)}),JSON.stringify(nodes)},data:function(node){return console.log(node),{id:node.id,text:"1"}}}}}),$("#treecontainer").on("select_node.jstree",function(e,data){if(console.log("node_id: "+data.node.type+" - "+data.node.id),"cmis:folder"==data.node.data.baseType)$scope.loadGrid(data.node.id);else{var docid=parseInt(data.node.id);$scope.openDocument(Todos,docid)}}),$scope.createDocument=function(){console.log($scope.currentFolderId),$modal.open({templateUrl:"frontend/partials/todo/create-doc-modal.html",controller:"CreateDocumentModalController",resolve:{cmisUrl:function(){return $scope.cmis_root},loadGrid:function(){return $scope.loadGrid},currentFolderId:function(){return $scope.currentFolderId}}})},$scope.createFolder=function(){console.log($scope.currentFolderId),$modal.open({templateUrl:"frontend/partials/todo/create-folder-modal.html",controller:"CreateFolderModalController",resolve:{cmisUrl:function(){return $scope.cmis_root},loadGrid:function(){return $scope.loadGrid},currentFolderId:function(){return $scope.currentFolderId}}})},$scope.createType=function(){var postJson={};postJson.title="Новый тип",postJson.type="type",postJson.parent="0",postJson.data={storage_policy:"fs_policy",access:["admins"],schema:{type:"object",properties:{Att1:{type:"string",title:"Атрибут 1"}}}},$.ajax({headers:{Accept:"application/json, text/plain, */*","Content-Type":"application/json;charset=utf-8"},type:"POST",url:"/jooq/api/system",datatype:"json",async:!1,data:JSON.stringify(postJson),success:function(res){console.log("Saved! - "+res);var url=$state.href("system.editform",{systemId:res.id});window.open(url,"_blank")},error:function(res){console.log("ERROR"),console.log(res)}})},$scope.openDocument=function(Todos,docid){var viewsUrl="/jooq/api/docs/"+docid;$.getJSON(viewsUrl,function(viewdata){"view"==viewdata.type?$scope.loadGrid("0",viewdata):($scope.todo=viewdata,$modal.open({templateUrl:"frontend/partials/todo/document-view-modal.html",controller:"DocumentModalController",resolve:{viewedDoc:function(){return $scope.todo}}}))})},$scope.loadGrid=function(folderId,viewdata){console.log("Rendering documents grid."),$scope.currentFolderId=folderId,$("#jqGrid").jqGrid("GridUnload");var dateOptions={dataInit:function(element){$(element).datepicker({id:"orderDate_datePicker",dateFormat:"yy-mm-dd",maxDate:new Date(2020,0,1),showOn:"focus"})},sopt:["gt","lt","eq"]},editSettings={recreateForm:!0,jqModal:!1,reloadAfterSubmit:!1,closeOnEscape:!0,savekey:[!0,13],closeAfterEdit:!0,afterShowForm:function(){$("#lui_"+grid[0].id).hide()}},addSettings={recreateForm:!0,jqModal:!1,reloadAfterSubmit:!1,savekey:[!0,13],closeOnEscape:!0,closeAfterAdd:!0,afterShowForm:function(){$("#lui_"+grid[0].id).hide()}},delSettings={processing:!0},id=folderId,viewEntriesUrl=$scope.cmis_root+"?objectId="+id+"&cmisselector=children",sys_fields=["id","type","title","description","modifier","modificationTime","author","creationTime","parent","symbolicName"],fields=["id","title","description","modifier","modificationTime"],rowSize=paginationConfig.pageSize,columns=[{name:"id",key:!0,width:75,jsonmap:"object.properties.cmis:objectId.value"},{name:"type",label:"Тип",width:100,jsonmap:"object.properties.cmis:objectTypeId.value"},{name:"baseType",label:"Тип",width:100,jsonmap:"object.properties.cmis:baseTypeId.value"},{name:"title",label:"Заголовок",width:150,jsonmap:"object.properties.cmis:name.value"},{name:"description",label:"Описание",width:150,jsonmap:"object.properties.cmis:description.value"},{name:"author",label:"Создал",width:150,jsonmap:"object.properties.cmis:createdBy.value"},{name:"creationTime",label:"Дата создания",width:150,jsonmap:"object.properties.cmis:creationDate.value",formatter:"date",formatoptions:{srcformat:"U/1000",newformat:"d.m.Y H:i"},sorttype:"date",searchoptions:dateOptions},{name:"modifier",label:"Изменил",width:150,jsonmap:"object.properties.cmis:lastModifiedBy.value"},{name:"modificationTime",label:"Дата изменения",width:150,jsonmap:"object.properties.cmis:lastModificationDate.value",formatter:"date",formatoptions:{srcformat:"U/1000",newformat:"d.m.Y H:i"},sorttype:"date",searchoptions:dateOptions}];console.log(viewdata),null!=viewdata&&(viewEntriesUrl=viewdata.data.query+"?",$scope.currentFolderId="0",fields=[],columns=[],$.each(viewdata.data.columnDescriptions,function(i,item){if(0!=item.visible){var colWidth=140;item.width&&(colWidth=parseInt(item.width));var fieldOps={name:item.field,label:item.name,width:colWidth};item.sortField&&(fieldOps.index=item.sortField),-1==$.inArray(item.field,sys_fields)&&(fieldOps.jsonmap="data."+item.field,fields.push(item.field)),"INTEGER"==item.type&&(fieldOps.searchoptions={sopt:["gt","lt","eq"]}),"STRING"==item.type&&(fieldOps.searchoptions={sopt:["cn","nc"]}),"DATE"==item.type&&(fieldOps.sorttype="date",fieldOps.searchoptions=dateOptions),columns.push(fieldOps)}}),console.log(columns),fields.length>0&&(viewEntriesUrl+="fields=",viewEntriesUrl+=fields.join()+"&"),viewEntriesUrl+="size="+rowSize,console.log(viewEntriesUrl));var fixGridWidth=function(grid){var gviewScrollWidth=grid[0].parentNode.parentNode.parentNode.scrollWidth,mainWidth=jQuery("#main").width(),gridScrollWidth=grid[0].scrollWidth,htable=jQuery("table.ui-jqgrid-htable",grid[0].parentNode.parentNode.parentNode),scrollWidth=gridScrollWidth;if(htable.length>0){var hdivScrollWidth=htable[0].scrollWidth;hdivScrollWidth>gridScrollWidth&&(scrollWidth=hdivScrollWidth)}if(gviewScrollWidth!=scrollWidth||scrollWidth>mainWidth){var newGridWidth=mainWidth>=scrollWidth?scrollWidth:mainWidth;newGridWidth!=gviewScrollWidth&&(grid.jqGrid("setGridWidth",newGridWidth),console.log("Width fixed."))}},fixGridHeight=function(grid){var gviewNode=grid[0].parentNode.parentNode.parentNode,bdiv=jQuery(".ui-jqgrid-bdiv",gviewNode);if(bdiv.length){var delta=bdiv[0].scrollHeight-bdiv[0].clientHeight,height=grid.height();0!==delta&&height&&height-delta>0&&(grid.setGridHeight(height-delta),console.log("Height fixed."))}},fixGridSize=function(grid){fixGridWidth(grid),fixGridHeight(grid)};$(window).resize(function(){fixGridSize($("#jqGrid"))}),$("#jqGrid").jqGrid({url:viewEntriesUrl,mtype:"GET",datatype:"json",page:1,colModel:columns,autowidth:!0,shrinkToFit:!0,height:"100%",maxHeight:500,rowNum:paginationConfig.pageSize,serializeGridData:function(postData){return"number"==typeof postData.page&&postData.page--,postData.sort=null!=postData.sidx&&""!=postData.sidx?postData.sidx+","+postData.sord:"ID,DESC",postData},jsonReader:{repeatitems:!1,root:function(data){return data.content?data.content:data.objects},total:function(data){return data.totalPages},page:function(data){return data.number+1},records:function(data){return data.totalElements?data.totalElements:data.numItems}},onSelectRow:function(ids){if(null==ids)loadGridCMIS("0");else{var rowData=$("#jqGrid").getRowData(ids);if(console.log("Type: "+rowData.type),"cmis:folder"==rowData.baseType)$scope.loadGrid(ids);else if("type"==rowData.type){var docid=parseInt(ids),url=$state.href("system.editform",{systemId:docid});window.open(url,"_blank")}else{console.log("request doc "+ids);var docid=parseInt(ids);$scope.openDocument(Todos,docid)}}},scroll:1,emptyrecords:"Scroll to bottom to retrieve new page",pager:"#jqGridPager",loadComplete:function(){fixGridSize($("#jqGrid")),$("tr.jqgrow",this).contextMenu("folderMenu",{bindings:{edit:function(trigger){$("#jqGrid").editGridRow(trigger.id,editSettings)},add:function(){$("#jqGrid").editGridRow("new",addSettings)},del:function(trigger){$("#del").hasClass("ui-state-disabled")===!1&&$("#jqGrid").delGridRow(trigger.id,delSettings)}},onContextMenu:function(event){var rowId=$(event.target).closest("tr.jqgrow").attr("id");return $("#del").attr("disabled",Number(rowId)%2===0),Number(rowId)%2===0?$("#del").attr("disabled","disabled").addClass("ui-state-disabled"):$("#del").removeAttr("disabled").removeClass("ui-state-disabled"),!0}})}}),$("#jqGrid").navGrid("#jqGridPager",{search:!0,add:!1,edit:!1,del:!1,refresh:!0},{},{},{},{multipleSearch:!0,uniqueSearchFields:!0,multipleGroup:!0})},$scope.loadGrid("0")}]).controller("AddTodoController",["$scope","$state","Todos",function($scope,$state,Todos){console.log("Rendering add todo entry page."),$scope.todo={},$scope.saveTodo=function(){if($scope.todoForm.$valid){var onSuccess=function(added){$state.go("todo.view",{todoId:added.id},{reload:!0,inherit:!0,notify:!0})};$scope.todo.data=""==$scope.todo.data?{}:JSON.parse($scope.todo.data),Todos.save($scope.todo,onSuccess)}}}]).controller("DeleteTodoController",["$scope","$modalInstance","$state","Todos","deletedTodo",function($scope,$modalInstance,$state,Todos,deletedTodo){$scope.todo=deletedTodo,$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.delete=function(){var onSuccess=function(){$modalInstance.close(),$state.go("todo.index",{},{reload:!0,inherit:!0,notify:!0})};Todos.delete($scope.todo,onSuccess)}}]).controller("EditDocFormController",["$scope","$state","updatedTodo","Todos",function($scope,$state,updatedTodo,Todos){console.log("EditForm for document"),$scope.todo=updatedTodo;var typeUrl="/jooq/api/system/s/"+$scope.todo.type;$scope.getParentTypeSchema=function(typeId){var properties={};return console.log("getParentTypeSchema typeId = "+typeId),null!=typeId&&"0"!=typeId&&$.ajax({type:"GET",url:"/jooq/api/system/"+typeId,dataType:"json",async:!1,success:function(res){properties=res.data.schema.properties;var parentProps=$scope.getParentTypeSchema(res.parent);for(var prop in parentProps)console.log(prop),properties[prop]=parentProps[prop]}}),properties},$.ajax({type:"GET",url:typeUrl,dataType:"json",async:!1,success:function(res){$scope.schema=res.data.schema;var parentProps=$scope.getParentTypeSchema(res.parent);for(var prop in parentProps)$scope.schema.properties[prop]=parentProps[prop]}}),$scope.form=["*"],$scope.model=$scope.todo.data,$scope.saveTodo=function(){if($scope.todoForm.$valid){var onSuccess=function(updated){$state.go("todo.view",{todoId:updated.id},{reload:!0,inherit:!0,notify:!0})};$scope.todo.data=$scope.model,Todos.update($scope.todo,onSuccess)}}}]).controller("ViewTodoController",["$scope","$state","$modal","viewedTodo",function($scope,$state,$modal,viewedTodo){console.log("Rendering view todo entry page."),$scope.todo=viewedTodo,$scope.showEditPage=function(){$state.go("todo.edit",{todoId:$scope.todo.id},{reload:!0,inherit:!0,notify:!0})},$scope.showEditFormPage=function(){$state.go("todo.editform",{todoId:$scope.todo.id},{reload:!0,inherit:!0,notify:!0})},$scope.showDeleteDialog=function(){$modal.open({templateUrl:"frontend/partials/todo/delete-todo-modal.html",controller:"DeleteTodoController",resolve:{deletedTodo:function(){return $scope.todo}}})}}]),angular.module("app.todo.services",["ngResource"]).factory("Todos",["$resource","NotificationService",function($resource,NotificationService){var api=$resource("/jooq/api/docs/:id",{id:"@id"},{query:{method:"GET",params:{},isArray:!1},get:{method:"GET"},save:{method:"POST"},update:{method:"PUT"}});return{"delete":function(todo,successCallback){return api.delete(todo,function(){NotificationService.flashMessage("todo.notifications.delete.success","success"),successCallback()})},query:function(pageNumber,pageSize){return api.query({page:pageNumber,size:pageSize,sort:"ID,DESC"}).$promise
},get:function(todoId){return api.get({id:todoId}).$promise},save:function(todo,successCallback){api.save(todo,function(added){NotificationService.flashMessage("todo.notifications.add.success","success"),successCallback(added)})},update:function(todo,successCallback){api.update(todo,function(updated){NotificationService.flashMessage("todo.notifications.update.success","success"),successCallback(updated)})}}}]),angular.module("demo",["blueimp.fileupload"]).config(["$httpProvider","fileUploadProvider",function($httpProvider,fileUploadProvider){delete $httpProvider.defaults.headers.common["X-Requested-With"],fileUploadProvider.defaults.redirect=window.location.href.replace(/\/[^\/]*$/,"/cors/result.html?%s")}]).controller("DemoFileUploadController",["$scope","$http","$filter","$window",function($scope){$scope.options={url:url}}]).controller("FileDestroyController",["$scope","$http",function($scope,$http){var state,file=$scope.file;file.url?(file.$state=function(){return state},file.$destroy=function(){return state="pending",$http({url:file.deleteUrl,method:file.deleteType}).then(function(){state="resolved",$scope.clear(file)},function(){state="rejected"})}):file.$cancel||file._index||(file.$cancel=function(){$scope.clear(file)})}]),angular.module("app.search.services",["ngResource"]).factory("Search",["$resource",function($resource){var api=$resource("/api/docs/search",{},{query:{method:"GET",isArray:!1}});return{findBySearchTerm:function(searchTerm,pageNumber,pageSize){return api.query({page:pageNumber,searchTerm:searchTerm,size:pageSize,sort:"ID,DESC"}).$promise}}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIm1vZHVsZS9jb21tb24vYW5ndWxhci1qcWdyaWQuanMiLCJtb2R1bGUvY29tbW9uL2NvbW1vbi5jb25maWcuanMiLCJtb2R1bGUvY29tbW9uL2NvbW1vbi5kaXJlY3RpdmVzLmpzIiwibW9kdWxlL2NvbW1vbi9jb21tb24uc2VydmljZXMuanMiLCJtb2R1bGUvdG9kby9jbWlzLnNlcnZpY2VzLmpzIiwibW9kdWxlL3RvZG8vc3lzdGVtLmNvbnRyb2xsZXJzLmpzIiwibW9kdWxlL3RvZG8vc3lzdGVtLnNlcnZpY2VzLmpzIiwibW9kdWxlL3RvZG8vdG9kby5jb250cm9sbGVycy5qcyIsIm1vZHVsZS90b2RvL3RvZG8uc2VydmljZXMuanMiLCJtb2R1bGUvdG9kby90b2RvLnVwbG9hZC5qcyIsIm1vZHVsZS9zZWFyY2gvc2VhcmNoLnNlcnZpY2VzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBRUEsSUFBQSxLQUFBLFFBQUEsT0FBQSxPQUNBLFdBQ0EsWUFDQSxhQUNBLGFBQ0EseUJBQ0EsZUFDQSxZQUNBLFdBQ0EsWUFDQSxnQkFDQSxnQkFDQSx3Q0FDQSxhQUNBLGlCQUdBLGVBR0Esb0JBQUEsd0JBQUEsc0JBR0Esc0JBR0EsdUJBQUEsb0JBRUEseUJBQUEsc0JBRUEscUJDSkEsU0FBQSxPQUFBLHFCQUFBLFVBQUEsU0FBQSxXQUNBLE9BQ0EsU0FBQSxLQUNBLFNBQUEsa0JBQ0EsT0FDQSxRQUFBLElBQ0EsUUFBQSxJQUNBLFNBQUEsSUFDQSxNQUFBLEtBRUEsS0FBQSxTQUFBLE1BQUEsUUFBQSxZQUNBLEdBQUEsUUFBQSxLQUNBLE9BQUEsV0FBQSxRQUFBLE9BRUEsS0FBQSxXQUNBLEdBQUEsUUFFQSxJQUFBLFNBQUEsTUFBQSxRQUVBLE1BQUEsUUFHQSxJQUFBLFdBY0EsT0FaQSxTQUFBLEtBQUEsTUFBQSxRQUVBLFFBQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxNQUFBLFNBRUEsUUFBQSxPQUFBLE9BRUEsUUFBQSxFQUFBLFFBQUEsV0FBQSxJQUFBLE9BQUEsU0FFQSxNQUFBLFVBQ0EsTUFBQSxTQUFBLFNBR0EsUUFPQSxHQUFBLFFBQUEsR0FBQSxTQUFBLFdBQ0EsR0FBQSxlQUFBLFFBQUEsUUFBQSxTQUFBLFFBQ0EsUUFBQSxhQUFBLGNBQUEsVUFNQSxJQUFBLGtCQUFBLFdBQ0EsT0FBQSxRQUdBLGVBQUEsTUFBQSxPQUFBLFVBQUEsa0JBQUEsR0FFQSxpQkFBQSxTQUFBLFNBQ0EsR0FBQSxtQkFBQSxHQUFBLE9BQUEsU0FDQSxJQUFBLE9BQUEsQ0FJQSxHQUZBLE9BQUEsT0FBQSxpQkFFQSxPQUFBLElBQUEsR0FBQSxFQUFBLFNBQUEsQ0FDQSxHQUFBLFdBQUEsR0FBQSxPQUFBLFNBQ0EsUUFBQSxJQUFBLEdBQUEsYUFDQSxLQUFBLFVBRUEsUUFBQSxJQUFBLGtCQUFBLEdBQUEsT0FBQSxVQUFBLFNBQUEsVUFHQSxRQUFBLE9BQUEsZ0JBQ0EsU0FBQSxRQUNBLEtBQUEsUUFDQSxPQUFBLFFBQUEsUUFRQSxPQUZBLFNBQUEsSUFBQSx1QkFBQSxHQUFBLE9BQUEsVUFBQSxpQkFBQSxNQUVBLE9BQUEsUUFBQSxVQUlBLE9BQUEsUUFLQSxlQUFBLE1BQUEsT0FBQSxVQUFBLGtCQUFBLEVBS0EsU0FBQSxHQUFBLFdBQUEsV0FDQSxpQkFDQSx1QkM1SEEsUUFBQSxPQUFBLHdCQUNBLFFBQUEscUJBQUEsb0JBQ0EsU0FBQSxtQkFBQSxtQkFDQSxtQkFBQSxVQUFBLEtBR0Esa0JBQUEsV0FBQSxNQUdBLFFBQUEscUJBQUEsU0FBQSxvQkFFQSxtQkFBQSxzQkFDQSxPQUFBLDBCQUNBLE9BQUEsVUFHQSxtQkFBQSxrQkFBQSxNQUNBLG1CQUFBLGtCQUNBLG1CQUFBLHFDQUVBLFFBQUEsZ0JBQUEsU0FBQSxlQUNBLGNBQUEsaUJBQUEsUUNyQkEsUUFBQSxPQUFBLDRCQUNBLFVBQUEsaUJBQUEsUUFBQSxpQkFBQSxXQUFBLFNBQUEsTUFBQSxlQUFBLFVBQ0EsTUFBQSxVQUFBLE1BQUEsUUFBQSxPQUNBLEdBQUEsY0FBQSxNQUFBLGFBRUEsT0FBQSxJQUFBLGNBQUEsTUFBQSxpQkFBQSxRQUFBLFNBQUEsVUFDQSxHQUFBLFVBQUEsRUFBQSxVQUFBLEtBQUEsVUFBQSxVQUNBLFNBQUEsS0FBQSxVQUNBLFNBQUEsVUFBQSxhQ1JBLFFBQUEsT0FBQSwwQkFDQSxRQUFBLHVCQUFBLGFBQUEsUUFBQSxTQUFBLFdBQUEsT0FHQSxRQUFBLHFCQUFBLFFBQUEsTUFDQSxZQUFBLEtBQ0EsTUFBQSxrQkFBQSxTQUNBLFNBQUEsS0FDQSxNQUFBLGVBQUEsU0FDQSxTQUFBLEtBQ0EsTUFBQSxlQUFBLFNBRUEsTUFBQSxnQkFBQSxTQVZBLEdBQUEscUJBeUJBLE9BVkEsWUFBQSxJQUFBLHNCQUFBLFdBQ0EsS0FBQSxrQkFBQSxPQUFBLEdBQUEsQ0FDQSxHQUFBLE1BQUEsa0JBQUEsT0FDQSxPQUNBLG9CQUFBLEtBQUEsUUFBQSxLQUFBLFVBT0EsYUFBQSxTQUFBLFFBQUEsTUFDQSxrQkFBQSxNQUFBLFFBQUEsUUFBQSxLQUFBLE1BQUEsY0M3QkEsUUFBQSxPQUFBLHFCQUFBLGVBQ0EsUUFBQSxRQUFBLFlBQUEsc0JBQUEsU0FBQSxXQUNBLEdBQUEsS0FBQSxVQUFBLDhEQUFBLEdBQUEsUUFDQSxPQUFBLE9BQUEsTUFBQSxVQUFBLFNBQUEsSUFHQSxRQUNBLE1BQUEsU0FBQSxTQUFBLFdBQUEsVUFDQSxNQUFBLEtBQUEsT0FBQSxHQUFBLFNBQUEsS0FBQSxXQUFBLEtBQUEsU0FBQSxLQUFBLFlBQUEsY0NSQSxRQUFBLE9BQUEsNkJBQ0EsU0FBQSxvQkFDQSxTQUFBLE1BR0EsUUFBQSxpQkFDQSxTQUFBLGdCQUNBLGVBQ0EsTUFBQSxVQUNBLElBQUEsSUFDQSxZQUFBLEVBQ0EsU0FBQSxlQUVBLE1BQUEsZ0JBQ0EsSUFBQSxHQUNBLFdBQUEsdUJBQ0EsWUFBQSx3Q0FDQSxTQUNBLGVBQUEsU0FBQSxtQkFBQSxTQUFBLE9BQUEsa0JBQ0EsTUFBQSxRQUFBLE1BQUEsRUFBQSxpQkFBQSxlQUlBLE1BQUEsY0FDQSxJQUFBLGFBQ0EsV0FBQSxzQkFDQSxZQUFBLHlDQUVBLE1BQUEsZUFDQSxJQUFBLHdCQUNBLFdBQUEsdUJBQ0EsWUFBQSx3Q0FDQSxTQUNBLGFBQUEsU0FBQSxlQUFBLFNBQUEsT0FBQSxjQUNBLE1BQUEsY0FBQSxTQUNBLE9BQUEsSUFBQSxhQUFBLFVBRUEsVUFJQSxNQUFBLHFCQUNBLElBQUEsOEJBQ0EsV0FBQSx1QkFDQSxZQUFBLDBDQUNBLFNBQ0EsYUFBQSxTQUFBLGVBQUEsU0FBQSxPQUFBLGNBQ0EsTUFBQSxjQUFBLFNBQ0EsT0FBQSxJQUFBLGFBQUEsVUFFQSxVQUlBLE1BQUEsbUJBQ0EsSUFBQSw0QkFDQSxXQUFBLHdCQUNBLFlBQUEsd0NBQ0EsU0FDQSxhQUFBLFNBQUEsZUFBQSxTQUFBLE9BQUEsY0FDQSxNQUFBLGNBQUEsU0FDQSxPQUFBLElBQUEsYUFBQSxVQUVBLFVBSUEsTUFBQSxlQUNBLElBQUEsbUJBQ0EsV0FBQSx1QkFDQSxZQUFBLHdDQUNBLFNBQ0EsWUFBQSxTQUFBLGVBQUEsU0FBQSxPQUFBLGNBQ0EsTUFBQSxjQUFBLFNBQ0EsT0FBQSxJQUFBLGFBQUEsVUFFQSxhQU1BLFdBQUEsd0JBQUEsU0FBQSxTQUFBLGdCQUFBLG1CQUNBLFNBQUEsT0FBQSxPQUFBLGNBQUEsa0JBQ0EsUUFBQSxJQUFBLHdCQUNBLE9BQUEsTUFBQSxjQUFBLFFBQ0EsUUFBQSxJQUFBLGVBQ0EsUUFBQSxJQUFBLGNBQUEsZUFDQSxRQUFBLElBQUEsaUJBQUEsVUFDQSxPQUFBLFlBQ0EsWUFBQSxjQUFBLE9BQUEsRUFDQSxhQUFBLGlCQUFBLFNBQ0EsV0FBQSxjQUFBLGVBR0EsT0FBQSxRQUFBLFdBQ0EsT0FBQSxHQUFBLGtCQUlBLFdBQUEsdUJBQUEsU0FBQSxTQUFBLFNBQ0EsU0FBQSxPQUFBLE9BQUEsUUFDQSxRQUFBLElBQUEsa0NBQ0EsT0FBQSxRQUVBLE9BQUEsU0FBQSxXQUNBLEdBQUEsT0FBQSxTQUFBLE9BQUEsQ0FDQSxHQUFBLFdBQUEsU0FBQSxPQUNBLE9BQUEsR0FBQSxlQUFBLFNBQUEsTUFBQSxLQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxJQUdBLFFBQUEsS0FBQSxLQURBLElBQUEsT0FBQSxLQUFBLFFBR0EsS0FBQSxNQUFBLE9BQUEsS0FBQSxNQUVBLE9BQUEsS0FBQSxPQUFBLEtBQUEsZ0JBSUEsV0FBQSwwQkFBQSxTQUFBLGlCQUFBLFNBQUEsU0FBQSxjQUNBLFNBQUEsT0FBQSxlQUFBLE9BQUEsT0FBQSxhQUNBLE9BQUEsS0FBQSxZQUVBLE9BQUEsT0FBQSxXQUNBLGVBQUEsUUFBQSxXQUdBLE9BQUEsT0FBQSxXQUNBLEdBQUEsV0FBQSxXQUNBLGVBQUEsUUFDQSxPQUFBLEdBQUEsbUJBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLElBRUEsUUFBQSxPQUFBLE9BQUEsS0FBQSxlQUdBLFdBQUEseUJBQUEsU0FBQSxTQUFBLGNBQUEsU0FDQSxTQUFBLE9BQUEsT0FBQSxZQUFBLFFBR0EsR0FGQSxRQUFBLElBQUEsYUFDQSxPQUFBLEtBQUEsWUFDQSxRQUFBLFlBQUEsS0FBQSxDQUNBLE9BQUEsUUFDQSxLQUFBLFNBQ0EsTUFBQSxTQUNBLFVBQ0EsZUFDQSxrQkFFQSxZQUNBLGNBQ0EsS0FBQSxTQUNBLE1BQUEsaUNBRUEsZ0JBQ0EsTUFBQSxvQkFDQSxLQUFBLFVBRUEsUUFDQSxLQUFBLFNBQ0EsTUFBQSxvQkFFQSxRQUNBLEtBQUEsUUFDQSxPQUNBLEtBQUEsVUFFQSxNQUFBLHFDQUVBLFlBQ0EsS0FBQSxRQUNBLE9BQ0EsS0FBQSxTQUNBLFlBQ0EsTUFDQSxNQUFBLHlCQUNBLEtBQUEsVUFFQSxPQUNBLE1BQUEscUJBQ0EsS0FBQSxVQUVBLE1BQ0EsTUFBQSxlQUNBLEtBQUEsU0FDQSxRQUFBLFNBQUEsWUFHQSxVQUNBLE9BQ0EsUUFDQSxXQU1BLElBQUEsVUFDQSxHQUFBLE1BRUEsS0FBQSxNQUNBLElBQUEsMEJBQ0EsU0FBQSxPQUNBLE9BQUEsRUFDQSxRQUFBLFNBQUEsS0FDQSxJQUFBLEdBQUEsSUFBQSxFQUFBLEdBQUEsSUFBQSxPQUFBLEtBQUEsQ0FDQSxRQUFBLElBQUEsSUFBQSxJQUNBLElBQUEsU0FDQSxPQUFBLE1BQUEsSUFBQSxJQUFBLEdBQ0EsTUFBQSxLQUFBLElBQUEsSUFBQSxNQUNBLE9BQUEsS0FBQSxXQUlBLFFBQUEsSUFBQSxRQUNBLE9BQUEsT0FDQSxJQUFBLGlCQUVBLElBQUEsaUJBQ0EsS0FBQSxTQUNBLFdBQ0EsTUFBQSxZQUFBLEtBQUEscUJBQ0EsTUFBQSxrQkFBQSxLQUFBLGNBR0EsSUFBQSxXQUNBLEtBQUEsT0FDQSxPQUVBLE1BQUEsV0FDQSxRQUVBLElBQUEsYUFDQSxLQUFBLFdBQ0EsSUFBQSxXQUNBLE9BQUEsVUFDQSxPQUNBLE9BQUEsY0FFQSxNQUFBLG9DQUNBLE9BQ0Esb0JBQ0EscUJBQ0EseUJBTUEsTUFBQSxnQkFDQSxRQUVBLElBQUEsU0FDQSxLQUFBLGFBQ0EsU0FBQSxZQVFBLElBQUEsT0FBQSxPQUFBLEtBQUEsS0FBQSxPQUFBLFdBQ0EsTUFBQSxPQUFBLEtBQUEsSUFDQSxPQUFBLGFBQUEsT0FBQSxLQUFBLGFBQ0EsTUFBQSxPQUFBLE9BQUEsS0FBQSxPQUNBLE1BQUEsYUFDQSxLQUFBLEdBQUEsUUFBQSxPQUFBLENBQ0EsR0FBQSxRQUFBLEtBQUEsS0FBQSxNQUFBLE1BQUEsTUFBQSxNQUFBLEtBQUEsTUFBQSxNQUFBLEtBQ0EsT0FBQSxXQUFBLEtBQUEsT0FFQSxRQUFBLElBQUEsT0FDQSxPQUFBLE1BQUEsVUFFQSxDQUNBLEdBQUEsU0FBQSxzQkFBQSxPQUFBLEtBQUEsSUFDQSxHQUFBLE1BRUEsS0FBQSxNQUNBLElBQUEsUUFDQSxTQUFBLE9BQ0EsT0FBQSxFQUNBLFFBQUEsU0FBQSxLQUNBLE9BQUEsT0FBQSxJQUFBLEtBQUEsVUFJQSxPQUFBLE1BQ0EsS0FFQSxRQUFBLElBQUEsa0NBQ0EsUUFBQSxJQUFBLE9BQUEsUUFDQSxPQUFBLE1BQUEsT0FBQSxLQUFBLEtBRUEsT0FBQSxTQUFBLFdBQ0EsR0FBQSxPQUFBLFNBQUEsT0FBQSxDQUNBLEdBQUEsV0FBQSxTQUFBLFNBQ0EsT0FBQSxHQUFBLGVBQUEsU0FBQSxRQUFBLEtBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLElBRUEsSUFBQSxRQUFBLFlBQUEsS0FBQSxDQUdBLElBQUEsR0FGQSxVQUFBLE9BQUEsTUFBQSxXQUNBLFdBQ0EsRUFBQSxFQUFBLEVBQUEsU0FBQSxPQUFBLElBQ0EsUUFBQSxTQUFBLEdBQUEsU0FDQSxRQUFBLFNBQUEsR0FBQSxNQUFBLE1BQUEsU0FBQSxHQUFBLE1BQ0EsUUFBQSxTQUFBLEdBQUEsTUFBQSxLQUFBLFNBQUEsR0FBQSxJQUVBLFFBQUEsS0FBQSxLQUFBLE9BQUEsV0FBQSxRQUNBLE9BQUEsS0FBQSxLQUFBLE9BQUEsS0FBQSxTQUNBLE9BQUEsS0FBQSxhQUFBLE9BQUEsTUFBQSxhQUNBLE9BQUEsS0FBQSxPQUFBLE9BQUEsTUFBQSxXQUVBLFFBQUEsS0FBQSxLQUFBLE9BQUEsTUFDQSxPQUFBLE1BQUEsZUFBQSxPQUFBLEtBQUEsYUFBQSxPQUFBLE1BQUEsY0FDQSxPQUFBLE1BQUEsU0FBQSxPQUFBLEtBQUEsT0FBQSxPQUFBLE1BQUEsT0FFQSxTQUFBLElBQUEsT0FBQSxNQUNBLE9BQUEsT0FBQSxPQUFBLEtBQUEsZ0JBS0EsV0FBQSx3QkFBQSxTQUFBLFNBQUEsY0FBQSxTQUNBLFNBQUEsT0FBQSxPQUFBLGFBQ0EsUUFBQSxJQUFBLGFBQ0EsT0FBQSxLQUFBLFlBQ0EsT0FBQSxPQUFBLE9BQUEsS0FBQSxLQUFBLE9BRUEsT0FBQSxLQUFBLE9BQUEsS0FBQSxLQUFBLElBQ0EsSUFBQSxTQUVBLFFBQUEsTUFBQSxNQUNBLE9BQUEsU0FBQSxXQUNBLEdBQUEsT0FBQSxTQUFBLE9BQUEsQ0FJQSxRQUFBLElBQUEsT0FBQSxXQUtBLFdBQUEsd0JBQUEsU0FBQSxTQUFBLGNBQUEsU0FDQSxTQUFBLE9BQUEsT0FBQSxZQUFBLFFBQ0EsUUFBQSxJQUFBLGFBQ0EsT0FBQSxLQUFBLFlBQ0EsT0FBQSxLQUFBLEtBQUEsS0FBQSxVQUFBLE9BQUEsS0FBQSxNQUNBLE9BQUEsU0FBQSxXQUNBLEdBQUEsT0FBQSxTQUFBLE9BQUEsQ0FDQSxHQUFBLFdBQUEsU0FBQSxTQUNBLE9BQUEsR0FBQSxlQUFBLFNBQUEsUUFBQSxLQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxJQUVBLFFBQUEsS0FBQSxLQUFBLEtBQUEsTUFBQSxPQUFBLEtBQUEsTUFDQSxPQUFBLE9BQUEsT0FBQSxLQUFBLGdCQUlBLFdBQUEsd0JBQUEsU0FBQSxTQUFBLGFBQ0EsU0FBQSxPQUFBLE9BQUEsWUFDQSxRQUFBLElBQUEsbUNBQ0EsT0FBQSxLQUFBLFdBRUEsT0FBQSxhQUFBLFdBQ0EsT0FBQSxHQUFBLGVBQUEsU0FBQSxPQUFBLEtBQUEsS0FBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLFFBQUEsS0FHQSxPQUFBLGlCQUFBLFdBQ0EsT0FBQSxHQUFBLG1CQUFBLFNBQUEsT0FBQSxLQUFBLEtBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLFFDN1dBLFFBQUEsT0FBQSx1QkFBQSxlQUNBLFFBQUEsVUFBQSxZQUFBLHNCQUFBLFNBQUEsVUFBQSxxQkFDQSxHQUFBLEtBQUEsVUFBQSx3QkFBQSxHQUFBLFFBQ0EsT0FBQSxPQUFBLE1BQUEsVUFBQSxTQUFBLEdBQ0EsS0FBQSxPQUFBLE9BQ0EsTUFBQSxPQUFBLFFBQ0EsUUFBQSxPQUFBLFFBR0EsUUFDQSxTQUFBLFNBQUEsS0FBQSxpQkFDQSxNQUFBLEtBQUEsT0FBQSxLQUFBLFdBQ0Esb0JBQUEsYUFBQSxvQ0FBQSxXQUNBLHFCQUdBLE1BQUEsU0FBQSxXQUFBLFVBQ0EsTUFBQSxLQUFBLE9BQUEsS0FBQSxXQUFBLEtBQUEsU0FBQSxLQUFBLFlBQUEsVUFFQSxJQUFBLFNBQUEsUUFDQSxNQUFBLEtBQUEsS0FBQSxHQUFBLFNBQUEsVUFFQSxLQUFBLFNBQUEsS0FBQSxpQkFDQSxJQUFBLEtBQUEsS0FBQSxTQUFBLE9BQ0Esb0JBQUEsYUFBQSxpQ0FBQSxXQUNBLGdCQUFBLFVBR0EsT0FBQSxTQUFBLEtBQUEsaUJBQ0EsSUFBQSxPQUFBLEtBQUEsU0FBQSxTQUNBLG9CQUFBLGFBQUEsb0NBQUEsV0FDQSxnQkFBQSxnQkMvQkEsUUFBQSxPQUFBLHdCQUFBLGlCQUNBLFNBQUEsb0JBQ0EsU0FBQSxNQUdBLFFBQUEsaUJBQ0EsU0FBQSxnQkFDQSxlQUNBLE1BQUEsUUFDQSxJQUFBLElBQ0EsWUFBQSxFQUNBLFNBQUEsZUFFQSxNQUFBLGNBQ0EsSUFBQSxHQUNBLFdBQUEscUJBQ0EsWUFBQSx3Q0FDQSxTQUNBLGVBQUEsUUFBQSxtQkFBQSxTQUFBLE1BQUEsa0JBQ0EsTUFBQSxPQUFBLE1BQUEsRUFBQSxpQkFBQSxlQUlBLE1BQUEsYUFDQSxJQUFBLFlBQ0EsV0FBQSxxQkFDQSxZQUFBLHdDQUNBLFNBQ0EsZUFBQSxPQUFBLG1CQUFBLGVBQUEsU0FBQSxLQUFBLGtCQUNBLE1BQUEsTUFBQSxNQUFBLElBQUEsRUFBQSxpQkFBQSxlQUlBLE1BQUEsYUFDQSxJQUFBLHVDQUNBLFdBQUEscUJBQ0EsWUFBQSx3Q0FDQSxTQUNBLGVBQUEsUUFBQSxlQUFBLFNBQUEsTUFBQSxjQUNBLE1BQUEsT0FBQSxNQUFBLGFBQUEsV0FBQSxFQUFBLGFBQUEsZUFJQSxNQUFBLFlBQ0EsSUFBQSxXQUNBLFdBQUEsb0JBQ0EsWUFBQSx5Q0FFQSxNQUFBLGFBQ0EsSUFBQSxvQkFDQSxXQUFBLHFCQUNBLFlBQUEsd0NBQ0EsU0FDQSxhQUFBLFFBQUEsZUFBQSxTQUFBLE1BQUEsY0FDQSxNQUFBLGNBQUEsT0FDQSxNQUFBLElBQUEsYUFBQSxRQUVBLFVBSUEsTUFBQSxpQkFDQSxJQUFBLHdCQUNBLFdBQUEsd0JBQ0EsWUFBQSx3Q0FDQSxTQUNBLGFBQUEsUUFBQSxlQUFBLFNBQUEsTUFBQSxjQUNBLE1BQUEsY0FBQSxPQUNBLE1BQUEsSUFBQSxhQUFBLFFBRUEsVUFJQSxNQUFBLGVBQ0EsSUFBQSwwREFDQSxXQUFBLHlCQUNBLFlBQUEsK0NBQ0EsU0FDQSxZQUFBLGVBQUEsU0FBQSxjQUNBLE1BQUEsY0FBQSxhQUVBLGVBQUEsU0FBQSxlQUFBLFNBQUEsT0FBQSxjQUNBLE1BQUEsY0FBQSxXQUNBLE9BQUEsaUJBQUEsYUFBQSxXQUFBLGFBQUEsV0FBQSxFQUFBLGFBQUEsVUFHQSxVQUlBLE1BQUEsYUFDQSxJQUFBLGVBQ0EsV0FBQSxxQkFDQSxZQUFBLHdDQUNBLFNBQ0EsWUFBQSxRQUFBLGVBQUEsU0FBQSxNQUFBLGNBQ0EsTUFBQSxjQUFBLE9BQ0EsTUFBQSxJQUFBLGFBQUEsUUFFQSxhQU1BLFdBQUEsc0JBQUEsU0FBQSxTQUFBLGdCQUFBLG1CQUNBLFNBQUEsT0FBQSxPQUFBLGNBQUEsa0JBQ0EsUUFBQSxJQUFBLHdCQUNBLE9BQUEsTUFBQSxjQUFBLFFBQ0EsUUFBQSxJQUFBLGVBQ0EsUUFBQSxJQUFBLGNBQUEsZUFDQSxRQUFBLElBQUEsaUJBQUEsVUFDQSxPQUFBLFlBQ0EsWUFBQSxjQUFBLE9BQUEsRUFDQSxhQUFBLGlCQUFBLFNBQ0EsV0FBQSxjQUFBLGVBR0EsT0FBQSxRQUFBLFdBQ0EsT0FBQSxHQUFBLGFBR0EsT0FBQSxTQUFBLFdBQ0EsT0FBQSxHQUFBLGNBR0EsT0FBQSxZQUFBLFNBQUEsZUFDQSxPQUFBLEdBQUEsYUFDQSxXQUFBLGNBQUEsU0FBQSxpQkFBQSxXQUNBLFFBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxRQUlBLFdBQUEsc0JBQUEsU0FBQSxTQUFBLGNBQUEsUUFDQSxTQUFBLE9BQUEsT0FBQSxZQUFBLE9BQ0EsUUFBQSxJQUFBLGFBQ0EsT0FBQSxLQUFBLFlBQ0EsT0FBQSxLQUFBLEtBQUEsS0FBQSxVQUFBLE9BQUEsS0FBQSxNQUNBLE9BQUEsU0FBQSxXQUNBLEdBQUEsT0FBQSxTQUFBLE9BQUEsQ0FDQSxHQUFBLFdBQUEsU0FBQSxTQUNBLE9BQUEsR0FBQSxhQUFBLE9BQUEsUUFBQSxLQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxJQUVBLFFBQUEsS0FBQSxLQUFBLEtBQUEsTUFBQSxPQUFBLEtBQUEsTUFDQSxNQUFBLE9BQUEsT0FBQSxLQUFBLGdCQUlBLFdBQUEsb0JBQUEsU0FBQSxTQUFBLG1CQUNBLFNBQUEsT0FBQSxPQUFBLGtCQUVBLEdBQUEsd0JBQUEsRUFDQSx3QkFBQSxDQUVBLFFBQUEsYUFBQSx3QkFDQSxPQUFBLFdBQUEsR0FFQSxPQUFBLGdCQUFBLFdBQ0EsdUJBQUEsR0FHQSxPQUFBLGlCQUFBLFdBQ0EsdUJBQUEsR0FHQSxPQUFBLHlCQUFBLFdBQ0EsTUFBQSx3QkFDQSxPQUFBLFdBQUEsT0FBQSx5QkFDQSxHQUlBLEdBR0EsT0FBQSxPQUFBLFdBQ0EsT0FBQSxXQUFBLE9BQUEsd0JBQ0EsT0FBQSxhQUFBLHdCQUFBLE9BQUEsV0FBQSxRQUdBLE9BQUEsYUFBQSxFQUNBLE9BQUEsR0FBQSxlQUNBLFdBQUEsT0FBQSxXQUFBLFdBQUEsRUFBQSxTQUFBLGlCQUFBLFdBQ0EsUUFBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLFNBTUEsV0FBQSwwQkFBQSxTQUFBLFNBQUEsbUJBQUEsYUFBQSxnQkFDQSxTQUFBLE9BQUEsT0FBQSxpQkFBQSxXQUFBLGVBQ0EsUUFBQSxJQUFBLGtDQUNBLE9BQUEsTUFBQSxjQUFBLFFBRUEsT0FBQSxZQUNBLFlBQUEsY0FBQSxPQUFBLEVBQ0EsYUFBQSxpQkFBQSxTQUNBLFdBQUEsY0FBQSxlQUdBLE9BQUEsWUFBQSxTQUFBLGVBQ0EsT0FBQSxHQUFBLGVBQ0EsV0FBQSxXQUFBLFdBQUEsY0FBQSxTQUFBLGlCQUFBLFdBQ0EsUUFBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLFFBSUEsV0FBQSxpQ0FBQSxTQUFBLGlCQUFBLFNBQUEsUUFBQSxVQUFBLFdBQUEsa0JBQ0EsU0FBQSxPQUFBLGVBQUEsT0FBQSxNQUFBLFFBQUEsU0FBQSxpQkFDQSxPQUFBLFFBQ0EsT0FBQSxRQUVBLE9BQUEsT0FBQSxXQUNBLGVBQUEsUUFBQSxXQUdBLE9BQUEsYUFBQSxXQUVBLEdBQUEsT0FBQSxLQUFBLFNBQUEsT0FBQSxDQUNBLEdBQUEsV0FBQSxTQUFBLE9BQ0EsZUFBQSxPQUNBLElBQUEsV0FFQSxTQUFBLFdBQUEsT0FDQSxRQUFBLGVBQUEsZ0JBQ0EsUUFBQSxTQUFBLE9BQ0EsRUFBQSxNQUVBLFNBQ0EsT0FBQSxvQ0FDQSxlQUFBLG1EQUVBLEtBQUEsT0FDQSxJQUFBLFFBQUEsYUFBQSxNQUFBLEdBQ0EsU0FBQSxPQUNBLFlBQUEsb0NBQ0EsT0FBQSxFQUNBLEtBQUEsRUFBQSxNQUFBLFNBQ0EsUUFBQSxTQUFBLEtBQ0EsUUFBQSxJQUFBLFlBQUEsS0FDQSxTQUFBLGdCQUNBLElBQUEsS0FBQSxPQUFBLEtBQUEsaUJBQUEsT0FBQSxNQUFBLElBQ0EsUUFBQSxLQUFBLElBQUEsV0FFQSxNQUFBLFNBQUEsS0FDQSxRQUFBLElBQUEsU0FDQSxRQUFBLElBQUEsUUFJQSxRQUFBLEtBQUEsUUFDQSxNQUFBLEtBQUEsT0FBQSxLQUFBLGdCQUlBLFdBQUEsK0JBQUEsU0FBQSxpQkFBQSxTQUFBLFFBQUEsVUFBQSxXQUFBLGtCQUNBLFNBQUEsT0FBQSxlQUFBLE9BQUEsTUFBQSxRQUFBLFNBQUEsaUJBQ0EsT0FBQSxRQUNBLE9BQUEsT0FBQSxXQUNBLGVBQUEsUUFBQSxXQUdBLE9BQUEsV0FBQSxXQUNBLFFBQUEsSUFBQSxxQkFBQSxPQUFBLEtBQUEsTUFFQSxJQUFBLFdBRUEsU0FBQSxXQUFBLGVBQ0EsUUFBQSxpQkFBQSxZQUNBLFFBQUEsb0JBQUEsT0FBQSxLQUFBLE1BQ0EsUUFBQSxpQkFBQSxvQkFDQSxRQUFBLG9CQUFBLFNBQ0EsUUFBQSxTQUFBLE9BQ0EsRUFBQSxNQUVBLFNBQ0EsT0FBQSxvQ0FDQSxlQUFBLG1EQUVBLEtBQUEsT0FDQSxJQUFBLFFBQUEsYUFBQSxnQkFDQSxTQUFBLE9BQ0EsWUFBQSxvQ0FDQSxPQUFBLEVBQ0EsS0FBQSxFQUFBLE1BQUEsU0FDQSxRQUFBLFNBQUEsS0FDQSxRQUFBLElBQUEsWUFBQSxLQUNBLFNBQUEsaUJBQ0EsZUFBQSxTQUdBLE1BQUEsU0FBQSxLQUNBLFFBQUEsSUFBQSxTQUNBLFFBQUEsSUFBQSxZQU1BLFdBQUEsMkJBQUEsU0FBQSxpQkFBQSxTQUFBLFFBQUEsWUFDQSxTQUFBLE9BQUEsZUFBQSxPQUFBLE1BQUEsV0FDQSxPQUFBLEtBQUEsVUFFQSxPQUFBLE9BQUEsV0FDQSxlQUFBLFFBQUEsV0FHQSxPQUFBLGFBQUEsV0FDQSxHQUFBLEtBQUEsT0FBQSxLQUFBLGFBQUEsT0FBQSxPQUFBLEtBQUEsSUFDQSxRQUFBLEtBQUEsSUFBQSxXQUdBLE9BQUEsa0JBQUEsV0FDQSxHQUFBLEtBQUEsT0FBQSxLQUFBLGlCQUFBLE9BQUEsT0FBQSxLQUFBLElBQ0EsUUFBQSxLQUFBLElBQUEsY0FLQSxXQUFBLHNCQUFBLFNBQUEsU0FBQSxTQUFBLFFBQUEsZ0JBQUEsbUJBQ0EsU0FBQSxPQUFBLE9BQUEsT0FBQSxNQUFBLGNBQUEsa0JBRUEsUUFBQSxJQUFBLDRCQUVBLFFBQUEsVUFBQSwwQkFDQSxFQUFBLGtCQUFBLFFBQ0EsTUFDQSxNQUNBLElBQUEsU0FBQSxNQUNBLE1BQUEsTUFBQSxLQUFBLEdBQ0EsT0FBQSxVQUFBLG9DQUNBLE9BQUEsVUFBQSxhQUFBLEtBQUEsR0FBQSwwQkFFQSxXQUFBLFNBQUEsTUFDQSxHQUFBLFNBV0EsT0FWQSxHQUFBLEtBQUEsS0FBQSxNQUFBLE1BQUEsUUFBQSxTQUFBLEVBQUEsTUFDQSxHQUFBLFFBQ0EsTUFBQSxHQUFBLEtBQUEsT0FBQSxXQUFBLGlCQUFBLE1BQ0EsS0FBQSxNQUFBLEtBQUEsS0FBQSxPQUFBLFdBQUEscUJBQUEsTUFBQSxTQUFBLEtBQUEsT0FBQSxXQUFBLG1CQUFBLE9BQ0EsS0FBQSxLQUFBLEtBQUEsT0FBQSxXQUFBLGFBQUEsTUFDQSxlQUFBLEtBQUEsT0FBQSxXQUFBLG1CQUFBLFFBQUEsS0FBQSxVQUFBLEdBQ0EsTUFBQSxLQUFBLFFBSUEsS0FBQSxVQUFBLFFBRUEsS0FBQSxTQUFBLE1BRUEsTUFEQSxTQUFBLElBQUEsT0FDQSxHQUFBLEtBQUEsR0FBQSxLQUFBLFVBTUEsRUFBQSxrQkFBQSxHQUFBLHFCQUFBLFNBQUEsRUFBQSxNQUVBLEdBREEsUUFBQSxJQUFBLFlBQUEsS0FBQSxLQUFBLEtBQUEsTUFBQSxLQUFBLEtBQUEsSUFDQSxlQUFBLEtBQUEsS0FBQSxLQUFBLFNBQ0EsT0FBQSxTQUFBLEtBQUEsS0FBQSxRQUNBLENBQ0EsR0FBQSxPQUFBLFNBQUEsS0FBQSxLQUFBLEdBRUEsUUFBQSxhQUFBLE1BQUEsVUFLQSxPQUFBLGVBQUEsV0FDQSxRQUFBLElBQUEsT0FBQSxpQkFDQSxPQUFBLE1BQ0EsWUFBQSwrQ0FDQSxXQUFBLGdDQUNBLFNBQ0EsUUFBQSxXQUNBLE1BQUEsUUFBQSxXQUVBLFNBQUEsV0FDQSxNQUFBLFFBQUEsVUFFQSxnQkFBQSxXQUNBLE1BQUEsUUFBQSxxQkFPQSxPQUFBLGFBQUEsV0FDQSxRQUFBLElBQUEsT0FBQSxpQkFDQSxPQUFBLE1BQ0EsWUFBQSxrREFDQSxXQUFBLDhCQUNBLFNBQ0EsUUFBQSxXQUNBLE1BQUEsUUFBQSxXQUVBLFNBQUEsV0FDQSxNQUFBLFFBQUEsVUFFQSxnQkFBQSxXQUNBLE1BQUEsUUFBQSxxQkFPQSxPQUFBLFdBQUEsV0FDQSxHQUFBLFlBQ0EsVUFBQSxNQUFBLFlBQ0EsU0FBQSxLQUFBLE9BQ0EsU0FBQSxPQUFBLElBQ0EsU0FBQSxNQUFBLGVBQUEsWUFBQSxRQUFBLFVBQUEsUUFBQSxLQUFBLFNBQUEsWUFBQSxNQUFBLEtBQUEsU0FBQSxNQUFBLGdCQUNBLEVBQUEsTUFDQSxTQUNBLE9BQUEsb0NBQ0EsZUFBQSxrQ0FFQSxLQUFBLE9BQ0EsSUFBQSxtQkFDQSxTQUFBLE9BQ0EsT0FBQSxFQUNBLEtBQUEsS0FBQSxVQUFBLFVBQ0EsUUFBQSxTQUFBLEtBQ0EsUUFBQSxJQUFBLFlBQUEsSUFDQSxJQUFBLEtBQUEsT0FBQSxLQUFBLG1CQUFBLFNBQUEsSUFBQSxJQUNBLFFBQUEsS0FBQSxJQUFBLFdBRUEsTUFBQSxTQUFBLEtBQ0EsUUFBQSxJQUFBLFNBQ0EsUUFBQSxJQUFBLFNBS0EsT0FBQSxhQUFBLFNBQUEsTUFBQSxPQUNBLEdBQUEsVUFBQSxrQkFBQSxLQUNBLEdBQUEsUUFBQSxTQUFBLFNBQUEsVUFDQSxRQUFBLFNBQUEsS0FDQSxPQUFBLFNBQUEsSUFBQSxXQUVBLE9BQUEsS0FBQSxTQUNBLE9BQUEsTUFDQSxZQUFBLGtEQUNBLFdBQUEsMEJBQ0EsU0FDQSxVQUFBLFdBQ0EsTUFBQSxRQUFBLGFBUUEsT0FBQSxTQUFBLFNBQUEsU0FBQSxVQUNBLFFBQUEsSUFBQSw2QkFDQSxPQUFBLGdCQUFBLFNBRUEsRUFBQSxXQUFBLE9BQUEsYUFDQSxJQUFBLGNBR0EsU0FBQSxTQUFBLFNBQ0EsRUFBQSxTQUFBLFlBQ0EsR0FBQSx1QkFDQSxXQUFBLFdBRUEsUUFBQSxHQUFBLE1BQUEsS0FBQSxFQUFBLEdBQ0EsT0FBQSxXQUlBLE1BQUEsS0FBQSxLQUFBLE9BRUEsY0FDQSxjQUFBLEVBQ0EsU0FBQSxFQUNBLG1CQUFBLEVBQ0EsZUFBQSxFQUNBLFVBQUEsRUFBQSxJQUNBLGdCQUFBLEVBQ0EsY0FBQSxXQUNBLEVBQUEsUUFBQSxLQUFBLEdBQUEsSUFBQSxTQUdBLGFBQ0EsY0FBQSxFQUNBLFNBQUEsRUFDQSxtQkFBQSxFQUNBLFVBQUEsRUFBQSxJQUNBLGVBQUEsRUFDQSxlQUFBLEVBQ0EsY0FBQSxXQUNBLEVBQUEsUUFBQSxLQUFBLEdBQUEsSUFBQSxTQUdBLGFBQ0EsWUFBQSxHQUdBLEdBQUEsU0FFQSxlQUFBLE9BQUEsVUFBQSxhQUFBLEdBQUEseUJBQ0EsWUFBQSxLQUFBLE9BQUEsUUFBQSxjQUFBLFdBQUEsbUJBQUEsU0FBQSxlQUFBLFNBQUEsZ0JBQ0EsUUFBQSxLQUFBLFFBQUEsY0FBQSxXQUFBLG9CQUNBLFFBQUEsaUJBQUEsU0FDQSxVQUNBLEtBQUEsS0FBQSxLQUFBLEVBQUEsTUFBQSxHQUFBLFFBQUEsMENBQ0EsS0FBQSxPQUFBLE1BQUEsTUFBQSxNQUFBLElBQUEsUUFBQSw4Q0FDQSxLQUFBLFdBQUEsTUFBQSxNQUFBLE1BQUEsSUFBQSxRQUFBLDRDQUNBLEtBQUEsUUFBQSxNQUFBLFlBQUEsTUFBQSxJQUFBLFFBQUEsc0NBQ0EsS0FBQSxjQUFBLE1BQUEsV0FBQSxNQUFBLElBQUEsUUFBQSw2Q0FDQSxLQUFBLFNBQUEsTUFBQSxTQUFBLE1BQUEsSUFBQSxRQUFBLDJDQUNBLEtBQUEsZUFBQSxNQUFBLGdCQUFBLE1BQUEsSUFBQSxRQUFBLDRDQUNBLFVBQUEsT0FBQSxlQUFBLFVBQUEsU0FBQSxVQUFBLGFBQ0EsU0FBQSxPQUNBLGNBQUEsY0FFQSxLQUFBLFdBQUEsTUFBQSxVQUFBLE1BQUEsSUFBQSxRQUFBLGdEQUNBLEtBQUEsbUJBQUEsTUFBQSxpQkFBQSxNQUFBLElBQUEsUUFBQSxvREFDQSxVQUFBLE9BQUEsZUFBQSxVQUFBLFNBQUEsVUFBQSxhQUNBLFNBQUEsT0FDQSxjQUFBLGFBR0EsU0FBQSxJQUFBLFVBQ0EsTUFBQSxXQUNBLGVBQUEsU0FBQSxLQUFBLE1BQUEsSUFDQSxPQUFBLGdCQUFBLElBQ0EsVUFDQSxXQUNBLEVBQUEsS0FBQSxTQUFBLEtBQUEsbUJBQUEsU0FBQSxFQUFBLE1BRUEsR0FBQSxHQUFBLEtBQUEsUUFBQSxDQUNBLEdBQUEsVUFBQSxHQUNBLE1BQUEsUUFBQSxTQUFBLFNBQUEsS0FBQSxPQUNBLElBQUEsV0FBQSxLQUFBLEtBQUEsTUFBQSxNQUFBLEtBQUEsS0FBQSxNQUFBLFNBQ0EsTUFBQSxZQUFBLFNBQUEsTUFBQSxLQUFBLFdBQ0EsSUFBQSxFQUFBLFFBQUEsS0FBQSxNQUFBLGNBQ0EsU0FBQSxRQUFBLFFBQUEsS0FBQSxNQUNBLE9BQUEsS0FBQSxLQUFBLFFBRUEsV0FBQSxLQUFBLE9BQUEsU0FBQSxlQUFBLE1BQUEsS0FBQSxLQUFBLFFBQ0EsVUFBQSxLQUFBLE9BQUEsU0FBQSxlQUFBLE1BQUEsS0FBQSxRQUNBLFFBQUEsS0FBQSxPQUNBLFNBQUEsU0FBQSxPQUNBLFNBQUEsY0FBQSxhQUVBLFFBQUEsS0FBQSxhQUdBLFFBQUEsSUFBQSxTQUNBLE9BQUEsT0FBQSxJQUNBLGdCQUFBLFVBQ0EsZ0JBQUEsT0FBQSxPQUFBLEtBRUEsZ0JBQUEsUUFBQSxRQUNBLFFBQUEsSUFBQSxnQkFFQSxJQUFBLGNBQUEsU0FBQSxNQUNBLEdBQUEsa0JBQUEsS0FBQSxHQUFBLFdBQUEsV0FBQSxXQUFBLFlBQ0EsVUFBQSxPQUFBLFNBQUEsUUFDQSxnQkFBQSxLQUFBLEdBQUEsWUFDQSxPQUFBLE9BQUEseUJBQUEsS0FBQSxHQUFBLFdBQUEsV0FBQSxZQUNBLFlBQUEsZUFDQSxJQUFBLE9BQUEsT0FBQSxFQUFBLENBQ0EsR0FBQSxpQkFBQSxPQUFBLEdBQUEsV0FDQSxpQkFBQSxrQkFDQSxZQUFBLGlCQUVBLEdBQUEsa0JBQUEsYUFBQSxZQUFBLFVBQUEsQ0FDQSxHQUFBLGNBQUEsV0FBQSxZQUFBLFlBQUEsU0FFQSxlQUFBLG1CQUNBLEtBQUEsT0FBQSxlQUFBLGNBQ0EsUUFBQSxJQUFBLG1CQUtBLGNBQUEsU0FBQSxNQUNBLEdBQUEsV0FBQSxLQUFBLEdBQUEsV0FBQSxXQUFBLFdBR0EsS0FBQSxPQUFBLGtCQUFBLFVBQ0EsSUFBQSxLQUFBLE9BQUEsQ0FDQSxHQUFBLE9BQUEsS0FBQSxHQUFBLGFBQUEsS0FBQSxHQUFBLGFBQ0EsT0FBQSxLQUFBLFFBQ0EsS0FBQSxPQUFBLFFBQUEsT0FBQSxNQUFBLElBQ0EsS0FBQSxjQUFBLE9BQUEsT0FDQSxRQUFBLElBQUEsb0JBTUEsWUFBQSxTQUFBLE1BQ0EsYUFBQSxNQUNBLGNBQUEsTUFHQSxHQUFBLFFBQUEsT0FBQSxXQUNBLFlBQUEsRUFBQSxjQUlBLEVBQUEsV0FBQSxRQUNBLElBQUEsZUFDQSxNQUFBLE1BQ0EsU0FBQSxPQUNBLEtBQUEsRUFDQSxTQUFBLFFBQ0EsV0FBQSxFQUNBLGFBQUEsRUFDQSxPQUFBLE9BQ0EsVUFBQSxJQUNBLE9BQUEsaUJBQUEsU0FFQSxrQkFBQSxTQUFBLFVBU0EsTUFSQSxnQkFBQSxVQUFBLE1BQ0EsU0FBQSxPQUdBLFNBQUEsS0FEQSxNQUFBLFNBQUEsTUFBQSxJQUFBLFNBQUEsS0FDQSxTQUFBLEtBQUEsSUFBQSxTQUFBLEtBRUEsVUFFQSxVQUVBLFlBQ0EsYUFBQSxFQUNBLEtBQUEsU0FBQSxNQUNBLE1BQUEsTUFBQSxRQUNBLEtBQUEsUUFFQSxLQUFBLFNBRUEsTUFBQSxTQUFBLE1BQ0EsTUFBQSxNQUFBLFlBRUEsS0FBQSxTQUFBLE1BQ0EsTUFBQSxNQUFBLE9BQUEsR0FFQSxRQUFBLFNBQUEsTUFDQSxNQUFBLE1BQUEsY0FDQSxLQUFBLGNBRUEsS0FBQSxXQUdBLFlBQUEsU0FBQSxLQUNBLEdBQUEsTUFBQSxJQUNBLGFBQUEsU0FDQSxDQUNBLEdBQUEsU0FBQSxFQUFBLFdBQUEsV0FBQSxJQUVBLElBREEsUUFBQSxJQUFBLFNBQUEsUUFBQSxNQUNBLGVBQUEsUUFBQSxTQUNBLE9BQUEsU0FBQSxTQUNBLElBQUEsUUFBQSxRQUFBLEtBQUEsQ0FDQSxHQUFBLE9BQUEsU0FBQSxLQUNBLElBQUEsT0FBQSxLQUFBLG1CQUFBLFNBQUEsT0FDQSxRQUFBLEtBQUEsSUFBQSxjQUVBLENBQ0EsUUFBQSxJQUFBLGVBQUEsSUFDQSxJQUFBLE9BQUEsU0FBQSxJQUNBLFFBQUEsYUFBQSxNQUFBLFVBSUEsT0FBQSxFQUNBLGFBQUEsd0NBQ0EsTUFBQSxlQUNBLGFBQUEsV0FDQSxZQUFBLEVBQUEsWUFDQSxFQUFBLFlBQUEsTUFBQSxZQUFBLGNBQ0EsVUFDQSxLQUFBLFNBQUEsU0FFQSxFQUFBLFdBQUEsWUFBQSxRQUFBLEdBQUEsZUFFQSxJQUFBLFdBQ0EsRUFBQSxXQUFBLFlBQUEsTUFBQSxjQUVBLElBQUEsU0FBQSxTQUNBLEVBQUEsUUFBQSxTQUFBLHdCQUFBLEdBRUEsRUFBQSxXQUFBLFdBQUEsUUFBQSxHQUFBLGVBSUEsY0FBQSxTQUFBLE9BQ0EsR0FBQSxPQUFBLEVBQUEsTUFBQSxRQUFBLFFBQUEsYUFBQSxLQUFBLEtBU0EsT0FOQSxHQUFBLFFBQUEsS0FBQSxXQUFBLE9BQUEsT0FBQSxJQUFBLEdBQ0EsT0FBQSxPQUFBLElBQUEsRUFDQSxFQUFBLFFBQUEsS0FBQSxXQUFBLFlBQUEsU0FBQSxxQkFFQSxFQUFBLFFBQUEsV0FBQSxZQUFBLFlBQUEsc0JBRUEsUUFLQSxFQUFBLFdBQUEsUUFBQSxnQkFDQSxRQUFBLEVBQ0EsS0FBQSxFQUNBLE1BQUEsRUFDQSxLQUFBLEVBQ0EsU0FBQSxhQUtBLGdCQUFBLEVBQUEsb0JBQUEsRUFBQSxlQUFBLEtBS0EsT0FBQSxTQUFBLFFBRUEsV0FBQSxxQkFBQSxTQUFBLFNBQUEsUUFDQSxTQUFBLE9BQUEsT0FBQSxPQUNBLFFBQUEsSUFBQSxrQ0FDQSxPQUFBLFFBRUEsT0FBQSxTQUFBLFdBQ0EsR0FBQSxPQUFBLFNBQUEsT0FBQSxDQUNBLEdBQUEsV0FBQSxTQUFBLE9BQ0EsT0FBQSxHQUFBLGFBQUEsT0FBQSxNQUFBLEtBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLElBR0EsUUFBQSxLQUFBLEtBREEsSUFBQSxPQUFBLEtBQUEsUUFHQSxLQUFBLE1BQUEsT0FBQSxLQUFBLE1BRUEsTUFBQSxLQUFBLE9BQUEsS0FBQSxnQkFJQSxXQUFBLHdCQUFBLFNBQUEsaUJBQUEsU0FBQSxRQUFBLGNBQ0EsU0FBQSxPQUFBLGVBQUEsT0FBQSxNQUFBLGFBQ0EsT0FBQSxLQUFBLFlBRUEsT0FBQSxPQUFBLFdBQ0EsZUFBQSxRQUFBLFdBR0EsT0FBQSxPQUFBLFdBQ0EsR0FBQSxXQUFBLFdBQ0EsZUFBQSxRQUNBLE9BQUEsR0FBQSxpQkFBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLFFBQUEsSUFFQSxPQUFBLE9BQUEsT0FBQSxLQUFBLGVBR0EsV0FBQSx5QkFBQSxTQUFBLFNBQUEsY0FBQSxRQUNBLFNBQUEsT0FBQSxPQUFBLFlBQUEsT0FDQSxRQUFBLElBQUEseUJBQ0EsT0FBQSxLQUFBLFdBQ0EsSUFBQSxTQUFBLHNCQUFBLE9BQUEsS0FBQSxJQUVBLFFBQUEsb0JBQUEsU0FBQSxRQUNBLEdBQUEsY0FtQkEsT0FsQkEsU0FBQSxJQUFBLGdDQUFBLFFBQ0EsTUFBQSxRQUFBLEtBQUEsUUFDQSxFQUFBLE1BRUEsS0FBQSxNQUNBLElBQUEsb0JBQUEsT0FDQSxTQUFBLE9BQ0EsT0FBQSxFQUNBLFFBQUEsU0FBQSxLQUNBLFdBQUEsSUFBQSxLQUFBLE9BQUEsVUFDQSxJQUFBLGFBQUEsT0FBQSxvQkFBQSxJQUFBLE9BQ0EsS0FBQSxHQUFBLFFBQUEsYUFDQSxRQUFBLElBQUEsTUFDQSxXQUFBLE1BQUEsWUFBQSxTQUtBLFlBR0EsRUFBQSxNQUVBLEtBQUEsTUFDQSxJQUFBLFFBQ0EsU0FBQSxPQUNBLE9BQUEsRUFDQSxRQUFBLFNBQUEsS0FDQSxPQUFBLE9BQUEsSUFBQSxLQUFBLE1BQ0EsSUFBQSxhQUFBLE9BQUEsb0JBQUEsSUFBQSxPQUNBLEtBQUEsR0FBQSxRQUFBLGFBQ0EsT0FBQSxPQUFBLFdBQUEsTUFBQSxZQUFBLFNBS0EsT0FBQSxNQUNBLEtBR0EsT0FBQSxNQUFBLE9BQUEsS0FBQSxLQUNBLE9BQUEsU0FBQSxXQUNBLEdBQUEsT0FBQSxTQUFBLE9BQUEsQ0FDQSxHQUFBLFdBQUEsU0FBQSxTQUNBLE9BQUEsR0FBQSxhQUFBLE9BQUEsUUFBQSxLQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxJQUVBLFFBQUEsS0FBQSxLQUFBLE9BQUEsTUFDQSxNQUFBLE9BQUEsT0FBQSxLQUFBLGdCQUlBLFdBQUEsc0JBQUEsU0FBQSxTQUFBLFNBQUEsYUFDQSxTQUFBLE9BQUEsT0FBQSxPQUFBLFlBQ0EsUUFBQSxJQUFBLG1DQUNBLE9BQUEsS0FBQSxXQUVBLE9BQUEsYUFBQSxXQUNBLE9BQUEsR0FBQSxhQUFBLE9BQUEsT0FBQSxLQUFBLEtBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLEtBR0EsT0FBQSxpQkFBQSxXQUNBLE9BQUEsR0FBQSxpQkFBQSxPQUFBLE9BQUEsS0FBQSxLQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxLQUdBLE9BQUEsaUJBQUEsV0FDQSxPQUFBLE1BQ0EsWUFBQSxnREFDQSxXQUFBLHVCQUNBLFNBQ0EsWUFBQSxXQUNBLE1BQUEsUUFBQSxhQ3QwQkEsUUFBQSxPQUFBLHFCQUFBLGVBQ0EsUUFBQSxTQUFBLFlBQUEsc0JBQUEsU0FBQSxVQUFBLHFCQUNBLEdBQUEsS0FBQSxVQUFBLHNCQUFBLEdBQUEsUUFDQSxPQUFBLE9BQUEsTUFBQSxVQUFBLFNBQUEsR0FDQSxLQUFBLE9BQUEsT0FDQSxNQUFBLE9BQUEsUUFDQSxRQUFBLE9BQUEsUUFHQSxRQUNBLFNBQUEsU0FBQSxLQUFBLGlCQUNBLE1BQUEsS0FBQSxPQUFBLEtBQUEsV0FDQSxvQkFBQSxhQUFBLG9DQUFBLFdBQ0EscUJBR0EsTUFBQSxTQUFBLFdBQUEsVUFDQSxNQUFBLEtBQUEsT0FBQSxLQUFBLFdBQUEsS0FBQSxTQUFBLEtBQUEsWUFBQTtFQUVBLElBQUEsU0FBQSxRQUNBLE1BQUEsS0FBQSxLQUFBLEdBQUEsU0FBQSxVQUVBLEtBQUEsU0FBQSxLQUFBLGlCQUNBLElBQUEsS0FBQSxLQUFBLFNBQUEsT0FDQSxvQkFBQSxhQUFBLGlDQUFBLFdBQ0EsZ0JBQUEsVUFHQSxPQUFBLFNBQUEsS0FBQSxpQkFDQSxJQUFBLE9BQUEsS0FBQSxTQUFBLFNBQ0Esb0JBQUEsYUFBQSxvQ0FBQSxXQUNBLGdCQUFBLGdCQy9CQSxRQUFBLE9BQUEsUUFDQSx1QkFFQSxRQUNBLGdCQUFBLHFCQUNBLFNBQUEsY0FBQSwwQkFDQSxlQUFBLFNBQUEsUUFBQSxPQUFBLG9CQUNBLG1CQUFBLFNBQUEsU0FBQSxPQUFBLFNBQUEsS0FBQSxRQUNBLFlBQ0EsMkJBS0EsV0FBQSw0QkFDQSxTQUFBLFFBQUEsVUFBQSxVQUNBLFNBQUEsUUFDQSxPQUFBLFNBQ0EsSUFBQSxRQUtBLFdBQUEseUJBQ0EsU0FBQSxRQUNBLFNBQUEsT0FBQSxPQUNBLEdBQ0EsT0FEQSxLQUFBLE9BQUEsSUFFQSxNQUFBLEtBQ0EsS0FBQSxPQUFBLFdBQ0EsTUFBQSxRQUVBLEtBQUEsU0FBQSxXQUVBLE1BREEsT0FBQSxVQUNBLE9BQ0EsSUFBQSxLQUFBLFVBQ0EsT0FBQSxLQUFBLGFBQ0EsS0FDQSxXQUNBLE1BQUEsV0FDQSxPQUFBLE1BQUEsT0FFQSxXQUNBLE1BQUEsZUFJQSxLQUFBLFNBQUEsS0FBQSxTQUNBLEtBQUEsUUFBQSxXQUNBLE9BQUEsTUFBQSxXQ2pEQSxRQUFBLE9BQUEsdUJBQUEsZUFDQSxRQUFBLFVBQUEsWUFBQSxTQUFBLFdBQ0EsR0FBQSxLQUFBLFVBQUEsdUJBQ0EsT0FBQSxPQUFBLE1BQUEsU0FBQSxJQUdBLFFBQ0EsaUJBQUEsU0FBQSxXQUFBLFdBQUEsVUFDQSxNQUFBLEtBQUEsT0FBQSxLQUFBLFdBQUEsV0FBQSxXQUFBLEtBQUEsU0FBQSxLQUFBLFlBQUEiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG4gICAgJ25nTG9jYWxlJyxcbiAgICAnbmdDb29raWVzJyxcbiAgICAnbmdSZXNvdXJjZScsXG4gICAgJ25nU2FuaXRpemUnLFxuICAgICdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJyxcbiAgICAndWkuYm9vdHN0cmFwJyxcbiAgICAndWkucm91dGVyJyxcbiAgICAndWkudXRpbHMnLFxuICAgICd1aS5sYXlvdXQnLFxuICAgICdhbmd1bGFyLWdyb3dsJyxcbiAgICAnYW5ndWxhck1vbWVudCcsXG4gICAgJ2FuZ3VsYXJVdGlscy5kaXJlY3RpdmVzLmRpclBhZ2luYXRpb24nLFxuICAgICdzY2hlbWFGb3JtJyxcbiAgICAnYW5ndWxhci1qcWdyaWQnLFxuXG4gICAgLy9QYXJ0aWFsc1xuICAgICdhcHAucGFydGlhbHMnLFxuXG4gICAgLy9Db21tb25cbiAgICAnYXBwLmNvbW1vbi5jb25maWcnLCAnYXBwLmNvbW1vbi5kaXJlY3RpdmVzJywgJ2FwcC5jb21tb24uc2VydmljZXMnLFxuXG4gICAgLy9TZWFyY2hcbiAgICAnYXBwLnNlYXJjaC5zZXJ2aWNlcycsXG5cbiAgICAvL1RvZG9cbiAgICAnYXBwLnRvZG8uY29udHJvbGxlcnMnLCAnYXBwLnRvZG8uc2VydmljZXMnLFxuICAgIFxuICAgICdhcHAuc3lzdGVtLmNvbnRyb2xsZXJzJywgJ2FwcC5zeXN0ZW0uc2VydmljZXMnLFxuICAgIFxuICAgICdhcHAuY21pcy5zZXJ2aWNlcydcblxuXSk7XG5cbiIsIi8qXHJcbiogVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbipcclxuKiBDb3B5cmlnaHQgKGMpIDIwMTYgRGV2ZWxlciBkZXZnaW5pZVxyXG4qXHJcbiogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4qIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcclxuKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXHJcbiogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxyXG4qIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xyXG4qIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbipcclxuKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4qXHJcbiogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4qIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4qIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4qIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4qIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXHJcbiogU09GVFdBUkUuXHJcbiovXHJcblxyXG4vKiBnbG9iYWwgJCAqL1xyXG4vKiBnbG9iYWwgYW5ndWxhciAqL1xyXG4vKiBnbG9iYWwgalF1ZXJ5ICovXHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnYW5ndWxhci1qcWdyaWQnLCBbXSkuZGlyZWN0aXZlKCdqcUdyaWQnLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdFQScsXHJcbiAgICB0ZW1wbGF0ZTogJzx0YWJsZT48L3RhYmxlPicsXHJcbiAgICBzY29wZToge1xyXG4gICAgICBkYXRhc2V0OiAnPScsXHJcbiAgICAgIG9wdGlvbnM6ICc9JyxcclxuICAgICAgY2FsbGJhY2s6ICc9JyxcclxuICAgICAgcGFnZXI6ICc9J1xyXG4gICAgfSxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XHJcbiAgICAgIHZhciBqcUdyaWQgPSBudWxsO1xyXG4gICAgICB2YXIgaGVpZ2h0ID0gYXR0cmlidXRlcy5oZWlnaHQgfHwgJzEwMCUnO1xyXG5cclxuICAgICAgdmFyIGluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgZ3JpZE9iajtcclxuXHJcbiAgICAgICAgaWYgKHNjb3BlLmRhdGFzZXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHByb2Nlc3MgaWYgZGF0YXNldCBpcyBlbXB0eS5cclxuICAgICAgICAgIHJldHVybiBncmlkT2JqO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcclxuXHJcbiAgICAgICAgb3B0aW9ucy5kYXRhID0gc2NvcGUuZGF0YXNldDtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIG9wdGlvbnMsIHNjb3BlLm9wdGlvbnMpO1xyXG5cclxuICAgICAgICBvcHRpb25zLmhlaWdodCA9IGhlaWdodDtcclxuXHJcbiAgICAgICAgZ3JpZE9iaiA9ICQoZWxlbWVudC5jaGlsZHJlbigpWzBdKS5qcUdyaWQob3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGlmIChzY29wZS5jYWxsYmFjaykge1xyXG4gICAgICAgICAgc2NvcGUuY2FsbGJhY2soZ3JpZE9iaik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZ3JpZE9iajtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vXHJcbiAgICAgIC8vIEV2ZW50c1xyXG4gICAgICAvL1xyXG4gICAgICAvLyBXaW5kb3cgUmVzaXplXHJcbiAgICAgICQod2luZG93KS5vbigncmVzaXplJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHBhcmVudEVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudCkucGFyZW50KCk7XHJcbiAgICAgICAganFHcmlkLnNldEdyaWRXaWR0aChwYXJlbnRFbGVtZW50LndpZHRoKCkpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAqIFdhdGNoZXNcclxuICAgICAgKi9cclxuICAgICAgdmFyIG9uT3B0aW9uc0NoYW5nZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBqcUdyaWQgPSBpbml0KCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2YXIgdW53YXRjaE9wdGlvbnMgPSBzY29wZS4kd2F0Y2goJ29wdGlvbnMnLCBvbk9wdGlvbnNDaGFuZ2VkLCB0cnVlKTtcclxuXHJcbiAgICAgIHZhciBvbkRhdGFzZXRDaGFuZ2VkID0gZnVuY3Rpb24oZGF0YXNldCkge1xyXG4gICAgICAgIHZhciBzdGFydERhdGFDaGFuZ2VkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgaWYgKGpxR3JpZCkge1xyXG5cclxuICAgICAgICAgIGpxR3JpZC5qcUdyaWQoJ2NsZWFyR3JpZERhdGEnKTtcclxuICAgICAgICAgIC8vIC8vIEJ1Z2ZpeCA6IOqwseyLoCDtm4QgdW5kZWZpbmVkIO2WieydhCDsoJzqsbDtlZjquLAg7JyE7ZW0IGdyaWREYXRhIOq4uOydtOulvCDssrTtgawg7ZuEIOu5iOqwkiDtlaDri7lcclxuICAgICAgICAgIGlmKCBqcUdyaWQuZ2V0KDApLnAudHJlZUdyaWQpIHtcclxuICAgICAgICAgICAgdmFyIHBlcmZUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIGpxR3JpZC5nZXQoMCkuYWRkSlNPTkRhdGEoe1xyXG4gICAgICAgICAgICAgIHJvd3MgOiBkYXRhc2V0XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnYWRkSlNPTkRhdGEgOiAnLCBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHBlcmZUaW1lLCAnbXMnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBqcUdyaWQuanFHcmlkKCdzZXRHcmlkUGFyYW0nLCB7XHJcbiAgICAgICAgICAgICAgZGF0YXR5cGU6ICdsb2NhbCcsXHJcbiAgICAgICAgICAgICAgZGF0YTogZGF0YXNldCxcclxuICAgICAgICAgICAgICByb3dOdW06IGRhdGFzZXQubGVuZ3RoXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy9cclxuICAgICAgICAgIC8vIGpxR3JpZC50cmlnZ2VyKCdyZWxvYWRHcmlkJyk7XHJcblxyXG4gICAgICAgICAgY29uc29sZS5sb2coJ29uRGF0YXNldENoYW5nZWQgOiAnLCBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0RGF0YUNoYW5nZWQsICdtcycpO1xyXG5cclxuICAgICAgICAgIHJldHVybiBqcUdyaWQudHJpZ2dlcigncmVsb2FkJyk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAganFHcmlkID0gaW5pdCgpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2YXIgdW53YXRjaERhdGFzZXQgPSBzY29wZS4kd2F0Y2goJ2RhdGFzZXQnLCBvbkRhdGFzZXRDaGFuZ2VkLCBmYWxzZSk7XHJcblxyXG4gICAgICAvKipcclxuICAgICAgKiBUZWFyIERvd25cclxuICAgICAgKi9cclxuICAgICAgZWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbiBvbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdW53YXRjaERhdGFzZXQoKTtcclxuICAgICAgICB1bndhdGNoT3B0aW9ucygpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB9XHJcbiAgfTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ2FwcC5jb21tb24uY29uZmlnJywgW10pXG4gICAgLmNvbmZpZyhbJyR1cmxSb3V0ZXJQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlcicsXG4gICAgICAgIGZ1bmN0aW9uICgkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSB7XG4gICAgICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG5cbiAgICAgICAgICAgIC8vIFdpdGhvdXQgc2VydmVyIHNpZGUgc3VwcG9ydCBodG1sNSBtdXN0IGJlIGRpc2FibGVkLlxuICAgICAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIF0pXG4gICAgLmNvbmZpZyhbJyR0cmFuc2xhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkdHJhbnNsYXRlUHJvdmlkZXIpIHtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBhbmd1bGFyLXRyYW5zbGF0ZVxuICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlU3RhdGljRmlsZXNMb2FkZXIoe1xuICAgICAgICAgICAgcHJlZml4OiAnL2lhYWRtaW4vZnJvbnRlbmQvaTE4bi8nLFxuICAgICAgICAgICAgc3VmZml4OiAnLmpzb24nXG4gICAgICAgIH0pO1xuXG4gICAgICAgICR0cmFuc2xhdGVQcm92aWRlci5wcmVmZXJyZWRMYW5ndWFnZSgnZW4nKTtcbiAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLnVzZUxvY2FsU3RvcmFnZSgpO1xuICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlTWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlckxvZygpO1xuICAgIH1dKVxuICAgIC5jb25maWcoWydncm93bFByb3ZpZGVyJywgZnVuY3Rpb24gKGdyb3dsUHJvdmlkZXIpIHtcbiAgICAgICAgZ3Jvd2xQcm92aWRlci5nbG9iYWxUaW1lVG9MaXZlKDUwMDApO1xuICAgIH1dKTsiLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAuY29tbW9uLmRpcmVjdGl2ZXMnLCBbXSlcbiAgICAuZGlyZWN0aXZlKCdzdGF0aWNJbmNsdWRlJywgWyckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsICckY29tcGlsZScsIGZ1bmN0aW9uICgkaHR0cCwgJHRlbXBsYXRlQ2FjaGUsICRjb21waWxlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZVBhdGggPSBhdHRycy5zdGF0aWNJbmNsdWRlO1xuXG4gICAgICAgICAgICAkaHR0cC5nZXQodGVtcGxhdGVQYXRoLCB7Y2FjaGU6ICR0ZW1wbGF0ZUNhY2hlfSkuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudHMgPSAkKCc8ZGl2Lz4nKS5odG1sKHJlc3BvbnNlKS5jb250ZW50cygpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbChjb250ZW50cyk7XG4gICAgICAgICAgICAgICAgJGNvbXBpbGUoY29udGVudHMpKHNjb3BlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1dKTsiLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAuY29tbW9uLnNlcnZpY2VzJywgW10pXG4gICAgLnNlcnZpY2UoJ05vdGlmaWNhdGlvblNlcnZpY2UnLCBbJyRyb290U2NvcGUnLCAnZ3Jvd2wnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgZ3Jvd2wpIHtcbiAgICAgICAgdmFyIGZsYXNoTWVzc2FnZVF1ZXVlID0gW107XG5cbiAgICAgICAgZnVuY3Rpb24gZGlzcGxheU5vdGlmaWNhdGlvbihtZXNzYWdlLCB0eXBlKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICAgICAgZ3Jvd2wuYWRkU3VjY2Vzc01lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd3YXJuJykge1xuICAgICAgICAgICAgICAgIGdyb3dsLmFkZFdhcm5NZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnaW5mbycpIHtcbiAgICAgICAgICAgICAgICBncm93bC5hZGRJbmZvTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ3Jvd2wuYWRkRXJyb3JNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGlzcGxheSBhbGwgZmxhc2ggbm90aWZpY2F0aW9ucyBhZnRlciBzdGF0ZSBoYXMgY2hhbmdlZFxuICAgICAgICAkcm9vdFNjb3BlLiRvbihcIiRzdGF0ZUNoYW5nZVN1Y2Nlc3NcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2hpbGUgKGZsYXNoTWVzc2FnZVF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGZsYXNoTWVzc2FnZVF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5vdGlmaWNhdGlvbihpdGVtLm1lc3NhZ2UsIGl0ZW0udHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBQdWJsaWMgQVBJXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnZmxhc2hNZXNzYWdlJzogZnVuY3Rpb24gKG1lc3NhZ2UsIHR5cGUpIHtcbiAgICAgICAgICAgICAgICBmbGFzaE1lc3NhZ2VRdWV1ZS5wdXNoKHttZXNzYWdlOiBtZXNzYWdlLCB0eXBlOiB0eXBlIHx8ICdpbmZvJ30pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1dKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ2FwcC5jbWlzLnNlcnZpY2VzJywgWyduZ1Jlc291cmNlJ10pXG4gICAgLmZhY3RvcnkoJ0NNSVMnLCBbJyRyZXNvdXJjZScsICdOb3RpZmljYXRpb25TZXJ2aWNlJywgZnVuY3Rpb24oJHJlc291cmNlLCBOb3RpZmljYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHZhciBhcGkgPSAkcmVzb3VyY2UoJy9qb29xL2Jyb3dzZXIvdGVzdC9yb290P2NtaXNzZWxlY3Rvcj1jaGlsZHJlbiZvYmplY3RJZD06aWQnLCB7XCJpZFwiOiBcIkBpZFwifSwge1xuICAgICAgICAgICAgcXVlcnk6ICB7bWV0aG9kOiAnR0VUJywgcGFyYW1zOiB7fSwgaXNBcnJheTogZmFsc2V9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBxdWVyeTogZnVuY3Rpb24oZm9sZGVySWQsIHBhZ2VOdW1iZXIsIHBhZ2VTaXplKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwaS5xdWVyeSh7aWQ6IGZvbGRlcklkLCBwYWdlOiBwYWdlTnVtYmVyLCBzaXplOiBwYWdlU2l6ZSwgc29ydDogJ0lELERFU0MnfSkuJHByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfV0pOyIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ2FwcC5zeXN0ZW0uY29udHJvbGxlcnMnLCBbXSlcbiAgICAuY29uc3RhbnQoJ3BhZ2luYXRpb25Db25maWcnLCB7XG4gICAgICAgIHBhZ2VTaXplOiAyMDBcbiAgICB9KVxuICAgIFxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgICAgICAuc3RhdGUoJ3N5c3RlbScsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnLycsXG4gICAgICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzx1aS12aWV3Lz4nXG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgLnN0YXRlKCdzeXN0ZW0uaW5kZXgnLCB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogJycsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTeXN0ZW1MaXN0Q29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnZnJvbnRlbmQvcGFydGlhbHMvdG9kby90b2RvLWxpc3QuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgXHRzZWFyY2hSZXN1bHRzOiBbJ1N5c3RlbScsICdwYWdpbmF0aW9uQ29uZmlnJywgZnVuY3Rpb24oU3lzdGVtLCBwYWdpbmF0aW9uQ29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN5c3RlbS5xdWVyeSgwLCBwYWdpbmF0aW9uQ29uZmlnLnBhZ2VTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zdGF0ZSgnc3lzdGVtLmFkZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnc3lzdGVtL2FkZCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBZGRTeXN0ZW1Db250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdmcm9udGVuZC9wYXJ0aWFscy90b2RvL2FkZC10b2RvLmh0bWwnXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuc3RhdGUoJ3N5c3RlbS5lZGl0Jywge1xuICAgICAgICAgICAgICAgICAgICB1cmw6ICdzeXN0ZW0vOnN5c3RlbUlkL2VkaXQnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRWRpdFN5c3RlbUNvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2Zyb250ZW5kL3BhcnRpYWxzL3RvZG8vZWRpdC10b2RvLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkVG9kbzogWydTeXN0ZW0nLCAnJHN0YXRlUGFyYW1zJywgZnVuY3Rpb24oU3lzdGVtLCAkc3RhdGVQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLnN5c3RlbUlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTeXN0ZW0uZ2V0KCRzdGF0ZVBhcmFtcy5zeXN0ZW1JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN0YXRlKCdzeXN0ZW0uc2VhcmNoZm9ybScsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnc3lzdGVtL3NlYXJjaGZvcm0vOnN5c3RlbUlkJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1NlYXJjaEZvcm1Db250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdmcm9udGVuZC9wYXJ0aWFscy90b2RvL3NlYXJjaC1mb3JtLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkVG9kbzogWydTeXN0ZW0nLCAnJHN0YXRlUGFyYW1zJywgZnVuY3Rpb24oU3lzdGVtLCAkc3RhdGVQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLnN5c3RlbUlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTeXN0ZW0uZ2V0KCRzdGF0ZVBhcmFtcy5zeXN0ZW1JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN0YXRlKCdzeXN0ZW0uZWRpdGZvcm0nLCB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogJ3N5c3RlbS86c3lzdGVtSWQvZWRpdGZvcm0nLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRWRpdFN5c0Zvcm1Db250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdmcm9udGVuZC9wYXJ0aWFscy90b2RvL2VkaXQtZm9ybS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFRvZG86IFsnU3lzdGVtJywgJyRzdGF0ZVBhcmFtcycsIGZ1bmN0aW9uKFN5c3RlbSwgJHN0YXRlUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5zeXN0ZW1JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU3lzdGVtLmdldCgkc3RhdGVQYXJhbXMuc3lzdGVtSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zdGF0ZSgnc3lzdGVtLnZpZXcnLCB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogJ3N5c3RlbS86c3lzdGVtSWQnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnVmlld1N5c3RlbUNvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2Zyb250ZW5kL3BhcnRpYWxzL3RvZG8vdmlldy10b2RvLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3ZWRUb2RvOiBbJ1N5c3RlbScsICckc3RhdGVQYXJhbXMnLCBmdW5jdGlvbihTeXN0ZW0sICRzdGF0ZVBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGVQYXJhbXMuc3lzdGVtSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN5c3RlbS5nZXQoJHN0YXRlUGFyYW1zLnN5c3RlbUlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICBdKVxuICAgIC5jb250cm9sbGVyKCdTeXN0ZW1MaXN0Q29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRzdGF0ZScsICdzZWFyY2hSZXN1bHRzJywncGFnaW5hdGlvbkNvbmZpZycsXG4gICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlLCBzZWFyY2hSZXN1bHRzLCBwYWdpbmF0aW9uQ29uZmlnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdSZW5kZXJpbmcgZG9jdW1lbnRzLicpO1xuICAgICAgICAkc2NvcGUudG9kb3MgPSBzZWFyY2hSZXN1bHRzLmNvbnRlbnQ7XG4gICAgICAgIGNvbnNvbGUubG9nKHNlYXJjaFJlc3VsdHMpO1xuICAgICAgICBjb25zb2xlLmxvZyhzZWFyY2hSZXN1bHRzLnRvdGFsRWxlbWVudHMpO1xuICAgICAgICBjb25zb2xlLmxvZyhwYWdpbmF0aW9uQ29uZmlnLnBhZ2VTaXplKTtcbiAgICAgICAgJHNjb3BlLnBhZ2luYXRpb24gPSB7XG4gICAgICAgICAgICBjdXJyZW50UGFnZTogc2VhcmNoUmVzdWx0cy5udW1iZXIgKyAxLFxuICAgICAgICAgICAgaXRlbXNQZXJQYWdlOiBwYWdpbmF0aW9uQ29uZmlnLnBhZ2VTaXplLFxuICAgICAgICAgICAgdG90YWxJdGVtczogc2VhcmNoUmVzdWx0cy50b3RhbEVsZW1lbnRzXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAkc2NvcGUuYWRkVG9kbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCdzeXN0ZW0uYWRkJyk7XG4gICAgICAgIH07XG5cbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignQWRkU3lzdGVtQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRzdGF0ZScsICdTeXN0ZW0nLFxuICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgU3lzdGVtKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUmVuZGVyaW5nIGFkZCB0b2RvIGVudHJ5IHBhZ2UuJyk7XG4gICAgICAgICAgICAkc2NvcGUudG9kbyA9IHt9O1xuXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZVRvZG8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnRvZG9Gb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb25TdWNjZXNzID0gZnVuY3Rpb24oYWRkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnc3lzdGVtLnZpZXcnLCB7c3lzdGVtSWQ6IGFkZGVkLmlkfSwgeyByZWxvYWQ6IHRydWUsIGluaGVyaXQ6IHRydWUsIG5vdGlmeTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS50b2RvLmRhdGE9PVwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgXHQkc2NvcGUudG9kby5kYXRhPXt9O1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgXHQkc2NvcGUudG9kby5kYXRhPUpTT04ucGFyc2UoJHNjb3BlLnRvZG8uZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgU3lzdGVtLnNhdmUoJHNjb3BlLnRvZG8sIG9uU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ0RlbGV0ZVN5c3RlbUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckbW9kYWxJbnN0YW5jZScsICckc3RhdGUnLCAnU3lzdGVtJywgJ2RlbGV0ZWRUb2RvJyxcbiAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkbW9kYWxJbnN0YW5jZSwgJHN0YXRlLCBTeXN0ZW0sIGRlbGV0ZWRUb2RvKSB7XG4gICAgICAgICAgICAkc2NvcGUudG9kbyA9IGRlbGV0ZWRUb2RvO1xuXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkc2NvcGUuZGVsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9uU3VjY2VzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ3N5c3RlbS5pbmRleCcsIHt9LCB7IHJlbG9hZDogdHJ1ZSwgaW5oZXJpdDogdHJ1ZSwgbm90aWZ5OiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgU3lzdGVtLmRlbGV0ZSgkc2NvcGUudG9kbywgb25TdWNjZXNzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1dKSAgICAgICAgXG4gICAgLmNvbnRyb2xsZXIoJ0VkaXRTeXNGb3JtQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRzdGF0ZScsICd1cGRhdGVkVG9kbycsICdTeXN0ZW0nLFxuICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgdXBkYXRlZFRvZG8sIFN5c3RlbSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2codXBkYXRlZFRvZG8pO1xuICAgICAgICAgICAgJHNjb3BlLnRvZG8gPSB1cGRhdGVkVG9kbztcbiAgICAgICAgICAgIGlmICh1cGRhdGVkVG9kby50eXBlPT0ndHlwZScpe1xuICAgICAgICAgICBcdCRzY29wZS5zY2hlbWEgPSB7XG4gICAgICAgICAgIFx0XHQgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgICBcdFx0ICBcInRpdGxlXCI6IFwic2NoZW1hXCIsXG4gICAgIFx0XHQgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgIFx0XHQgICAgXHQgICBcInN5bWJvbGljTmFtZVwiLFxuICAgICBcdFx0ICAgIFx0ICAgXCJzdG9yYWdlX3BvbGljeVwiXG4gICAgIFx0XHQgICAgXHQgICBdLFxuICAgICAgICAgICBcdFx0ICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICBcdFx0XHRcInN5bWJvbGljTmFtZVwiOntcbiAgICAgICAgICAgXHRcdFx0XHRcInR5cGVcIjpcInN0cmluZ1wiLFxuICAgICAgICAgICBcdFx0XHRcdFwidGl0bGVcIjpcItCh0LjQvNCy0L7Qu9GM0L3Ri9C5INC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINGC0LjQv9CwXCJcbiAgICAgICAgICAgXHRcdFx0fSxcbiAgICAgICAgICAgXHRcdFx0XCJzdG9yYWdlX3BvbGljeVwiOntcbiAgICAgICAgICAgXHRcdFx0XHRcInRpdGxlXCI6XCLQn9C+0LvQuNGC0LjQutCwINGF0YDQsNC90LXQvdC40Y9cIixcbiAgICAgICAgICAgXHRcdFx0XHRcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICBcdFx0XHR9LFxuICAgICAgICAgICBcdFx0XHRcInBhcmVudFwiOntcbiAgICAgICAgICAgXHRcdFx0XHRcInR5cGVcIjpcInN0cmluZ1wiLFxuICAgICAgICAgICBcdFx0XHRcdFwidGl0bGVcIjpcItCg0L7QtNC40YLQtdC70YzRgdC60LjQuSDRgtC40L9cIlxuICAgICAgICAgICBcdFx0XHR9LFxuICAgICAgICAgICBcdFx0XHRcImFjY2Vzc1wiOntcbiAgICAgICAgICAgXHRcdFx0XHRcInR5cGVcIjpcImFycmF5XCIsXG4gICAgICAgICAgIFx0XHRcdFx0XCJpdGVtc1wiOntcbiAgICAgICAgICAgXHRcdFx0XHRcdFwidHlwZVwiOlwic3RyaW5nXCJcbiAgICAgICAgICAgXHRcdFx0XHR9LFxuICAgICAgICAgICBcdFx0XHRcdFwidGl0bGVcIjpcItCU0L7RgdGC0YPQvyDQv9C+LdGD0LzQvtC70YfQsNC90LjRjiDQtNC70Y8g0LTQvtC60YPQvNC10L3RgtCwXCJcbiAgICAgICAgICAgXHRcdFx0fSxcbiAgICAgICAgICAgXHRcdCAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICBcdFx0ICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICAgXHRcdCAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICBcdFx0ICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICAgXHRcdCAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgXHRcdCAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICBcdFx0ICAgICAgICAgICAgXCJ0aXRsZVwiOiBcItCY0LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINCw0YLRgNC40LHRg9GC0LBcIixcbiAgICAgICAgICAgXHRcdCAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgIFx0XHQgICAgICAgICAgfSxcbiAgICAgICAgICAgXHRcdCAgICAgICAgICBcInRpdGxlXCI6IHtcbiAgICAgICAgICAgXHRcdCAgICAgICAgICAgIFwidGl0bGVcIjogXCLQl9Cw0LPQvtC70L7QstC+0Log0LDRgtGA0LjQsdGD0YLQsFwiLFxuICAgICAgICAgICBcdFx0ICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgXHRcdCAgICAgICAgICB9LFxuICAgICAgICAgICBcdFx0ICAgICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgIFx0XHQgICAgICAgICAgICBcInRpdGxlXCI6IFwi0KLQuNC/INCw0YLRgNC40LHRg9GC0LBcIixcbiAgICAgICAgICAgXHRcdCAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICBcdFx0ICAgICAgICAgICAgXCJlbnVtXCI6IFtcInN0cmluZ1wiLFwibnVtYmVyXCJdXG4gICAgICAgICAgIFx0XHQgICAgICAgICAgfVxuICAgICAgICAgICBcdFx0ICAgICAgICB9LFxuICAgICAgICAgICBcdFx0ICAgICAgICBcInJlcXVpcmVkXCI6IFtcbiAgICAgICAgICAgXHRcdCAgICAgICAgICBcIm5hbWVcIixcbiAgICAgICAgICAgXHRcdCAgICAgICAgICBcInRpdGxlXCIsXG4gICAgICAgICAgIFx0XHQgICAgICAgICAgXCJ0eXBlXCIgICAgICAgICAgXHRcdCAgICAgICAgICBcbiAgICAgICAgICAgXHRcdCAgICAgICAgXVxuICAgICAgICAgICBcdFx0ICAgICAgfVxuICAgICAgICAgICBcdFx0ICAgIH1cbiAgICAgICAgICAgXHRcdCAgfVxuICAgICAgICAgICBcdFx0fTtcbiAgICAgICAgICAgXHR2YXIgZ3JvdXBzID0gW107XG4gICAgICAgICAgIFx0JC5hamF4XG4gICAgICAgICAgICAoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgdXJsOiBcIi9qb29xL2FwaS9zeXN0ZW0vZ3JvdXBzXCIsXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgICAgICBhc3luYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgICAgIFx0Zm9yKHZhciBiYiA9IDA7IGJiIDwgcmVzLmxlbmd0aDsgYmIrKyl7XG4gICAgICAgICAgICAgICAgXHRcdGNvbnNvbGUubG9nKHJlc1tiYl0pO1xuICAgICAgICAgICAgICAgIFx0XHR2YXIgZ3JvdXAgPSB7fTtcbiAgICAgICAgICAgICAgICBcdFx0Z3JvdXAudmFsdWU9cmVzW2JiXS5pZDtcbiAgICAgICAgICAgICAgICBcdFx0Z3JvdXAubmFtZT1yZXNbYmJdLnRpdGxlO1xuICAgICAgICAgICAgICAgIFx0XHRncm91cHMucHVzaChncm91cCk7XG4gICAgICAgICAgICAgICAgXHR9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGdyb3Vwcyk7XG4gICAgICAgICAgICAkc2NvcGUuZm9ybSA9IFtcbiAgICAgICAgICAgIFx0e1wia2V5XCI6XCJzeW1ib2xpY05hbWVcIn0sXG4gICAgICAgICAgICBcdHtcbiAgICAgICAgICAgIFx0XHRcImtleVwiOlwic3RvcmFnZV9wb2xpY3lcIixcbiAgICAgICAgICAgIFx0XHRcInR5cGVcIjogXCJzZWxlY3RcIixcbiAgIFx0XHQgICAgICAgICAgICBcInRpdGxlTWFwXCI6IFtcbiAgIFx0XHQgICAgICAgICAgICBcdHsgXCJ2YWx1ZVwiOiBcImZzX3BvbGljeVwiLCBcIm5hbWVcIjogXCLQpNCw0LnQu9C+0LLQsNGPINGB0LjRgdGC0LXQvNCwXCIgfSxcbiAgIFx0XHQgICAgICAgICAgICBcdHsgXCJ2YWx1ZVwiOiBcInMzX2xvY2FsX3BvbGljeVwiLCBcIm5hbWVcIjogXCJTY2FsaXR5XCIgfVxuICAgXHRcdCAgICAgICAgICAgIFx0XVxuICAgICAgICAgICAgXHR9LFxuICAgICAgICAgICAgXHR7XCJrZXlcIjpcInBhcmVudFwifSxcbiAgICAgICAgICAgIFx0e1widHlwZVwiOiBcInRhYnNcIixcbiAgICAgICAgIFx0XHQgICAgICAgIFwidGFic1wiOiBbXG4gICAgICAgICBcdFx0ICAgICAgICAgIHtcbiAgICAgICAgIFx0XHQgICAgICAgICAgICBcInRpdGxlXCI6IFwi0JDRgtGA0LjQsdGD0YLRi1wiLFxuICAgICAgICAgXHRcdCAgICAgICAgICAgIFwiaXRlbXNcIjogW1xuICAgICAgICAgXHRcdCAgICAgICAgICAgIFx0e1xuXHRcdCAgICAgICAgICAgIFx0XHQgICAgXCJrZXlcIjogXCJwcm9wZXJ0aWVzXCIsXG5cdFx0ICAgICAgICAgICAgXHRcdCAgICBcInR5cGVcIjogXCJ0YWJhcnJheVwiLFxuXHRcdCAgICAgICAgICAgIFx0XHQgICAgXCJhZGRcIjogXCLQlNC+0LHQsNCy0LjRgtGMXCIsXG5cdFx0ICAgICAgICAgICAgXHRcdCAgICBcInJlbW92ZVwiOiBcItCj0LTQsNC70LjRgtGMXCIsXG5cdFx0ICAgICAgICAgICAgXHRcdCAgICBcInN0eWxlXCI6IHtcblx0XHQgICAgICAgICAgICBcdFx0ICAgICAgXCJyZW1vdmVcIjogXCJidG4tZGFuZ2VyXCJcblx0XHQgICAgICAgICAgICBcdFx0ICAgIH0sXG5cdFx0ICAgICAgICAgICAgXHRcdCAgICBcInRpdGxlXCI6IFwie3sgdmFsdWUubmFtZSB8fCAnVGFiICcrJGluZGV4IH19XCIsXG5cdFx0ICAgICAgICAgICAgXHRcdCAgICBcIml0ZW1zXCI6IFtcblx0XHQgICAgICAgICAgICBcdFx0ICAgICAgXCJwcm9wZXJ0aWVzW10ubmFtZVwiLFxuXHRcdCAgICAgICAgICAgIFx0XHQgICAgICBcInByb3BlcnRpZXNbXS50aXRsZVwiLFxuXHRcdCAgICAgICAgICAgIFx0XHQgICAgICBcInByb3BlcnRpZXNbXS50eXBlXCJcblx0XHQgICAgICAgICAgICBcdFx0ICAgIF1cblx0XHQgICAgICAgICAgICBcdFx0ICB9XG4gICAgICAgICBcdFx0ICAgICAgICAgICAgXVxuICAgICAgICAgXHRcdCAgICAgICAgICB9LFxuICAgICAgICAgXHRcdCAgICAgICAgICB7XG4gICAgICAgICBcdFx0ICAgICAgICBcdFwidGl0bGVcIjogXCLQn9GA0LDQstCwINC00L7RgdGC0YPQv9CwXCIsXG4gICAgICAgICAgIFx0XHQgICAgICAgICAgICBcIml0ZW1zXCI6IFsgXG4gICAgICAgICAgIFx0XHQgICAgICAgICAgICBcdHtcbiAgICAgICAgICAgXHRcdCAgICAgICAgICAgIFx0ICAgIGtleTogXCJhY2Nlc3NcIixcbiAgICAgICAgICAgXHRcdCAgICAgICAgICAgIFx0ICAgIHR5cGU6IFwiY2hlY2tib3hlc1wiLFxuICAgICAgICAgICBcdFx0ICAgICAgICAgICAgXHQgICAgdGl0bGVNYXA6IGdyb3Vwc1xuICAgICAgICAgICBcdFx0ICAgICAgICAgICAgXHQgIH1cbiAgICAgICAgICAgXHRcdCAgICAgICAgICAgIF0gXG4gICAgICAgICBcdFx0ICAgICAgICAgIH1cbiAgICAgICAgIFx0XHQgICAgICAgIF1cbiAgICAgICAgICAgIFx0XHR9XG4gICAgICAgICAgICBcdFx0XTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHByb3BzID0gJHNjb3BlLnRvZG8uZGF0YS5zY2hlbWEucHJvcGVydGllcztcbiAgICAgICAgICAgIHZhciBtb2RlbCA9ICRzY29wZS50b2RvLmRhdGE7XG4gICAgICAgICAgICBtb2RlbC5zeW1ib2xpY05hbWU9JHNjb3BlLnRvZG8uc3ltYm9saWNOYW1lO1xuICAgICAgICAgICAgbW9kZWwucGFyZW50PSRzY29wZS50b2RvLnBhcmVudDtcbiAgICAgICAgICAgIG1vZGVsLnByb3BlcnRpZXM9W107XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHByb3BzKXtcbiAgICAgICAgICAgIFx0dmFyIG1wcm9wID0ge1wibmFtZVwiOnByb3AsXCJ0aXRsZVwiOnByb3BzW3Byb3BdLnRpdGxlLFwidHlwZVwiOnByb3BzW3Byb3BdLnR5cGV9XG4gICAgICAgICAgICBcdG1vZGVsLnByb3BlcnRpZXMucHVzaChtcHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtb2RlbCk7XG4gICAgICAgICAgICAkc2NvcGUubW9kZWwgPSBtb2RlbDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgfWVsc2V7IC8vTk9UIFRZUEVcbiAgICAgICAgICAgIFx0dmFyIHR5cGVVcmw9XCIvam9vcS9hcGkvc3lzdGVtL3MvXCIrJHNjb3BlLnRvZG8udHlwZTtcbiAgICAgICAgICAgIFx0JC5hamF4XG4gICAgICAgICAgICAgICAgKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB0eXBlVXJsLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICBhc3luYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgXHQkc2NvcGUuc2NoZW1hID0gcmVzLmRhdGEuc2NoZW1hO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybSA9IFtcbiAgICBcdCAgICBcdCAgICBcIipcIlxuICAgIFx0ICAgIFx0ICBdO1xuICAgICAgICAgICAgXHRjb25zb2xlLmxvZygnJHNjb3BlLnNjaGVtYSAtLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgICBcdGNvbnNvbGUubG9nKCRzY29wZS5zY2hlbWEpO1xuICAgICAgICAgICAgICAgICRzY29wZS5tb2RlbCA9ICRzY29wZS50b2RvLmRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkc2NvcGUuc2F2ZVRvZG8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnRvZG9Gb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb25TdWNjZXNzID0gZnVuY3Rpb24odXBkYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdzeXN0ZW0udmlldycsIHtzeXN0ZW1JZDogdXBkYXRlZC5pZH0sIHsgcmVsb2FkOiB0cnVlLCBpbmhlcml0OiB0cnVlLCBub3RpZnk6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVkVG9kby50eXBlPT0ndHlwZScpe1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciByZXNwcm9wcyA9ICRzY29wZS5tb2RlbC5wcm9wZXJ0aWVzO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciByZXNwcm9wID0ge31cblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3Byb3BzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgXHRyZXNwcm9wW3Jlc3Byb3BzW2ldLm5hbWVdPXt9O1xuXHQgICAgICAgICAgICAgICAgICAgIFx0cmVzcHJvcFtyZXNwcm9wc1tpXS5uYW1lXS50aXRsZT1yZXNwcm9wc1tpXS50aXRsZTtcblx0ICAgICAgICAgICAgICAgICAgICBcdHJlc3Byb3BbcmVzcHJvcHNbaV0ubmFtZV0udHlwZT1yZXNwcm9wc1tpXS50eXBlO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG9kby5kYXRhLnNjaGVtYS5wcm9wZXJ0aWVzPXJlc3Byb3A7XG5cdCAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvZG8uZGF0YS5zY2hlbWEudHlwZT1cIm9iamVjdFwiO1xuXHQgICAgICAgICAgICAgICAgICAgICRzY29wZS50b2RvLnN5bWJvbGljTmFtZT0kc2NvcGUubW9kZWwuc3ltYm9saWNOYW1lO1xuXHQgICAgICAgICAgICAgICAgICAgICRzY29wZS50b2RvLnBhcmVudD0kc2NvcGUubW9kZWwucGFyZW50O1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgXHQkc2NvcGUudG9kby5kYXRhPSRzY29wZS5tb2RlbDtcbiAgICAgICAgICAgICAgICAgICAgXHRpZigkc2NvcGUubW9kZWwuc3ltYm9saWNOYW1lKSAkc2NvcGUudG9kby5zeW1ib2xpY05hbWU9JHNjb3BlLm1vZGVsLnN5bWJvbGljTmFtZTtcblx0ICAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUubW9kZWwucGFyZW50KSAkc2NvcGUudG9kby5wYXJlbnQ9JHNjb3BlLm1vZGVsLnBhcmVudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUudG9kbyk7XG4gICAgICAgICAgICAgICAgICAgIFN5c3RlbS51cGRhdGUoJHNjb3BlLnRvZG8sIG9uU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfV0pXG4gICAgICAgIFxuICAgIC5jb250cm9sbGVyKCdTZWFyY2hGb3JtQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRzdGF0ZScsICd1cGRhdGVkVG9kbycsICdTeXN0ZW0nLFxuICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgdXBkYXRlZFRvZG8sIFN5c3RlbSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2codXBkYXRlZFRvZG8pO1xuICAgICAgICAgICAgJHNjb3BlLnRvZG8gPSB1cGRhdGVkVG9kbztcbiAgICAgICAgICAgXHQkc2NvcGUuc2NoZW1hID0gJHNjb3BlLnRvZG8uZGF0YS5zY2hlbWE7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICRzY29wZS5mb3JtID0gJHNjb3BlLnRvZG8uZGF0YS5mb3JtO1xuICAgICAgICAgICAgdmFyIG1vZGVsID0ge307XG5cbiAgICAgICAgICAgICRzY29wZS5tb2RlbCA9IG1vZGVsO1xuICAgICAgICAgICAgJHNjb3BlLnNhdmVUb2RvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS50b2RvRm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9uU3VjY2VzcyA9IGZ1bmN0aW9uKHVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnc3lzdGVtLnZpZXcnLCB7c3lzdGVtSWQ6IHVwZGF0ZWQuaWR9LCB7IHJlbG9hZDogdHJ1ZSwgaW5oZXJpdDogdHJ1ZSwgbm90aWZ5OiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUudG9kbyk7XG4gICAgICAgICAgICAgICAgICAgIC8vU3lzdGVtLnVwZGF0ZSgkc2NvcGUudG9kbywgb25TdWNjZXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XSlcbiAgICAuY29udHJvbGxlcignRWRpdFN5c3RlbUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckc3RhdGUnLCAndXBkYXRlZFRvZG8nLCAnU3lzdGVtJyxcbiAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGUsIHVwZGF0ZWRUb2RvLCBTeXN0ZW0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHVwZGF0ZWRUb2RvKTtcbiAgICAgICAgICAgICRzY29wZS50b2RvID0gdXBkYXRlZFRvZG87XG4gICAgICAgICAgICAkc2NvcGUudG9kby5kYXRhPUpTT04uc3RyaW5naWZ5KCRzY29wZS50b2RvLmRhdGEpO1xuICAgICAgICAgICAgJHNjb3BlLnNhdmVUb2RvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS50b2RvRm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9uU3VjY2VzcyA9IGZ1bmN0aW9uKHVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnc3lzdGVtLnZpZXcnLCB7c3lzdGVtSWQ6IHVwZGF0ZWQuaWR9LCB7IHJlbG9hZDogdHJ1ZSwgaW5oZXJpdDogdHJ1ZSwgbm90aWZ5OiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG9kby5kYXRhPUpTT04ucGFyc2UoJHNjb3BlLnRvZG8uZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIFN5c3RlbS51cGRhdGUoJHNjb3BlLnRvZG8sIG9uU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1ZpZXdTeXN0ZW1Db250cm9sbGVyJywgWyckc2NvcGUnLCAnJHN0YXRlJywgJ3ZpZXdlZFRvZG8nLFxuICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgdmlld2VkVG9kbykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlbmRlcmluZyB2aWV3IHRvZG8gZW50cnkgcGFnZS4nKTtcbiAgICAgICAgICAgICRzY29wZS50b2RvID0gdmlld2VkVG9kbztcblxuICAgICAgICAgICAgJHNjb3BlLnNob3dFZGl0UGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbyhcInN5c3RlbS5lZGl0XCIsIHtzeXN0ZW1JZDogJHNjb3BlLnRvZG8uaWR9LCB7IHJlbG9hZDogdHJ1ZSwgaW5oZXJpdDogdHJ1ZSwgbm90aWZ5OiB0cnVlIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgJHNjb3BlLnNob3dFZGl0Rm9ybVBhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oXCJzeXN0ZW0uZWRpdGZvcm1cIiwge3N5c3RlbUlkOiAkc2NvcGUudG9kby5pZH0sIHsgcmVsb2FkOiB0cnVlLCBpbmhlcml0OiB0cnVlLCBub3RpZnk6IHRydWUgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIH1dKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ2FwcC5zeXN0ZW0uc2VydmljZXMnLCBbJ25nUmVzb3VyY2UnXSlcbiAgICAuZmFjdG9yeSgnU3lzdGVtJywgWyckcmVzb3VyY2UnLCAnTm90aWZpY2F0aW9uU2VydmljZScsIGZ1bmN0aW9uKCRyZXNvdXJjZSwgTm90aWZpY2F0aW9uU2VydmljZSkge1xuICAgICAgICB2YXIgYXBpID0gJHJlc291cmNlKCcvam9vcS9hcGkvc3lzdGVtLzppZCcsIHtcImlkXCI6IFwiQGlkXCJ9LCB7XG4gICAgICAgICAgICBxdWVyeTogIHttZXRob2Q6ICdHRVQnLCBwYXJhbXM6IHt9LCBpc0FycmF5OiBmYWxzZX0sXG4gICAgICAgICAgICBnZXQ6ICAgIHttZXRob2Q6ICdHRVQnfSxcbiAgICAgICAgICAgIHNhdmU6IHttZXRob2Q6ICdQT1NUJ30sXG4gICAgICAgICAgICB1cGRhdGU6IHttZXRob2Q6ICdQVVQnfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVsZXRlOiBmdW5jdGlvbih0b2RvLCBzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBpLmRlbGV0ZSh0b2RvLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgTm90aWZpY2F0aW9uU2VydmljZS5mbGFzaE1lc3NhZ2UoJ3RvZG8ubm90aWZpY2F0aW9ucy5kZWxldGUuc3VjY2VzcycsICdzdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHF1ZXJ5OiBmdW5jdGlvbihwYWdlTnVtYmVyLCBwYWdlU2l6ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcGkucXVlcnkoe3BhZ2U6IHBhZ2VOdW1iZXIsIHNpemU6IHBhZ2VTaXplLCBzb3J0OiAnSUQsREVTQyd9KS4kcHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHRvZG9JZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcGkuZ2V0KHtpZDogdG9kb0lkfSkuJHByb21pc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2F2ZTogZnVuY3Rpb24odG9kbywgc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgYXBpLnNhdmUodG9kbywgZnVuY3Rpb24oYWRkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgTm90aWZpY2F0aW9uU2VydmljZS5mbGFzaE1lc3NhZ2UoJ3RvZG8ubm90aWZpY2F0aW9ucy5hZGQuc3VjY2VzcycsICdzdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhhZGRlZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbih0b2RvLCBzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBhcGkudXBkYXRlKHRvZG8sIGZ1bmN0aW9uKHVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgTm90aWZpY2F0aW9uU2VydmljZS5mbGFzaE1lc3NhZ2UoJ3RvZG8ubm90aWZpY2F0aW9ucy51cGRhdGUuc3VjY2VzcycsICdzdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayh1cGRhdGVkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwLnRvZG8uY29udHJvbGxlcnMnLCBbJ3VpLmJvb3RzdHJhcCddKVxuICAgIC5jb25zdGFudCgncGFnaW5hdGlvbkNvbmZpZycsIHtcbiAgICAgICAgcGFnZVNpemU6IDIwMFxuICAgIH0pXG4gICAgXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgICAgIC5zdGF0ZSgndG9kbycsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnLycsXG4gICAgICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzx1aS12aWV3Lz4nXG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgLnN0YXRlKCd0b2RvLmluZGV4Jywge1xuICAgICAgICAgICAgICAgICAgICB1cmw6ICcnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnVG9kb0xpc3RDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdmcm9udGVuZC9wYXJ0aWFscy90b2RvL3RvZG8tbGlzdC5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICBcdHNlYXJjaFJlc3VsdHM6IFsnVG9kb3MnLCAncGFnaW5hdGlvbkNvbmZpZycsIGZ1bmN0aW9uKFRvZG9zLCBwYWdpbmF0aW9uQ29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRvZG9zLnF1ZXJ5KDAsIHBhZ2luYXRpb25Db25maWcucGFnZVNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN0YXRlKCd0b2RvLnRyZWUnLCB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogJ3RvZG8vdHJlZScsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdUb2RvVHJlZUNvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2Zyb250ZW5kL3BhcnRpYWxzL3RvZG8vdG9kby10cmVlLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgIFx0c2VhcmNoUmVzdWx0czogWydDTUlTJywgJ3BhZ2luYXRpb25Db25maWcnLCAnJHN0YXRlUGFyYW1zJywgZnVuY3Rpb24oQ01JUywgcGFnaW5hdGlvbkNvbmZpZywkc3RhdGVQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ01JUy5xdWVyeSgnMCcsMCwgcGFnaW5hdGlvbkNvbmZpZy5wYWdlU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgLnN0YXRlKCd0b2RvLnBhZ2UnLCB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogJ3RvZG8vcGFnZS86cGFnZU51bWJlci9zaXplLzpwYWdlU2l6ZScsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdUb2RvTGlzdENvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2Zyb250ZW5kL3BhcnRpYWxzL3RvZG8vdG9kby1saXN0Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgIFx0c2VhcmNoUmVzdWx0czogWydUb2RvcycsICckc3RhdGVQYXJhbXMnLCBmdW5jdGlvbihUb2RvcywgJHN0YXRlUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRvZG9zLnF1ZXJ5KCRzdGF0ZVBhcmFtcy5wYWdlTnVtYmVyIC0gMSwgJHN0YXRlUGFyYW1zLnBhZ2VTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zdGF0ZSgndG9kby5hZGQnLCB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogJ3RvZG8vYWRkJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0FkZFRvZG9Db250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdmcm9udGVuZC9wYXJ0aWFscy90b2RvL2FkZC10b2RvLmh0bWwnXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuc3RhdGUoJ3RvZG8uZWRpdCcsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAndG9kby86dG9kb0lkL2VkaXQnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRWRpdFRvZG9Db250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdmcm9udGVuZC9wYXJ0aWFscy90b2RvL2VkaXQtdG9kby5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFRvZG86IFsnVG9kb3MnLCAnJHN0YXRlUGFyYW1zJywgZnVuY3Rpb24oVG9kb3MsICRzdGF0ZVBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGVQYXJhbXMudG9kb0lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBUb2Rvcy5nZXQoJHN0YXRlUGFyYW1zLnRvZG9JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN0YXRlKCd0b2RvLmVkaXRmb3JtJywge1xuICAgICAgICAgICAgICAgICAgICB1cmw6ICd0b2RvLzp0b2RvSWQvZWRpdGZvcm0nLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRWRpdERvY0Zvcm1Db250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdmcm9udGVuZC9wYXJ0aWFscy90b2RvL2VkaXQtZm9ybS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFRvZG86IFsnVG9kb3MnLCAnJHN0YXRlUGFyYW1zJywgZnVuY3Rpb24oVG9kb3MsICRzdGF0ZVBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGVQYXJhbXMudG9kb0lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBUb2Rvcy5nZXQoJHN0YXRlUGFyYW1zLnRvZG9JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN0YXRlKCd0b2RvLnNlYXJjaCcsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAndG9kby9zZWFyY2gvOnNlYXJjaFRlcm0vcGFnZS86cGFnZU51bWJlci9zaXplLzpwYWdlU2l6ZScsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTZWFyY2hSZXN1bHRDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdmcm9udGVuZC9wYXJ0aWFscy9zZWFyY2gvc2VhcmNoLXJlc3VsdHMuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFRlcm06IFsnJHN0YXRlUGFyYW1zJywgZnVuY3Rpb24oJHN0YXRlUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzdGF0ZVBhcmFtcy5zZWFyY2hUZXJtO1xuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hSZXN1bHRzOiBbJ1NlYXJjaCcsICckc3RhdGVQYXJhbXMnLCBmdW5jdGlvbihTZWFyY2gsICRzdGF0ZVBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGVQYXJhbXMuc2VhcmNoVGVybSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2VhcmNoLmZpbmRCeVNlYXJjaFRlcm0oJHN0YXRlUGFyYW1zLnNlYXJjaFRlcm0sICRzdGF0ZVBhcmFtcy5wYWdlTnVtYmVyIC0gMSwgJHN0YXRlUGFyYW1zLnBhZ2VTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zdGF0ZSgndG9kby52aWV3Jywge1xuICAgICAgICAgICAgICAgICAgICB1cmw6ICd0b2RvLzp0b2RvSWQnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnVmlld1RvZG9Db250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdmcm9udGVuZC9wYXJ0aWFscy90b2RvL3ZpZXctdG9kby5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlld2VkVG9kbzogWydUb2RvcycsICckc3RhdGVQYXJhbXMnLCBmdW5jdGlvbihUb2RvcywgJHN0YXRlUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy50b2RvSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRvZG9zLmdldCgkc3RhdGVQYXJhbXMudG9kb0lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICBdKVxuICAgIC5jb250cm9sbGVyKCdUb2RvTGlzdENvbnRyb2xsZXInLCBbJyRzY29wZScsICckc3RhdGUnLCAnc2VhcmNoUmVzdWx0cycsJ3BhZ2luYXRpb25Db25maWcnLFxuICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgc2VhcmNoUmVzdWx0cywgcGFnaW5hdGlvbkNvbmZpZykge1xuICAgICAgICBjb25zb2xlLmxvZygnUmVuZGVyaW5nIGRvY3VtZW50cy4nKTtcbiAgICAgICAgJHNjb3BlLnRvZG9zID0gc2VhcmNoUmVzdWx0cy5jb250ZW50O1xuICAgICAgICBjb25zb2xlLmxvZyhzZWFyY2hSZXN1bHRzKTtcbiAgICAgICAgY29uc29sZS5sb2coc2VhcmNoUmVzdWx0cy50b3RhbEVsZW1lbnRzKTtcbiAgICAgICAgY29uc29sZS5sb2cocGFnaW5hdGlvbkNvbmZpZy5wYWdlU2l6ZSk7XG4gICAgICAgICRzY29wZS5wYWdpbmF0aW9uID0ge1xuICAgICAgICAgICAgY3VycmVudFBhZ2U6IHNlYXJjaFJlc3VsdHMubnVtYmVyICsgMSxcbiAgICAgICAgICAgIGl0ZW1zUGVyUGFnZTogcGFnaW5hdGlvbkNvbmZpZy5wYWdlU2l6ZSxcbiAgICAgICAgICAgIHRvdGFsSXRlbXM6IHNlYXJjaFJlc3VsdHMudG90YWxFbGVtZW50c1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgJHNjb3BlLmFkZFRvZG8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzdGF0ZS5nbygndG9kby5hZGQnKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgICRzY29wZS5vcGVuVHJlZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCd0b2RvLnRyZWUnKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgICRzY29wZS5wYWdlQ2hhbmdlZCA9IGZ1bmN0aW9uKG5ld1BhZ2VOdW1iZXIpIHtcbiAgICAgICAgICAgICRzdGF0ZS5nbygndG9kby5wYWdlJyxcbiAgICAgICAgICAgICAgICB7cGFnZU51bWJlcjogbmV3UGFnZU51bWJlciwgcGFnZVNpemU6IHBhZ2luYXRpb25Db25maWcucGFnZVNpemV9LFxuICAgICAgICAgICAgICAgIHtyZWxvYWQ6IHRydWUsIGluaGVyaXQ6IHRydWUsIG5vdGlmeTogdHJ1ZX1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ0VkaXRUb2RvQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRzdGF0ZScsICd1cGRhdGVkVG9kbycsICdUb2RvcycsXG4gICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlLCB1cGRhdGVkVG9kbywgVG9kb3MpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHVwZGF0ZWRUb2RvKTtcbiAgICAgICAgICAgICRzY29wZS50b2RvID0gdXBkYXRlZFRvZG87XG4gICAgICAgICAgICAkc2NvcGUudG9kby5kYXRhPUpTT04uc3RyaW5naWZ5KCRzY29wZS50b2RvLmRhdGEpO1xuICAgICAgICAgICAgJHNjb3BlLnNhdmVUb2RvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS50b2RvRm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9uU3VjY2VzcyA9IGZ1bmN0aW9uKHVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygndG9kby52aWV3Jywge3RvZG9JZDogdXBkYXRlZC5pZH0sIHsgcmVsb2FkOiB0cnVlLCBpbmhlcml0OiB0cnVlLCBub3RpZnk6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50b2RvLmRhdGE9SlNPTi5wYXJzZSgkc2NvcGUudG9kby5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgVG9kb3MudXBkYXRlKCRzY29wZS50b2RvLCBvblN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdTZWFyY2hDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHN0YXRlJywgJ3BhZ2luYXRpb25Db25maWcnLFxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkc3RhdGUsIHBhZ2luYXRpb25Db25maWcpIHtcblxuICAgICAgICAgICAgdmFyIHVzZXJXcml0aW5nU2VhcmNoVGVybSA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIG1pbmltdW1TZWFyY2hUZXJtTGVuZ3RoID0gMztcblxuICAgICAgICAgICAgJHNjb3BlLm1pc3NpbmdDaGFycyA9IG1pbmltdW1TZWFyY2hUZXJtTGVuZ3RoO1xuICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFRlcm0gPSBcIlwiO1xuXG4gICAgICAgICAgICAkc2NvcGUuc2VhcmNoRmllbGRCbHVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdXNlcldyaXRpbmdTZWFyY2hUZXJtID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkc2NvcGUuc2VhcmNoRmllbGRGb2N1cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHVzZXJXcml0aW5nU2VhcmNoVGVybSA9IHRydWU7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkc2NvcGUuc2hvd01pc3NpbmdDaGFyYWN0ZXJUZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVzZXJXcml0aW5nU2VhcmNoVGVybSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNlYXJjaFRlcm0ubGVuZ3RoIDwgbWluaW11bVNlYXJjaFRlcm1MZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHNjb3BlLnNlYXJjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc2VhcmNoVGVybS5sZW5ndGggPCBtaW5pbXVtU2VhcmNoVGVybUxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWlzc2luZ0NoYXJzID0gbWluaW11bVNlYXJjaFRlcm1MZW5ndGggLSAkc2NvcGUuc2VhcmNoVGVybS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWlzc2luZ0NoYXJzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCd0b2RvLnNlYXJjaCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB7c2VhcmNoVGVybTogJHNjb3BlLnNlYXJjaFRlcm0sIHBhZ2VOdW1iZXI6IDEsIHBhZ2VTaXplOiBwYWdpbmF0aW9uQ29uZmlnLnBhZ2VTaXplfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtyZWxvYWQ6IHRydWUsIGluaGVyaXQ6IHRydWUsIG5vdGlmeTogdHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIH1dKVxuICAuY29udHJvbGxlcignU2VhcmNoUmVzdWx0Q29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRzdGF0ZScsICdwYWdpbmF0aW9uQ29uZmlnJywgJ3NlYXJjaFRlcm0nLCAnc2VhcmNoUmVzdWx0cycsXG4gICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlLCBwYWdpbmF0aW9uQ29uZmlnLCBzZWFyY2hUZXJtLCBzZWFyY2hSZXN1bHRzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUmVuZGVyaW5nIHNlYXJjaCByZXN1bHRzIHBhZ2UuJyk7XG4gICAgICAgICAgICAkc2NvcGUudG9kb3MgPSBzZWFyY2hSZXN1bHRzLmNvbnRlbnQ7XG5cbiAgICAgICAgICAgICRzY29wZS5wYWdpbmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiBzZWFyY2hSZXN1bHRzLm51bWJlciArIDEsXG4gICAgICAgICAgICAgICAgaXRlbXNQZXJQYWdlOiBwYWdpbmF0aW9uQ29uZmlnLnBhZ2VTaXplLFxuICAgICAgICAgICAgICAgIHRvdGFsSXRlbXM6IHNlYXJjaFJlc3VsdHMudG90YWxFbGVtZW50c1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHNjb3BlLnBhZ2VDaGFuZ2VkID0gZnVuY3Rpb24obmV3UGFnZU51bWJlcikge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygndG9kby5zZWFyY2gnLFxuICAgICAgICAgICAgICAgICAgICB7c2VhcmNoVGVybTogc2VhcmNoVGVybSwgcGFnZU51bWJlcjogbmV3UGFnZU51bWJlciwgcGFnZVNpemU6IHBhZ2luYXRpb25Db25maWcucGFnZVNpemV9LFxuICAgICAgICAgICAgICAgICAgICB7cmVsb2FkOiB0cnVlLCBpbmhlcml0OiB0cnVlLCBub3RpZnk6IHRydWV9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdDcmVhdGVEb2N1bWVudE1vZGFsQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRtb2RhbEluc3RhbmNlJywgJyRzdGF0ZScsICdUb2RvcycsICdjbWlzVXJsJywgJ2xvYWRHcmlkJywgJ2N1cnJlbnRGb2xkZXJJZCcsXG4gICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJG1vZGFsSW5zdGFuY2UsICRzdGF0ZSwgVG9kb3MsIGNtaXNVcmwsIGxvYWRHcmlkLCBjdXJyZW50Rm9sZGVySWQpIHtcbiAgICBcdFx0JHNjb3BlLnRvZG89e31cbiAgICAgICAgICAgICRzY29wZS5mb3JtID0ge307XG4gICAgXHRcdFxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHNjb3BlLnNhdmVEb2N1bWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgXHRcbiAgICAgICAgICAgIFx0aWYgKCRzY29wZS5mb3JtLmRvY3VtZW50LiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb25TdWNjZXNzID0gZnVuY3Rpb24oYWRkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgXHQkbW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICBcdHZhciByZXNKc29uID0ge307XG4gICAgICAgICAgICAgICAgICAgIFx0XG4gICAgICAgICAgICAgICAgICAgIFx0cmVzSnNvblsnY21pc2FjdGlvbiddPSAnbW92ZSc7XG4gICAgICAgICAgICAgICAgICAgIFx0cmVzSnNvblsndGFyZ2V0Rm9sZGVySWQnXT0gY3VycmVudEZvbGRlcklkO1xuICAgICAgICAgICAgICAgICAgICBcdHJlc0pzb25bJ3N1Y2NpbmN0J109ICd0cnVlJztcblx0ICAgICAgICAgICAgICAgICAgICAkLmFqYXhcblx0ICAgICAgICAgICAgICAgICAgICAgICAgKHtcblx0ICAgICAgICAgICAgICAgICAgICBcdFx0aGVhZGVyczogeyBcblx0ICAgICAgICAgICAgICAgICAgICBcdFx0XHQnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsXG5cdCAgICAgICAgICAgICAgICAgICAgXHRcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcgXG5cdCAgICAgICAgICAgICAgICAgICAgXHRcdH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogY21pc1VybCtcIj9vYmplY3RJZD1cIithZGRlZC5pZCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAndGV4dCcsXG5cdCAgICAgICAgICAgICAgICAgICAgXHRcdGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6ICQucGFyYW0ocmVzSnNvbiksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgXHRcdFx0Y29uc29sZS5sb2coXCJTYXZlZCEgLSBcIityZXMpOyBcblx0ICAgICAgICAgICAgICAgICAgICBcdFx0XHRsb2FkR3JpZChjdXJyZW50Rm9sZGVySWQpO1xuXHQgICAgICAgICAgICAgICAgICAgIFx0XHRcdHZhciB1cmwgPSAkc3RhdGUuaHJlZihcInRvZG8uZWRpdGZvcm1cIiwge3RvZG9JZDogYWRkZWQuaWR9KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0d2luZG93Lm9wZW4odXJsLCdfYmxhbmsnKTtcblx0ICAgICAgICAgICAgICAgICAgICBcdFx0fSxcblx0ICAgICAgICAgICAgICAgICAgICBcdFx0ZXJyb3I6IGZ1bmN0aW9uIChyZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBcdFx0XHRjb25zb2xlLmxvZyhcIkVSUk9SXCIpO1xuXHQgICAgICAgICAgICAgICAgICAgIFx0XHRcdGNvbnNvbGUubG9nKHJlcyk7XG5cdCAgICAgICAgICAgICAgICAgICAgXHRcdH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvZG8uZGF0YT17fTtcbiAgICAgICAgICAgICAgICAgICAgVG9kb3Muc2F2ZSgkc2NvcGUudG9kbywgb25TdWNjZXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XSkgICAgICAgICAgIFxuICAgIC5jb250cm9sbGVyKCdDcmVhdGVGb2xkZXJNb2RhbENvbnRyb2xsZXInLCBbJyRzY29wZScsICckbW9kYWxJbnN0YW5jZScsICckc3RhdGUnLCAnVG9kb3MnLCAnY21pc1VybCcsICdsb2FkR3JpZCcsICdjdXJyZW50Rm9sZGVySWQnLFxuICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRtb2RhbEluc3RhbmNlLCAkc3RhdGUsIFRvZG9zLCBjbWlzVXJsLCBsb2FkR3JpZCwgY3VycmVudEZvbGRlcklkKSB7XG4gICAgXHRcdCRzY29wZS50b2RvPXt9XG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZUZvbGRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgXHRjb25zb2xlLmxvZyhcIiRzY29wZS50b2RvRm9ybSAtIFwiKyRzY29wZS50b2RvLnRpdGxlKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcdHZhciByZXNKc29uID0ge307XG4gICAgICAgICAgICAgICAgXHRcbiAgICAgICAgICAgICAgICBcdHJlc0pzb25bJ2NtaXNhY3Rpb24nXT0gJ2NyZWF0ZUZvbGRlcic7XG4gICAgICAgICAgICAgICAgXHRyZXNKc29uWydwcm9wZXJ0eUlkWzBdJ109ICdjbWlzOm5hbWUnO1xuICAgICAgICAgICAgICAgIFx0cmVzSnNvblsncHJvcGVydHlWYWx1ZVswXSddPSAkc2NvcGUudG9kby50aXRsZTtcbiAgICAgICAgICAgICAgICBcdHJlc0pzb25bJ3Byb3BlcnR5SWRbMV0nXT0gJ2NtaXM6b2JqZWN0VHlwZUlkJztcbiAgICAgICAgICAgICAgICBcdHJlc0pzb25bJ3Byb3BlcnR5VmFsdWVbMV0nXT0gJ2ZvbGRlcic7XG4gICAgICAgICAgICAgICAgXHRyZXNKc29uWydzdWNjaW5jdCddPSAndHJ1ZSc7XG4gICAgICAgICAgICAgICAgJC5hamF4XG4gICAgICAgICAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgICAgXHRcdGhlYWRlcnM6IHsgXG4gICAgICAgICAgICAgICAgXHRcdFx0J0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgICAgICAgICAgIFx0XHRcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnIFxuICAgICAgICAgICAgICAgIFx0XHR9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGNtaXNVcmwrXCI/b2JqZWN0SWQ9XCIrY3VycmVudEZvbGRlcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICBcdFx0Y29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogJC5wYXJhbShyZXNKc29uKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICBcdFx0XHRjb25zb2xlLmxvZyhcIlNhdmVkISAtIFwiK3Jlcyk7IFxuICAgICAgICAgICAgICAgIFx0XHRcdGxvYWRHcmlkKGN1cnJlbnRGb2xkZXJJZCk7XG4gICAgICAgICAgICAgICAgXHRcdFx0JG1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBcdFx0XHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXHRcdGVycm9yOiBmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICAgICAgXHRcdFx0Y29uc29sZS5sb2coXCJFUlJPUlwiKTtcbiAgICAgICAgICAgICAgICBcdFx0XHRjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgICAgICAgICAgIFx0XHR9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XSkgICAgICAgICAgIFxuICAuY29udHJvbGxlcignRG9jdW1lbnRNb2RhbENvbnRyb2xsZXInLCBbJyRzY29wZScsICckbW9kYWxJbnN0YW5jZScsICckc3RhdGUnLCAnVG9kb3MnLCAndmlld2VkRG9jJyxcbiAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkbW9kYWxJbnN0YW5jZSwgJHN0YXRlLCBUb2Rvcywgdmlld2VkRG9jKSB7XG4gICAgICAgICAgICAkc2NvcGUudG9kbyA9IHZpZXdlZERvYztcblxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHNjb3BlLmVkaXREb2N1bWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgXHR2YXIgdXJsID0gJHN0YXRlLmhyZWYoXCJ0b2RvLmVkaXRcIiwge3RvZG9JZDogJHNjb3BlLnRvZG8uaWR9KTtcbiAgICAgICAgICAgIFx0d2luZG93Lm9wZW4odXJsLCdfYmxhbmsnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICRzY29wZS5lZGl0RG9jdW1lbnRQcm9wcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgXHR2YXIgdXJsID0gJHN0YXRlLmhyZWYoXCJ0b2RvLmVkaXRmb3JtXCIsIHt0b2RvSWQ6ICRzY29wZS50b2RvLmlkfSk7XG4gICAgICAgICAgICBcdHdpbmRvdy5vcGVuKHVybCwnX2JsYW5rJyk7XG4gICAgICAgICAgICBcdFxuICAgICAgICAgICAgfTtcblxuICAgICAgICB9XSkgICAgICBcbiAgLmNvbnRyb2xsZXIoJ1RvZG9UcmVlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRzdGF0ZScsICckbW9kYWwnLCAnVG9kb3MnLCAnc2VhcmNoUmVzdWx0cycsJ3BhZ2luYXRpb25Db25maWcnLFxuICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgJG1vZGFsLCBUb2Rvcywgc2VhcmNoUmVzdWx0cywgcGFnaW5hdGlvbkNvbmZpZykge1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCdSZW5kZXJpbmcgZG9jdW1lbnRzIHRyZWUuJyk7XG4gICAgICAgIHZhciBjdXJyZW50RGVmRm9ybUlkPScnO1xuICAgICAgICAkc2NvcGUuY21pc19yb290PSBcIi9qb29xL2Jyb3dzZXIvdGVzdC9yb290XCI7XG5cdFx0ICAgICQoJyN0cmVlY29udGFpbmVyJykuanN0cmVlKHtcblx0XHQgICAgJ2NvcmUnIDoge1xuXHRcdCAgICAgICdkYXRhJyA6IHtcblx0XHQgICAgICAgIFwidXJsXCIgOiBmdW5jdGlvbiAobm9kZSkge1xuXHRcdFx0XHRcdCAgcmV0dXJuIG5vZGUuaWQgPT09ICcjJyA/XG5cdFx0XHRcdFx0XHQkc2NvcGUuY21pc19yb290K1wiP29iamVjdElkPTAmY21pc3NlbGVjdG9yPWNoaWxkcmVuXCIgOlxuXHRcdFx0XHRcdFx0JHNjb3BlLmNtaXNfcm9vdCtcIj9vYmplY3RJZD1cIitub2RlLmlkK1wiJmNtaXNzZWxlY3Rvcj1jaGlsZHJlblwiO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGF0YUZpbHRlclwiIDogZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdFx0XHR2YXIgbm9kZXMgPSBbXTtcblx0XHRcdFx0XHQkLmVhY2goSlNPTi5wYXJzZShkYXRhKS5vYmplY3RzLCBmdW5jdGlvbihpLGl0ZW0pe1xuXHRcdFx0XHRcdFx0dmFyIG5vZGUgPSB7fTtcblx0XHRcdFx0XHRcdG5vZGUuaWQ9IGl0ZW0ub2JqZWN0LnByb3BlcnRpZXNbXCJjbWlzOm9iamVjdElkXCJdLnZhbHVlO1xuXHRcdFx0XHRcdFx0bm9kZS5kYXRhID0ge1widHlwZVwiOiBpdGVtLm9iamVjdC5wcm9wZXJ0aWVzW1wiY21pczpvYmplY3RUeXBlSWRcIl0udmFsdWUsIFwiYmFzZVR5cGVcIjogaXRlbS5vYmplY3QucHJvcGVydGllc1tcImNtaXM6YmFzZVR5cGVJZFwiXS52YWx1ZX07XG5cdFx0XHRcdFx0XHRub2RlLnRleHQ9aXRlbS5vYmplY3QucHJvcGVydGllc1tcImNtaXM6bmFtZVwiXS52YWx1ZTtcblx0XHRcdFx0XHRcdGlmIChpdGVtLm9iamVjdC5wcm9wZXJ0aWVzW1wiY21pczpiYXNlVHlwZUlkXCJdLnZhbHVlPT1cImNtaXM6Zm9sZGVyXCIpe25vZGUuY2hpbGRyZW49dHJ1ZX1cblx0XHRcdFx0XHRcdG5vZGVzLnB1c2gobm9kZSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdCAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5vZGVzKTtcblx0XHRcdFx0ICAgfSxcblx0XHQgICAgICAgIFwiZGF0YVwiIDogZnVuY3Rpb24gKG5vZGUpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhub2RlICk7XG5cdFx0ICAgICAgICAgIHJldHVybiB7IFwiaWRcIiA6IG5vZGUuaWQsIFwidGV4dFwiOiBcIjFcIiB9O1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgfSk7XG5cdFx0ICAvLyQoXCIjdHJlZWNvbnRhaW5lclwiKS5qc3RyZWUoJ2NyZWF0ZV9ub2RlJywgJyMnLCB7J2lkJyA6ICcwJywgJ3RleHQnIDogJ1Jvb3QgZm9sZGVyJ30sICdsYXN0Jyk7XG5cdFx0ICAkKCcjdHJlZWNvbnRhaW5lcicpLm9uKFwic2VsZWN0X25vZGUuanN0cmVlXCIsIGZ1bmN0aW9uIChlLCBkYXRhKSB7XG5cdFx0XHQgIGNvbnNvbGUubG9nKFwibm9kZV9pZDogXCIrIGRhdGEubm9kZS50eXBlICsgXCIgLSBcIiArIGRhdGEubm9kZS5pZCk7IFxuXHRcdFx0ICBpZiAoZGF0YS5ub2RlLmRhdGEuYmFzZVR5cGU9PVwiY21pczpmb2xkZXJcIil7XG5cdFx0XHRcdCRzY29wZS5sb2FkR3JpZChkYXRhLm5vZGUuaWQpO1xuXHRcdFx0ICB9ZWxzZXtcblx0XHRcdFx0dmFyIGRvY2lkID0gcGFyc2VJbnQoZGF0YS5ub2RlLmlkKTtcblx0XHRcdFx0Ly8kc3RhdGUuZ28oJ3RvZG8udmlldycsIHt0b2RvSWQ6IGRvY2lkfSwgeyByZWxvYWQ6IHRydWUsIGluaGVyaXQ6IHRydWUsIG5vdGlmeTogdHJ1ZSB9KTtcblx0XHRcdFx0JHNjb3BlLm9wZW5Eb2N1bWVudChUb2RvcywgZG9jaWQpO1xuXHRcdFx0ICB9XG5cdFx0XHQgIFxuXHRcdFx0fSk7XG5cdFx0ICBcblx0XHQgICRzY29wZS5jcmVhdGVEb2N1bWVudCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29uc29sZS5sb2coJHNjb3BlLmN1cnJlbnRGb2xkZXJJZClcblx0XHRcdCRtb2RhbC5vcGVuKHtcblx0ICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdmcm9udGVuZC9wYXJ0aWFscy90b2RvL2NyZWF0ZS1kb2MtbW9kYWwuaHRtbCcsXG5cdCAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDcmVhdGVEb2N1bWVudE1vZGFsQ29udHJvbGxlcicsXG5cdCAgICAgICAgICAgIHJlc29sdmU6IHtcblx0ICAgICAgICAgICAgICAgIGNtaXNVcmw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmNtaXNfcm9vdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxvYWRHcmlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5sb2FkR3JpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGb2xkZXJJZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuY3VycmVudEZvbGRlcklkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIFxuXHRcdFx0fSk7IFxuICAgICAgICAgIH07XG4gICAgICAgICAgXG5cdFx0ICAkc2NvcGUuY3JlYXRlRm9sZGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHQgIGNvbnNvbGUubG9nKCRzY29wZS5jdXJyZW50Rm9sZGVySWQpXG5cdFx0XHQgICRtb2RhbC5vcGVuKHtcblx0XHQgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2Zyb250ZW5kL3BhcnRpYWxzL3RvZG8vY3JlYXRlLWZvbGRlci1tb2RhbC5odG1sJyxcblx0XHQgICAgICAgICAgICBjb250cm9sbGVyOiAnQ3JlYXRlRm9sZGVyTW9kYWxDb250cm9sbGVyJyxcblx0XHQgICAgICAgICAgICByZXNvbHZlOiB7XG5cdFx0ICAgICAgICAgICAgICAgIGNtaXNVcmw6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuY21pc19yb290O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgICAgICAgIGxvYWRHcmlkOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmxvYWRHcmlkO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGb2xkZXJJZDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5jdXJyZW50Rm9sZGVySWQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgXG5cdFx0XHRcdH0pOyBcblx0ICAgICAgfTtcblx0ICAgICAgXG5cdCAgICAgICRzY29wZS5jcmVhdGVUeXBlID0gZnVuY3Rpb24oKSB7XG5cdCAgICBcdCAgdmFyIHBvc3RKc29uID0ge307XG5cdCAgICBcdCAgcG9zdEpzb24udGl0bGUgPSBcItCd0L7QstGL0Lkg0YLQuNC/XCI7XG5cdCAgICBcdCAgcG9zdEpzb24udHlwZSA9IFwidHlwZVwiO1xuXHQgICAgXHQgIHBvc3RKc29uLnBhcmVudCA9IFwiMFwiO1xuXHQgICAgXHQgIHBvc3RKc29uLmRhdGEgPSB7XCJzdG9yYWdlX3BvbGljeVwiOlwiZnNfcG9saWN5XCIsXCJhY2Nlc3NcIjpbXCJhZG1pbnNcIl0sXCJzY2hlbWFcIjp7XCJ0eXBlXCI6XCJvYmplY3RcIixcInByb3BlcnRpZXNcIjp7XCJBdHQxXCI6e1widHlwZVwiOlwic3RyaW5nXCIsXCJ0aXRsZVwiOlwi0JDRgtGA0LjQsdGD0YIgMVwifX19fTtcblx0ICAgIFx0ICAkLmFqYXhcbiAgICAgICAgICAgICAgKHtcdGhlYWRlcnM6IHsgXG5cdFx0XHRcdFx0J0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuXHRcdFx0XHRcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04JyBcblx0XHRcdFx0fSxcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgICAgdXJsOiAnL2pvb3EvYXBpL3N5c3RlbScsXG4gICAgICAgICAgICAgICAgICBkYXRhdHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgICBhc3luYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShwb3N0SnNvbiksXG4gICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgXHRcdFx0Y29uc29sZS5sb2coXCJTYXZlZCEgLSBcIityZXMpO1xuICAgICAgICAgIFx0XHRcdHZhciB1cmwgPSAkc3RhdGUuaHJlZihcInN5c3RlbS5lZGl0Zm9ybVwiLCB7c3lzdGVtSWQ6IHJlcy5pZH0pO1xuICAgICAgICAgICAgICAgICAgXHR3aW5kb3cub3Blbih1cmwsJ19ibGFuaycpO1xuICAgICAgICAgIFx0XHR9LFxuICAgICAgICAgIFx0XHRlcnJvcjogZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgIFx0XHRcdGNvbnNvbGUubG9nKFwiRVJST1JcIik7XG4gICAgICAgICAgXHRcdFx0Y29uc29sZS5sb2cocmVzKTtcbiAgICAgICAgICBcdFx0fVxuICAgICAgICAgICAgICB9KVxuXHQgICAgICB9O1xuICAgICAgICAgIFxuXHQkc2NvcGUub3BlbkRvY3VtZW50ID0gZnVuY3Rpb24oVG9kb3MsIGRvY2lkKXtcblx0XHR2YXIgdmlld3NVcmwgPSAnL2pvb3EvYXBpL2RvY3MvJytkb2NpZDtcblx0XHQkLmdldEpTT04odmlld3NVcmwsIGZ1bmN0aW9uKHZpZXdkYXRhKSB7XG5cdCAgICAgICAgaWYgKHZpZXdkYXRhLnR5cGU9PSd2aWV3Jyl7XG5cdFx0XHRcdCRzY29wZS5sb2FkR3JpZCgnMCcsdmlld2RhdGEpO1xuXHQgICAgICAgIH1lbHNle1xuXHQgICAgICAgIFx0JHNjb3BlLnRvZG8gPSAgdmlld2RhdGE7XG5cdFx0XHRcdCRtb2RhbC5vcGVuKHtcblx0XHQgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2Zyb250ZW5kL3BhcnRpYWxzL3RvZG8vZG9jdW1lbnQtdmlldy1tb2RhbC5odG1sJyxcblx0XHQgICAgICAgICAgICBjb250cm9sbGVyOiAnRG9jdW1lbnRNb2RhbENvbnRyb2xsZXInLFxuXHRcdCAgICAgICAgICAgIHJlc29sdmU6IHtcblx0XHQgICAgICAgICAgICAgICAgdmlld2VkRG9jOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnRvZG87XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICB9XG5cdFx0XHRcdH0pOyBcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0fVxuXHQkc2NvcGUubG9hZEdyaWQgPSBmdW5jdGlvbihmb2xkZXJJZCx2aWV3ZGF0YSkge1xuICAgICAgICBjb25zb2xlLmxvZygnUmVuZGVyaW5nIGRvY3VtZW50cyBncmlkLicpO1xuICAgICAgICAkc2NvcGUuY3VycmVudEZvbGRlcklkPWZvbGRlcklkO1xuICAgICAgICBcbiAgICBcdCQoXCIjanFHcmlkXCIpLmpxR3JpZCgnR3JpZFVubG9hZCcpO1xuICAgIFx0dmFyIGRhdGVPcHRpb25zPSB7XG4gICAgXHRcdFx0Ly8gZGF0YUluaXQgaXMgdGhlIGNsaWVudC1zaWRlIGV2ZW50IHRoYXQgZmlyZXMgdXBvbiBpbml0aWFsaXppbmcgdGhlIHRvb2xiYXIgc2VhcmNoIGZpZWxkIGZvciBhIGNvbHVtblxuICAgIFx0XHRcdC8vIHVzZSBpdCB0byBwbGFjZSBhIHRoaXJkIHBhcnR5IGNvbnRyb2wgdG8gY3VzdG9taXplIHRoZSB0b29sYmFyXG4gICAgXHRcdFx0ZGF0YUluaXQ6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgXHRcdFx0XHQkKGVsZW1lbnQpLmRhdGVwaWNrZXIoe1xuICAgIFx0XHRcdFx0XHRpZDogJ29yZGVyRGF0ZV9kYXRlUGlja2VyJyxcbiAgICBcdFx0XHRcdFx0ZGF0ZUZvcm1hdDogJ3l5LW1tLWRkJyxcbiAgICBcdFx0XHRcdFx0Ly9taW5EYXRlOiBuZXcgRGF0ZSgyMDEwLCAwLCAxKSxcbiAgICBcdFx0XHRcdFx0bWF4RGF0ZTogbmV3IERhdGUoMjAyMCwgMCwgMSksXG4gICAgXHRcdFx0XHRcdHNob3dPbjogJ2ZvY3VzJ1xuICAgIFx0XHRcdFx0fSk7XG4gICAgXHRcdFx0fSxcbiAgICBcdFx0XHQvLyBzaG93IHNlYXJjaCBvcHRpb25zXG4gICAgXHRcdFx0c29wdDogW1wiZ3RcIixcImx0XCIsXCJlcVwiXSAvLyBndCA9IGdyZWF0ZXIgLCBsdCA9IGxlc3MgLCBlcSA9IGVxdWFsIHRvXHRcdFx0XHRcdFx0XHRcbiAgICBcdFx0fTtcbiAgICBcdHZhciBlZGl0U2V0dGluZ3MgPSB7XG4gICAgXHRcdFx0cmVjcmVhdGVGb3JtOnRydWUsXG4gICAgXHRcdFx0anFNb2RhbDpmYWxzZSxcbiAgICBcdFx0XHRyZWxvYWRBZnRlclN1Ym1pdDpmYWxzZSxcbiAgICBcdFx0XHRjbG9zZU9uRXNjYXBlOnRydWUsXG4gICAgXHRcdFx0c2F2ZWtleTogW3RydWUsMTNdLFxuICAgIFx0XHRcdGNsb3NlQWZ0ZXJFZGl0OnRydWUsXG4gICAgXHRcdFx0YWZ0ZXJTaG93Rm9ybTpmdW5jdGlvbigpe1xuICAgIFx0XHRcdFx0JChcIiNsdWlfXCIrZ3JpZFswXS5pZCkuaGlkZSgpO1xuICAgIFx0XHRcdH1cbiAgICBcdFx0fTtcbiAgICBcdHZhciBhZGRTZXR0aW5ncyA9IHtcbiAgICBcdFx0XHRyZWNyZWF0ZUZvcm06dHJ1ZSxcbiAgICBcdFx0XHRqcU1vZGFsOmZhbHNlLFxuICAgIFx0XHRcdHJlbG9hZEFmdGVyU3VibWl0OmZhbHNlLFxuICAgIFx0XHRcdHNhdmVrZXk6IFt0cnVlLDEzXSxcbiAgICBcdFx0XHRjbG9zZU9uRXNjYXBlOnRydWUsXG4gICAgXHRcdFx0Y2xvc2VBZnRlckFkZDp0cnVlLFxuICAgIFx0XHRcdGFmdGVyU2hvd0Zvcm06ZnVuY3Rpb24oKXtcbiAgICBcdFx0XHRcdCQoXCIjbHVpX1wiK2dyaWRbMF0uaWQpLmhpZGUoKTtcbiAgICBcdFx0XHR9XG4gICAgXHRcdH07XG4gICAgXHR2YXIgZGVsU2V0dGluZ3MgPSB7XG4gICAgXHRcdFx0cHJvY2Vzc2luZzp0cnVlXG4gICAgXHRcdH07XG4gICAgXHRcdFxuICAgIFx0dmFyIGlkPWZvbGRlcklkO1xuICAgIFx0XG4gICAgXHR2YXIgdmlld0VudHJpZXNVcmwgPSAkc2NvcGUuY21pc19yb290Kyc/b2JqZWN0SWQ9JytpZCsnJmNtaXNzZWxlY3Rvcj1jaGlsZHJlbic7XG4gICAgXHR2YXIgc3lzX2ZpZWxkcz1bJ2lkJywgJ3R5cGUnLCAndGl0bGUnLCAnZGVzY3JpcHRpb24nLCAnbW9kaWZpZXInLCAnbW9kaWZpY2F0aW9uVGltZScsJ2F1dGhvcicsJ2NyZWF0aW9uVGltZScsJ3BhcmVudCcsJ3N5bWJvbGljTmFtZSddO1xuICAgIFx0dmFyIGZpZWxkcz1bJ2lkJywgJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ21vZGlmaWVyJywgJ21vZGlmaWNhdGlvblRpbWUnXTtcbiAgICBcdHZhciByb3dTaXplPXBhZ2luYXRpb25Db25maWcucGFnZVNpemU7XG4gICAgXHR2YXIgY29sdW1ucyA9W1xuICAgIFx0XHRcdHsgbmFtZTogJ2lkJywga2V5OiB0cnVlLCB3aWR0aDogNzUsIGpzb25tYXA6ICdvYmplY3QucHJvcGVydGllcy5jbWlzOm9iamVjdElkLnZhbHVlJ30sXG4gICAgXHRcdFx0eyBuYW1lOiAndHlwZScsIGxhYmVsIDogXCLQotC40L9cIix3aWR0aDogMTAwLCBqc29ubWFwOiAnb2JqZWN0LnByb3BlcnRpZXMuY21pczpvYmplY3RUeXBlSWQudmFsdWUnIH0sXG4gICAgXHRcdFx0eyBuYW1lOiAnYmFzZVR5cGUnLCBsYWJlbCA6IFwi0KLQuNC/XCIsd2lkdGg6IDEwMCwganNvbm1hcDogJ29iamVjdC5wcm9wZXJ0aWVzLmNtaXM6YmFzZVR5cGVJZC52YWx1ZScgfSxcbiAgICBcdFx0XHR7IG5hbWU6ICd0aXRsZScsIGxhYmVsIDogXCLQl9Cw0LPQvtC70L7QstC+0LpcIix3aWR0aDogMTUwLCBqc29ubWFwOiAnb2JqZWN0LnByb3BlcnRpZXMuY21pczpuYW1lLnZhbHVlJyB9LFxuICAgIFx0XHRcdHsgbmFtZTogJ2Rlc2NyaXB0aW9uJywgbGFiZWwgOiBcItCe0L/QuNGB0LDQvdC40LVcIiwgd2lkdGg6IDE1MCwganNvbm1hcDogJ29iamVjdC5wcm9wZXJ0aWVzLmNtaXM6ZGVzY3JpcHRpb24udmFsdWUnIH0sXG4gICAgXHRcdFx0eyBuYW1lOiAnYXV0aG9yJywgbGFiZWwgOiBcItCh0L7Qt9C00LDQu1wiLCB3aWR0aDogMTUwLCBqc29ubWFwOiAnb2JqZWN0LnByb3BlcnRpZXMuY21pczpjcmVhdGVkQnkudmFsdWUnIH0sXG4gICAgXHRcdFx0eyBuYW1lOiAnY3JlYXRpb25UaW1lJywgbGFiZWwgOiBcItCU0LDRgtCwINGB0L7Qt9C00LDQvdC40Y9cIiwgd2lkdGg6IDE1MCwganNvbm1hcDogJ29iamVjdC5wcm9wZXJ0aWVzLmNtaXM6Y3JlYXRpb25EYXRlLnZhbHVlJyAsIFxuICAgIFx0XHRcdFx0XHRcdGZvcm1hdHRlcjonZGF0ZScsIGZvcm1hdG9wdGlvbnM6IHtzcmNmb3JtYXQ6ICdVLzEwMDAnLCBuZXdmb3JtYXQ6J2QubS5ZIEg6aSd9LFxuICAgIFx0XHRcdFx0XHRcdHNvcnR0eXBlOidkYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hvcHRpb25zOiBkYXRlT3B0aW9uc1xuICAgIFx0XHRcdH0sXG4gICAgXHRcdFx0eyBuYW1lOiAnbW9kaWZpZXInLCBsYWJlbCA6IFwi0JjQt9C80LXQvdC40LtcIiwgd2lkdGg6IDE1MCwganNvbm1hcDogJ29iamVjdC5wcm9wZXJ0aWVzLmNtaXM6bGFzdE1vZGlmaWVkQnkudmFsdWUnIH0sXG4gICAgXHRcdFx0eyBuYW1lOiAnbW9kaWZpY2F0aW9uVGltZScsIGxhYmVsIDogXCLQlNCw0YLQsCDQuNC30LzQtdC90LXQvdC40Y9cIiwgd2lkdGg6IDE1MCwganNvbm1hcDogJ29iamVjdC5wcm9wZXJ0aWVzLmNtaXM6bGFzdE1vZGlmaWNhdGlvbkRhdGUudmFsdWUnLCBcbiAgICBcdFx0XHRcdFx0XHRmb3JtYXR0ZXI6J2RhdGUnLCBmb3JtYXRvcHRpb25zOiB7c3JjZm9ybWF0OiAnVS8xMDAwJywgbmV3Zm9ybWF0OidkLm0uWSBIOmknfSxcbiAgICBcdFx0XHRcdFx0XHRzb3J0dHlwZTonZGF0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNob3B0aW9uczogZGF0ZU9wdGlvbnNcbiAgICBcdFx0XHR9XG4gICAgXHRcdF07XG4gICAgXHRjb25zb2xlLmxvZyh2aWV3ZGF0YSk7XG4gICAgXHRpZiAodmlld2RhdGEhPW51bGwpe1xuICAgIFx0XHR2aWV3RW50cmllc1VybCA9IHZpZXdkYXRhLmRhdGEucXVlcnkrXCI/XCI7XG4gICAgXHRcdCRzY29wZS5jdXJyZW50Rm9sZGVySWQ9XCIwXCI7XG4gICAgXHRcdGZpZWxkcz1bXTtcbiAgICBcdFx0Y29sdW1ucz1bXTtcbiAgICBcdFx0JC5lYWNoKHZpZXdkYXRhLmRhdGEuY29sdW1uRGVzY3JpcHRpb25zLCBmdW5jdGlvbihpLGl0ZW0pe1xuICAgIFx0XHRcdFxuICAgIFx0XHRcdGlmIChpdGVtLnZpc2libGUhPWZhbHNlKXtcbiAgICBcdFx0XHRcdHZhciBjb2xXaWR0aCA9IDE0MDtcbiAgICBcdFx0XHRcdGlmIChpdGVtLndpZHRoKSBjb2xXaWR0aCA9IHBhcnNlSW50KGl0ZW0ud2lkdGgpO1xuICAgIFx0XHRcdFx0dmFyIGZpZWxkT3BzID0ge1wibmFtZVwiOiBpdGVtLmZpZWxkLCBcImxhYmVsXCI6IGl0ZW0ubmFtZSwgXCJ3aWR0aFwiOiBjb2xXaWR0aH07XG4gICAgXHRcdFx0XHRpZiAoaXRlbS5zb3J0RmllbGQpIHtmaWVsZE9wcy5pbmRleCA9IGl0ZW0uc29ydEZpZWxkfVxuICAgIFx0XHRcdFx0aWYgKCQuaW5BcnJheShpdGVtLmZpZWxkLCBzeXNfZmllbGRzKT09LTEpe1xuICAgIFx0XHRcdFx0XHRmaWVsZE9wcy5qc29ubWFwPVwiZGF0YS5cIitpdGVtLmZpZWxkO1xuICAgIFx0XHRcdFx0XHRmaWVsZHMucHVzaChpdGVtLmZpZWxkKTtcbiAgICBcdFx0XHRcdH1cbiAgICBcdFx0XHRcdGlmIChpdGVtLnR5cGU9PSdJTlRFR0VSJykgZmllbGRPcHMuc2VhcmNob3B0aW9ucz17c29wdDogW1wiZ3RcIixcImx0XCIsXCJlcVwiXSB9O1xuICAgIFx0XHRcdFx0aWYgKGl0ZW0udHlwZT09J1NUUklORycpIGZpZWxkT3BzLnNlYXJjaG9wdGlvbnM9e3NvcHQ6IFtcImNuXCIsXCJuY1wiXSB9O1xuICAgIFx0XHRcdFx0aWYgKGl0ZW0udHlwZT09J0RBVEUnKSB7XG4gICAgXHRcdFx0XHRcdGZpZWxkT3BzLnNvcnR0eXBlPSdkYXRlJztcbiAgICBcdFx0XHRcdFx0ZmllbGRPcHMuc2VhcmNob3B0aW9ucz1kYXRlT3B0aW9ucztcbiAgICBcdFx0XHRcdH1cbiAgICBcdFx0XHRcdGNvbHVtbnMucHVzaChmaWVsZE9wcyk7XG4gICAgXHRcdFx0fVxuICAgIFx0XHR9KTtcbiAgICBcdFx0Y29uc29sZS5sb2coY29sdW1ucyk7XG4gICAgXHRcdGlmIChmaWVsZHMubGVuZ3RoPjApe1xuXHQgICAgXHRcdHZpZXdFbnRyaWVzVXJsICs9J2ZpZWxkcz0nO1xuXHQgICAgXHRcdHZpZXdFbnRyaWVzVXJsICs9ZmllbGRzLmpvaW4oKSArXCImXCI7XG4gICAgXHRcdH1cbiAgICBcdFx0dmlld0VudHJpZXNVcmwgKz0nc2l6ZT0nK3Jvd1NpemU7XG4gICAgXHRcdGNvbnNvbGUubG9nKHZpZXdFbnRyaWVzVXJsKTtcbiAgICBcdH1cbiAgICBcdHZhciBmaXhHcmlkV2lkdGggPSBmdW5jdGlvbiAoZ3JpZCkge1xuICAgIFx0ICAgIHZhciBndmlld1Njcm9sbFdpZHRoID0gZ3JpZFswXS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5zY3JvbGxXaWR0aDtcbiAgICBcdCAgICB2YXIgbWFpbldpZHRoID0galF1ZXJ5KCcjbWFpbicpLndpZHRoKCk7XG4gICAgXHQgICAgdmFyIGdyaWRTY3JvbGxXaWR0aCA9IGdyaWRbMF0uc2Nyb2xsV2lkdGg7XG4gICAgXHQgICAgdmFyIGh0YWJsZSA9IGpRdWVyeSgndGFibGUudWktanFncmlkLWh0YWJsZScsIGdyaWRbMF0ucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUpO1xuICAgIFx0ICAgIHZhciBzY3JvbGxXaWR0aCA9IGdyaWRTY3JvbGxXaWR0aDtcbiAgICBcdCAgICBpZiAoaHRhYmxlLmxlbmd0aCA+IDApIHtcbiAgICBcdCAgICAgICAgdmFyIGhkaXZTY3JvbGxXaWR0aCA9IGh0YWJsZVswXS5zY3JvbGxXaWR0aDtcbiAgICBcdCAgICAgICAgaWYgKChncmlkU2Nyb2xsV2lkdGggPCBoZGl2U2Nyb2xsV2lkdGgpKVxuICAgIFx0ICAgICAgICAgICAgc2Nyb2xsV2lkdGggPSBoZGl2U2Nyb2xsV2lkdGg7IC8vIG1heCAoZ3JpZFNjcm9sbFdpZHRoLCBoZGl2U2Nyb2xsV2lkdGgpXG4gICAgXHQgICAgfVxuICAgIFx0ICAgIGlmIChndmlld1Njcm9sbFdpZHRoICE9IHNjcm9sbFdpZHRoIHx8IHNjcm9sbFdpZHRoID4gbWFpbldpZHRoKSB7XG4gICAgXHQgICAgICAgIHZhciBuZXdHcmlkV2lkdGggPSAoc2Nyb2xsV2lkdGggPD0gbWFpbldpZHRoKT8gc2Nyb2xsV2lkdGg6IG1haW5XaWR0aDsgIC8vIG1pbiAoc2Nyb2xsV2lkdGgsIG1haW5XaWR0aClcbiAgICBcdCAgICAgICAgLy8gaWYgdGhlIGdyaWQgaGFzIG5vIGRhdGEsIGdyaWRTY3JvbGxXaWR0aCBjYW4gYmUgbGVzcyB0aGVuIGhkaXZbMF0uc2Nyb2xsV2lkdGhcbiAgICBcdCAgICAgICAgaWYgKG5ld0dyaWRXaWR0aCAhPSBndmlld1Njcm9sbFdpZHRoKXtcbiAgICBcdCAgICAgICAgICAgIGdyaWQuanFHcmlkKFwic2V0R3JpZFdpZHRoXCIsIG5ld0dyaWRXaWR0aCk7XG4gICAgXHQgICAgICAgICAgICBjb25zb2xlLmxvZyhcIldpZHRoIGZpeGVkLlwiKVxuICAgIFx0ICAgICAgICB9XG4gICAgXHQgICAgfVxuICAgIFx0fTtcblxuICAgIFx0dmFyIGZpeEdyaWRIZWlnaHQgPSBmdW5jdGlvbiAoZ3JpZCkge1xuICAgIFx0ICAgIHZhciBndmlld05vZGUgPSBncmlkWzBdLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgIFx0ICAgIC8vdmFyIGd2aWV3ID0gZ3JpZC5wYXJlbnQoKS5wYXJlbnQoKS5wYXJlbnQoKTtcbiAgICBcdCAgICAvL3ZhciBiZGl2ID0galF1ZXJ5KFwiI2d2aWV3X1wiICsgZ3JpZFswXS5pZCArIFwiIC51aS1qcWdyaWQtYmRpdlwiKTtcbiAgICBcdCAgICB2YXIgYmRpdiA9IGpRdWVyeShcIi51aS1qcWdyaWQtYmRpdlwiLCBndmlld05vZGUpO1xuICAgIFx0ICAgIGlmIChiZGl2Lmxlbmd0aCkge1xuICAgIFx0ICAgICAgICB2YXIgZGVsdGEgPSBiZGl2WzBdLnNjcm9sbEhlaWdodCAtIGJkaXZbMF0uY2xpZW50SGVpZ2h0O1xuICAgIFx0ICAgICAgICB2YXIgaGVpZ2h0ID0gZ3JpZC5oZWlnaHQoKTtcbiAgICBcdCAgICAgICAgaWYgKGRlbHRhICE9PSAwICYmIGhlaWdodCAmJiAoaGVpZ2h0LWRlbHRhPjApKSB7XG4gICAgXHQgICAgICAgICAgICBncmlkLnNldEdyaWRIZWlnaHQoaGVpZ2h0LWRlbHRhKTtcbiAgICBcdCAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSGVpZ2h0IGZpeGVkLlwiKVxuICAgIFx0ICAgICAgICBcbiAgICBcdCAgICAgICAgfVxuICAgIFx0ICAgIH1cbiAgICBcdH07XG5cbiAgICBcdHZhciBmaXhHcmlkU2l6ZSA9IGZ1bmN0aW9uIChncmlkKSB7XG4gICAgXHQgICAgZml4R3JpZFdpZHRoKGdyaWQpO1xuICAgIFx0ICAgIGZpeEdyaWRIZWlnaHQoZ3JpZCk7XG4gICAgXHR9O1xuICAgIFx0XG4gICAgXHQkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uICgpIHtcbiAgICBcdFx0Zml4R3JpZFNpemUoJCgnI2pxR3JpZCcpKTtcbiAgICBcdH0pO1xuXG4gICAgXHRcbiAgICBcdCQoXCIjanFHcmlkXCIpLmpxR3JpZCh7XG4gICAgXHRcdHVybDogdmlld0VudHJpZXNVcmwsXG4gICAgXHRcdG10eXBlOiBcIkdFVFwiLFxuICAgIFx0XHRkYXRhdHlwZTogXCJqc29uXCIsXG4gICAgXHRcdHBhZ2U6IDEsXG4gICAgXHRcdGNvbE1vZGVsOiBjb2x1bW5zLFxuICAgIFx0XHRhdXRvd2lkdGg6IHRydWUsXG4gICAgXHRcdHNocmlua1RvRml0OiB0cnVlLFxuICAgIFx0XHRoZWlnaHQ6JzEwMCUnLFxuICAgIFx0XHRtYXhIZWlnaHQ6IDUwMCxcbiAgICBcdFx0cm93TnVtOiBwYWdpbmF0aW9uQ29uZmlnLnBhZ2VTaXplLFxuICAgIFx0XHQvL2d1aVN0eWxlOiBcImJvb3RzdHJhcFwiLFxuICAgIFx0XHRzZXJpYWxpemVHcmlkRGF0YTogZnVuY3Rpb24ocG9zdERhdGEpIHtcbiAgICBcdFx0XHRpZiAodHlwZW9mKHBvc3REYXRhLnBhZ2UpID09PSBcIm51bWJlclwiKSB7XG4gICAgXHRcdFx0XHRwb3N0RGF0YS5wYWdlLS07IC8vIGRlY3JlYXNlIHRoZSB2YWx1ZSBvZiBwYWdlIGJlZm9yZSBzZW5kaW5nIHRvIHRoZSBzZXJ2ZXJcbiAgICBcdFx0XHR9XG4gICAgXHRcdFx0aWYgKHBvc3REYXRhLnNpZHghPW51bGwgJiYgcG9zdERhdGEuc2lkeCE9Jycpe1xuICAgIFx0XHRcdFx0cG9zdERhdGEuc29ydD1wb3N0RGF0YS5zaWR4K1wiLFwiK3Bvc3REYXRhLnNvcmQ7XG4gICAgXHRcdFx0fWVsc2V7XG4gICAgXHRcdFx0XHRwb3N0RGF0YS5zb3J0PVwiSUQsREVTQ1wiXG4gICAgXHRcdFx0fVxuICAgIFx0XHRcdHJldHVybiBwb3N0RGF0YTtcbiAgICBcdFx0fSxcbiAgICBcdFx0anNvblJlYWRlcjoge1xuICAgIFx0XHRcdHJlcGVhdGl0ZW1zOiBmYWxzZSxcbiAgICBcdFx0XHRyb290OiBmdW5jdGlvbihkYXRhKXtcbiAgICBcdFx0XHRcdGlmIChkYXRhLmNvbnRlbnQpe1xuICAgIFx0XHRcdFx0XHRyZXR1cm4gZGF0YS5jb250ZW50O1xuICAgIFx0XHRcdFx0fVxuICAgIFx0XHRcdFx0cmV0dXJuIGRhdGEub2JqZWN0cztcbiAgICBcdFx0XHR9LFxuICAgIFx0XHRcdHRvdGFsOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgXHRcdFx0XHRyZXR1cm4gZGF0YS50b3RhbFBhZ2VzO1xuICAgIFx0XHRcdH0sXG4gICAgXHRcdFx0cGFnZTogZnVuY3Rpb24oZGF0YSl7XG4gICAgXHRcdFx0XHRyZXR1cm4gZGF0YS5udW1iZXIrMTtcbiAgICBcdFx0XHR9LFxuICAgIFx0XHRcdHJlY29yZHM6IGZ1bmN0aW9uKGRhdGEpe1xuICAgIFx0XHRcdFx0aWYoZGF0YS50b3RhbEVsZW1lbnRzKXtcbiAgICBcdFx0XHRcdFx0cmV0dXJuIGRhdGEudG90YWxFbGVtZW50cztcbiAgICBcdFx0XHRcdH1cbiAgICBcdFx0XHRcdHJldHVybiBkYXRhLm51bUl0ZW1zO1xuICAgIFx0XHRcdH0gXG4gICAgXHRcdH0sXG4gICAgXHRcdG9uU2VsZWN0Um93OiBmdW5jdGlvbihpZHMpIHsgXG4gICAgICAgICAgICAgICAgaWYoaWRzID09IG51bGwpIHtcbiAgICBcdFx0XHRcdGxvYWRHcmlkQ01JUyhcIjBcIik7XG4gICAgXHRcdFx0fWVsc2V7XG4gICAgXHRcdFx0XHR2YXIgcm93RGF0YSA9ICQoXCIjanFHcmlkXCIpLmdldFJvd0RhdGEoaWRzKTtcbiAgICBcdFx0XHRcdGNvbnNvbGUubG9nKFwiVHlwZTogXCIrcm93RGF0YVsndHlwZSddKVxuICAgIFx0XHRcdFx0aWYgKHJvd0RhdGFbJ2Jhc2VUeXBlJ109PVwiY21pczpmb2xkZXJcIil7XG4gICAgXHRcdFx0XHRcdCRzY29wZS5sb2FkR3JpZChpZHMpO1xuICAgIFx0XHRcdFx0fWVsc2UgaWYgKHJvd0RhdGFbJ3R5cGUnXT09XCJ0eXBlXCIpe1xuICAgIFx0XHRcdFx0XHR2YXIgZG9jaWQgPSBwYXJzZUludChpZHMpO1xuICAgIFx0XHRcdFx0XHR2YXIgdXJsID0gJHN0YXRlLmhyZWYoXCJzeXN0ZW0uZWRpdGZvcm1cIiwge3N5c3RlbUlkOiBkb2NpZH0pO1xuICAgIFx0ICAgICAgICAgICAgXHR3aW5kb3cub3Blbih1cmwsJ19ibGFuaycpO1xuICAgIFx0XHRcdFx0XHRcbiAgICBcdFx0XHRcdH1lbHNle1xuICAgIFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcInJlcXVlc3QgZG9jIFwiK2lkcyk7XG4gICAgXHRcdFx0XHRcdHZhciBkb2NpZCA9IHBhcnNlSW50KGlkcyk7XG4gICAgXHRcdFx0XHRcdCRzY29wZS5vcGVuRG9jdW1lbnQoVG9kb3MsIGRvY2lkKTtcbiAgICBcdFx0XHRcdH1cbiAgICBcdFx0XHR9XG4gICAgXHRcdH0sXG4gICAgXHRcdHNjcm9sbDogMSwgLy8gc2V0IHRoZSBzY3JvbGwgcHJvcGVydHkgdG8gMSB0byBlbmFibGUgcGFnaW5nIHdpdGggc2Nyb2xsYmFyIC0gdmlydHVhbCBsb2FkaW5nIG9mIHJlY29yZHNcbiAgICBcdFx0ZW1wdHlyZWNvcmRzOiAnU2Nyb2xsIHRvIGJvdHRvbSB0byByZXRyaWV2ZSBuZXcgcGFnZScsIC8vIHRoZSBtZXNzYWdlIHdpbGwgYmUgZGlzcGxheWVkIGF0IHRoZSBib3R0b20gXG4gICAgXHRcdHBhZ2VyOiBcIiNqcUdyaWRQYWdlclwiLFxuICAgIFx0XHRsb2FkQ29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgIFx0XHRcdGZpeEdyaWRTaXplKCQoJyNqcUdyaWQnKSk7XG4gICAgXHRcdFx0JChcInRyLmpxZ3Jvd1wiLCB0aGlzKS5jb250ZXh0TWVudSgnZm9sZGVyTWVudScsIHtcbiAgICBcdFx0XHRcdGJpbmRpbmdzOiB7XG4gICAgXHRcdFx0XHRcdCdlZGl0JzogZnVuY3Rpb24odHJpZ2dlcikge1xuICAgIFx0XHRcdFx0XHRcdC8vIHRyaWdnZXIgaXMgdGhlIERPTSBlbGVtZW50IChcInRyLmpxZ3Jvd1wiKSB3aGljaCBhcmUgdHJpZ2dlcmVkXG4gICAgXHRcdFx0XHRcdFx0JCgnI2pxR3JpZCcpLmVkaXRHcmlkUm93KHRyaWdnZXIuaWQsIGVkaXRTZXR0aW5ncyk7XG4gICAgXHRcdFx0XHRcdH0sXG4gICAgXHRcdFx0XHRcdCdhZGQnOiBmdW5jdGlvbigvKnRyaWdnZXIqLykge1xuICAgIFx0XHRcdFx0XHRcdCQoJyNqcUdyaWQnKS5lZGl0R3JpZFJvdyhcIm5ld1wiLCBhZGRTZXR0aW5ncyk7XG4gICAgXHRcdFx0XHRcdH0sXG4gICAgXHRcdFx0XHRcdCdkZWwnOiBmdW5jdGlvbih0cmlnZ2VyKSB7XG4gICAgXHRcdFx0XHRcdFx0aWYgKCQoJyNkZWwnKS5oYXNDbGFzcygndWktc3RhdGUtZGlzYWJsZWQnKSA9PT0gZmFsc2UpIHtcbiAgICBcdFx0XHRcdFx0XHRcdC8vIGRpc2FibGVkIGl0ZW0gY2FuIGRvIGJlIGNob29zZWRcbiAgICBcdFx0XHRcdFx0XHRcdCQoJyNqcUdyaWQnKS5kZWxHcmlkUm93KHRyaWdnZXIuaWQsIGRlbFNldHRpbmdzKTtcbiAgICBcdFx0XHRcdFx0XHR9XG4gICAgXHRcdFx0XHRcdH1cbiAgICBcdFx0XHRcdH0sXG4gICAgXHRcdFx0XHRvbkNvbnRleHRNZW51OiBmdW5jdGlvbihldmVudC8qLCBtZW51Ki8pIHtcbiAgICBcdFx0XHRcdFx0dmFyIHJvd0lkID0gJChldmVudC50YXJnZXQpLmNsb3Nlc3QoXCJ0ci5qcWdyb3dcIikuYXR0cihcImlkXCIpO1xuICAgIFx0XHRcdFx0XHQvL2dyaWQuc2V0U2VsZWN0aW9uKHJvd0lkKTtcbiAgICBcdFx0XHRcdFx0Ly8gZGlzYWJsZSBtZW51IGZvciByb3dzIHdpdGggZXZlbiByb3dpZHNcbiAgICBcdFx0XHRcdFx0JCgnI2RlbCcpLmF0dHIoXCJkaXNhYmxlZFwiLE51bWJlcihyb3dJZCklMiA9PT0gMCk7XG4gICAgXHRcdFx0XHRcdGlmIChOdW1iZXIocm93SWQpJTIgPT09IDApIHtcbiAgICBcdFx0XHRcdFx0XHQkKCcjZGVsJykuYXR0cihcImRpc2FibGVkXCIsXCJkaXNhYmxlZFwiKS5hZGRDbGFzcygndWktc3RhdGUtZGlzYWJsZWQnKTtcbiAgICBcdFx0XHRcdFx0fSBlbHNlIHtcbiAgICBcdFx0XHRcdFx0XHQkKCcjZGVsJykucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpLnJlbW92ZUNsYXNzKCd1aS1zdGF0ZS1kaXNhYmxlZCcpO1xuICAgIFx0XHRcdFx0XHR9XG4gICAgXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuICAgIFx0XHRcdFx0fVxuICAgIFx0XHRcdH0pO1xuICAgIFx0XHR9XG4gICAgXHR9KTtcbiAgICBcdCQoJyNqcUdyaWQnKS5uYXZHcmlkKFwiI2pxR3JpZFBhZ2VyXCIsIHsgICAgICAgICAgICAgICAgXG4gICAgXHRcdHNlYXJjaDogdHJ1ZSwgLy8gc2hvdyBzZWFyY2ggYnV0dG9uIG9uIHRoZSB0b29sYmFyXG4gICAgXHRcdGFkZDogZmFsc2UsXG4gICAgXHRcdGVkaXQ6IGZhbHNlLFxuICAgIFx0XHRkZWw6IGZhbHNlLFxuICAgIFx0XHRyZWZyZXNoOiB0cnVlXG4gICAgXHRcdH0sXG4gICAgXHRcdHt9LCAvLyBlZGl0IG9wdGlvbnNcbiAgICBcdFx0e30sIC8vIGFkZCBvcHRpb25zXG4gICAgXHRcdHt9LCAvLyBkZWxldGUgb3B0aW9uc1xuICAgIFx0XHR7IG11bHRpcGxlU2VhcmNoOiB0cnVlLCB1bmlxdWVTZWFyY2hGaWVsZHMgOiB0cnVlLCBtdWx0aXBsZUdyb3VwIDogdHJ1ZX1cbiAgICBcdCk7XG5cdFx0ICB9XG5cdFx0ICBcblxuXHRcdCAgJHNjb3BlLmxvYWRHcmlkKCcwJyk7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ0FkZFRvZG9Db250cm9sbGVyJywgWyckc2NvcGUnLCAnJHN0YXRlJywgJ1RvZG9zJyxcbiAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGUsIFRvZG9zKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUmVuZGVyaW5nIGFkZCB0b2RvIGVudHJ5IHBhZ2UuJyk7XG4gICAgICAgICAgICAkc2NvcGUudG9kbyA9IHt9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZVRvZG8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnRvZG9Gb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb25TdWNjZXNzID0gZnVuY3Rpb24oYWRkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygndG9kby52aWV3Jywge3RvZG9JZDogYWRkZWQuaWR9LCB7IHJlbG9hZDogdHJ1ZSwgaW5oZXJpdDogdHJ1ZSwgbm90aWZ5OiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnRvZG8uZGF0YT09XCJcIikge1xuICAgICAgICAgICAgICAgICAgICBcdCRzY29wZS50b2RvLmRhdGE9e307XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBcdCRzY29wZS50b2RvLmRhdGE9SlNPTi5wYXJzZSgkc2NvcGUudG9kby5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBUb2Rvcy5zYXZlKCRzY29wZS50b2RvLCBvblN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdEZWxldGVUb2RvQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRtb2RhbEluc3RhbmNlJywgJyRzdGF0ZScsICdUb2RvcycsICdkZWxldGVkVG9kbycsXG4gICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJG1vZGFsSW5zdGFuY2UsICRzdGF0ZSwgVG9kb3MsIGRlbGV0ZWRUb2RvKSB7XG4gICAgICAgICAgICAkc2NvcGUudG9kbyA9IGRlbGV0ZWRUb2RvO1xuXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkc2NvcGUuZGVsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9uU3VjY2VzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ3RvZG8uaW5kZXgnLCB7fSwgeyByZWxvYWQ6IHRydWUsIGluaGVyaXQ6IHRydWUsIG5vdGlmeTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFRvZG9zLmRlbGV0ZSgkc2NvcGUudG9kbywgb25TdWNjZXNzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1dKSAgICAgICAgXG4gICAgLmNvbnRyb2xsZXIoJ0VkaXREb2NGb3JtQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRzdGF0ZScsICd1cGRhdGVkVG9kbycsICdUb2RvcycsXG4gICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlLCB1cGRhdGVkVG9kbywgVG9kb3MpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRWRpdEZvcm0gZm9yIGRvY3VtZW50XCIpO1xuICAgICAgICAgICAgJHNjb3BlLnRvZG8gPSB1cGRhdGVkVG9kbztcbiAgICAgICAgICAgIHZhciB0eXBlVXJsPVwiL2pvb3EvYXBpL3N5c3RlbS9zL1wiKyRzY29wZS50b2RvLnR5cGU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICRzY29wZS5nZXRQYXJlbnRUeXBlU2NoZW1hID0gZnVuY3Rpb24odHlwZUlkKSB7XG4gICAgICAgICAgICBcdHZhciBwcm9wZXJ0aWVzID0ge31cbiAgICAgICAgICAgIFx0Y29uc29sZS5sb2coXCJnZXRQYXJlbnRUeXBlU2NoZW1hIHR5cGVJZCA9IFwiK3R5cGVJZCk7XG4gICAgICAgICAgICBcdGlmICh0eXBlSWQhPW51bGwgJiYgdHlwZUlkIT1cIjBcIil7XG5cdCAgICAgICAgICAgIFx0JC5hamF4XG5cdCAgICAgICAgICAgICAgICAoe1xuXHQgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiR0VUXCIsXG5cdCAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9qb29xL2FwaS9zeXN0ZW0vXCIrdHlwZUlkLFxuXHQgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG5cdCAgICAgICAgICAgICAgICAgICAgYXN5bmM6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBcdHByb3BlcnRpZXMgPSByZXMuZGF0YS5zY2hlbWEucHJvcGVydGllcztcblx0ICAgICAgICAgICAgICAgICAgICBcdHZhciBwYXJlbnRQcm9wcyA9ICRzY29wZS5nZXRQYXJlbnRUeXBlU2NoZW1hKHJlcy5wYXJlbnQpO1xuXHQgICAgICAgICAgICAgICAgICAgIFx0Zm9yICh2YXIgcHJvcCBpbiBwYXJlbnRQcm9wcyl7XG5cdCAgICAgICAgICAgICAgICAgICAgXHRcdGNvbnNvbGUubG9nKHByb3ApO1xuXHQgICAgICAgICAgICAgICAgICAgIFx0XHRwcm9wZXJ0aWVzW3Byb3BdID0gcGFyZW50UHJvcHNbcHJvcF07XG5cdCAgICAgICAgICAgICAgICAgICAgXHR9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIFx0fVxuICAgICAgICAgICAgXHRyZXR1cm4gcHJvcGVydGllcztcbiAgICAgICAgICAgIFx0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkLmFqYXhcbiAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgICAgICAgICAgICB1cmw6IHR5cGVVcmwsXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgICAgICBhc3luYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgICAgIFx0JHNjb3BlLnNjaGVtYSA9IHJlcy5kYXRhLnNjaGVtYTtcbiAgICAgICAgICAgICAgICBcdHZhciBwYXJlbnRQcm9wcyA9ICRzY29wZS5nZXRQYXJlbnRUeXBlU2NoZW1hKHJlcy5wYXJlbnQpO1xuICAgICAgICAgICAgICAgIFx0Zm9yICh2YXIgcHJvcCBpbiBwYXJlbnRQcm9wcyl7XG4gICAgICAgICAgICAgICAgXHRcdCRzY29wZS5zY2hlbWEucHJvcGVydGllc1twcm9wXSA9IHBhcmVudFByb3BzW3Byb3BdO1xuICAgICAgICAgICAgICAgIFx0fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICRzY29wZS5mb3JtID0gW1xuXHQgICAgXHQgICAgXCIqXCJcblx0ICAgIFx0ICBdO1xuXHRcbiAgICAgICAgICAgICRzY29wZS5tb2RlbCA9ICRzY29wZS50b2RvLmRhdGE7XG4gICAgICAgICAgICAkc2NvcGUuc2F2ZVRvZG8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnRvZG9Gb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb25TdWNjZXNzID0gZnVuY3Rpb24odXBkYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCd0b2RvLnZpZXcnLCB7dG9kb0lkOiB1cGRhdGVkLmlkfSwgeyByZWxvYWQ6IHRydWUsIGluaGVyaXQ6IHRydWUsIG5vdGlmeTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvZG8uZGF0YT0kc2NvcGUubW9kZWw7XG4gICAgICAgICAgICAgICAgICAgIFRvZG9zLnVwZGF0ZSgkc2NvcGUudG9kbywgb25TdWNjZXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XSlcbiAgICAuY29udHJvbGxlcignVmlld1RvZG9Db250cm9sbGVyJywgWyckc2NvcGUnLCAnJHN0YXRlJywgJyRtb2RhbCcsICd2aWV3ZWRUb2RvJyxcbiAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGUsICRtb2RhbCwgdmlld2VkVG9kbykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlbmRlcmluZyB2aWV3IHRvZG8gZW50cnkgcGFnZS4nKTtcbiAgICAgICAgICAgICRzY29wZS50b2RvID0gdmlld2VkVG9kbztcblxuICAgICAgICAgICAgJHNjb3BlLnNob3dFZGl0UGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbyhcInRvZG8uZWRpdFwiLCB7dG9kb0lkOiAkc2NvcGUudG9kby5pZH0sIHsgcmVsb2FkOiB0cnVlLCBpbmhlcml0OiB0cnVlLCBub3RpZnk6IHRydWUgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0VkaXRGb3JtUGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbyhcInRvZG8uZWRpdGZvcm1cIiwge3RvZG9JZDogJHNjb3BlLnRvZG8uaWR9LCB7IHJlbG9hZDogdHJ1ZSwgaW5oZXJpdDogdHJ1ZSwgbm90aWZ5OiB0cnVlIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHNjb3BlLnNob3dEZWxldGVEaWFsb2cgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgJG1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2Zyb250ZW5kL3BhcnRpYWxzL3RvZG8vZGVsZXRlLXRvZG8tbW9kYWwuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdEZWxldGVUb2RvQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZWRUb2RvOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS50b2RvO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAudG9kby5zZXJ2aWNlcycsIFsnbmdSZXNvdXJjZSddKVxuICAgIC5mYWN0b3J5KCdUb2RvcycsIFsnJHJlc291cmNlJywgJ05vdGlmaWNhdGlvblNlcnZpY2UnLCBmdW5jdGlvbigkcmVzb3VyY2UsIE5vdGlmaWNhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgdmFyIGFwaSA9ICRyZXNvdXJjZSgnL2pvb3EvYXBpL2RvY3MvOmlkJywge1wiaWRcIjogXCJAaWRcIn0sIHtcbiAgICAgICAgICAgIHF1ZXJ5OiAge21ldGhvZDogJ0dFVCcsIHBhcmFtczoge30sIGlzQXJyYXk6IGZhbHNlfSxcbiAgICAgICAgICAgIGdldDogICAge21ldGhvZDogJ0dFVCd9LFxuICAgICAgICAgICAgc2F2ZToge21ldGhvZDogJ1BPU1QnfSxcbiAgICAgICAgICAgIHVwZGF0ZToge21ldGhvZDogJ1BVVCd9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZWxldGU6IGZ1bmN0aW9uKHRvZG8sIHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcGkuZGVsZXRlKHRvZG8sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBOb3RpZmljYXRpb25TZXJ2aWNlLmZsYXNoTWVzc2FnZSgndG9kby5ub3RpZmljYXRpb25zLmRlbGV0ZS5zdWNjZXNzJywgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcXVlcnk6IGZ1bmN0aW9uKHBhZ2VOdW1iZXIsIHBhZ2VTaXplKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwaS5xdWVyeSh7cGFnZTogcGFnZU51bWJlciwgc2l6ZTogcGFnZVNpemUsIHNvcnQ6ICdJRCxERVNDJ30pLiRwcm9taXNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24odG9kb0lkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwaS5nZXQoe2lkOiB0b2RvSWR9KS4kcHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYXZlOiBmdW5jdGlvbih0b2RvLCBzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBhcGkuc2F2ZSh0b2RvLCBmdW5jdGlvbihhZGRlZCkge1xuICAgICAgICAgICAgICAgICAgICBOb3RpZmljYXRpb25TZXJ2aWNlLmZsYXNoTWVzc2FnZSgndG9kby5ub3RpZmljYXRpb25zLmFkZC5zdWNjZXNzJywgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKGFkZGVkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKHRvZG8sIHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGFwaS51cGRhdGUodG9kbywgZnVuY3Rpb24odXBkYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICBOb3RpZmljYXRpb25TZXJ2aWNlLmZsYXNoTWVzc2FnZSgndG9kby5ub3RpZmljYXRpb25zLnVwZGF0ZS5zdWNjZXNzJywgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKHVwZGF0ZWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1dKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZGVtbycsIFtcclxuICAgICdibHVlaW1wLmZpbGV1cGxvYWQnXHJcbl0pXHJcbiAgICAuY29uZmlnKFtcclxuICAgICAgICAnJGh0dHBQcm92aWRlcicsICdmaWxlVXBsb2FkUHJvdmlkZXInLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkaHR0cFByb3ZpZGVyLCBmaWxlVXBsb2FkUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgZGVsZXRlICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtUmVxdWVzdGVkLVdpdGgnXTtcclxuICAgICAgICAgICAgZmlsZVVwbG9hZFByb3ZpZGVyLmRlZmF1bHRzLnJlZGlyZWN0ID0gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZShcclxuICAgICAgICAgICAgICAgIC9cXC9bXlxcL10qJC8sXHJcbiAgICAgICAgICAgICAgICAnL2NvcnMvcmVzdWx0Lmh0bWw/JXMnXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgXSlcclxuXHJcbiAgICAuY29udHJvbGxlcignRGVtb0ZpbGVVcGxvYWRDb250cm9sbGVyJywgW1xyXG4gICAgICAgICckc2NvcGUnLCAnJGh0dHAnLCAnJGZpbHRlcicsICckd2luZG93JyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCkge1xyXG4gICAgICAgICAgICAkc2NvcGUub3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIHVybDogdXJsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgXSlcclxuXHJcbiAgICAuY29udHJvbGxlcignRmlsZURlc3Ryb3lDb250cm9sbGVyJywgW1xyXG4gICAgICAgICckc2NvcGUnLCAnJGh0dHAnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwKSB7XHJcbiAgICAgICAgICAgIHZhciBmaWxlID0gJHNjb3BlLmZpbGUsXHJcbiAgICAgICAgICAgICAgICBzdGF0ZTtcclxuICAgICAgICAgICAgaWYgKGZpbGUudXJsKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlLiRzdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZmlsZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9ICdwZW5kaW5nJztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGZpbGUuZGVsZXRlVXJsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGZpbGUuZGVsZXRlVHlwZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0gJ3Jlc29sdmVkJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jbGVhcihmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAncmVqZWN0ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZpbGUuJGNhbmNlbCAmJiAhZmlsZS5faW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGZpbGUuJGNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2xlYXIoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgXSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ2FwcC5zZWFyY2guc2VydmljZXMnLCBbJ25nUmVzb3VyY2UnXSlcbiAgICAuZmFjdG9yeSgnU2VhcmNoJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbigkcmVzb3VyY2UpIHtcbiAgICAgICAgdmFyIGFwaSA9ICRyZXNvdXJjZSgnL2FwaS9kb2NzL3NlYXJjaCcsIHt9LCB7XG4gICAgICAgICAgICAncXVlcnknOiAge21ldGhvZDonR0VUJywgaXNBcnJheTpmYWxzZX1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpbmRCeVNlYXJjaFRlcm06IGZ1bmN0aW9uKHNlYXJjaFRlcm0sIHBhZ2VOdW1iZXIsIHBhZ2VTaXplKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwaS5xdWVyeSh7cGFnZTogcGFnZU51bWJlciwgc2VhcmNoVGVybTogc2VhcmNoVGVybSwgc2l6ZTogcGFnZVNpemUsIHNvcnQ6ICdJRCxERVNDJ30pLiRwcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1dKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=