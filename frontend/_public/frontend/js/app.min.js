"use strict";var App=angular.module("app",["ngLocale","ngCookies","ngResource","ngSanitize","pascalprecht.translate","ui.bootstrap","ui.router","ui.utils","angular-growl","angularMoment","angularUtils.directives.dirPagination","angular-jqgrid","app.partials","app.common.config","app.common.directives","app.common.services","app.search.services","app.todo.controllers","app.todo.services","app.cmis.services"]);angular.module("angular-jqgrid",[]).directive("jqGrid",function(){return{restrict:"EA",template:"<table></table>",scope:{dataset:"=",options:"=",callback:"=",pager:"="},link:function(scope,element,attributes){var jqGrid=null,height=attributes.height||"100%",init=function(){var gridObj;if(void 0===scope.dataset)return gridObj;var options={};return options.data=scope.dataset,options=$.extend(!0,options,scope.options),options.height=height,gridObj=$(element.children()[0]).jqGrid(options),scope.callback&&scope.callback(gridObj),gridObj};$(window).on("resize",function(){var parentElement=angular.element(element).parent();jqGrid.setGridWidth(parentElement.width())});var onOptionsChanged=function(){jqGrid=init()},unwatchOptions=scope.$watch("options",onOptionsChanged,!0),onDatasetChanged=function(dataset){var startDataChanged=(new Date).getTime();if(jqGrid){if(jqGrid.jqGrid("clearGridData"),jqGrid.get(0).p.treeGrid){var perfTime=(new Date).getTime();jqGrid.get(0).addJSONData({rows:dataset}),console.log("addJSONData : ",(new Date).getTime()-perfTime,"ms")}else jqGrid.jqGrid("setGridParam",{datatype:"local",data:dataset,rowNum:dataset.length});return console.log("onDatasetChanged : ",(new Date).getTime()-startDataChanged,"ms"),jqGrid.trigger("reload")}jqGrid=init()},unwatchDataset=scope.$watch("dataset",onDatasetChanged,!1);element.on("$destroy",function(){unwatchDataset(),unwatchOptions()})}}}),angular.module("app.common.config",[]).config(["$urlRouterProvider","$locationProvider",function($urlRouterProvider,$locationProvider){$urlRouterProvider.otherwise("/"),$locationProvider.html5Mode(!1)}]).config(["$translateProvider",function($translateProvider){$translateProvider.useStaticFilesLoader({prefix:"/iaadmin/frontend/i18n/",suffix:".json"}),$translateProvider.preferredLanguage("en"),$translateProvider.useLocalStorage(),$translateProvider.useMissingTranslationHandlerLog()}]).config(["growlProvider",function(growlProvider){growlProvider.globalTimeToLive(5e3)}]),angular.module("app.common.directives",[]).directive("staticInclude",["$http","$templateCache","$compile",function($http,$templateCache,$compile){return function(scope,element,attrs){var templatePath=attrs.staticInclude;$http.get(templatePath,{cache:$templateCache}).success(function(response){var contents=$("<div/>").html(response).contents();element.html(contents),$compile(contents)(scope)})}}]),angular.module("app.common.services",[]).service("NotificationService",["$rootScope","growl",function($rootScope,growl){function displayNotification(message,type){"success"===type?growl.addSuccessMessage(message):"warn"===type?growl.addWarnMessage(message):"info"===type?growl.addInfoMessage(message):growl.addErrorMessage(message)}var flashMessageQueue=[];return $rootScope.$on("$stateChangeSuccess",function(){for(;flashMessageQueue.length>0;){var item=flashMessageQueue.shift();item&&displayNotification(item.message,item.type)}}),{flashMessage:function(message,type){flashMessageQueue.push({message:message,type:type||"info"})}}}]),angular.module("app.cmis.services",["ngResource"]).factory("CMIS",["$resource","NotificationService",function($resource){var api=$resource("/jooq/browser/test/root?cmisselector=children&objectId=:id",{id:"@id"},{query:{method:"GET",params:{},isArray:!1}});return{query:function(folderId,pageNumber,pageSize){return api.query({id:folderId,page:pageNumber,size:pageSize,sort:"ID,DESC"}).$promise}}}]),angular.module("app.todo.controllers",[]).constant("paginationConfig",{pageSize:200}).config(["$stateProvider",function($stateProvider){$stateProvider.state("todo",{url:"/","abstract":!0,template:"<ui-view/>"}).state("todo.index",{url:"",controller:"TodoListController",templateUrl:"frontend/partials/todo/todo-list.html",resolve:{searchResults:["Todos","paginationConfig",function(Todos,paginationConfig){return Todos.query(0,paginationConfig.pageSize)}]}}).state("todo.tree",{url:"todo/tree",controller:"TodoTreeController",templateUrl:"frontend/partials/todo/todo-tree.html",resolve:{searchResults:["CMIS","paginationConfig","$stateParams",function(CMIS,paginationConfig){return CMIS.query("0",0,paginationConfig.pageSize)}]}}).state("todo.page",{url:"todo/page/:pageNumber/size/:pageSize",controller:"TodoListController",templateUrl:"frontend/partials/todo/todo-list.html",resolve:{searchResults:["Todos","$stateParams",function(Todos,$stateParams){return Todos.query($stateParams.pageNumber-1,$stateParams.pageSize)}]}}).state("todo.add",{url:"todo/add",controller:"AddTodoController",templateUrl:"frontend/partials/todo/add-todo.html"}).state("todo.edit",{url:"todo/:todoId/edit",controller:"EditTodoController",templateUrl:"frontend/partials/todo/edit-todo.html",resolve:{updatedTodo:["Todos","$stateParams",function(Todos,$stateParams){return $stateParams.todoId?Todos.get($stateParams.todoId):null}]}}).state("todo.search",{url:"todo/search/:searchTerm/page/:pageNumber/size/:pageSize",controller:"SearchResultController",templateUrl:"frontend/partials/search/search-results.html",resolve:{searchTerm:["$stateParams",function($stateParams){return $stateParams.searchTerm}],searchResults:["Search","$stateParams",function(Search,$stateParams){return $stateParams.searchTerm?Search.findBySearchTerm($stateParams.searchTerm,$stateParams.pageNumber-1,$stateParams.pageSize):null}]}}).state("todo.view",{url:"todo/:todoId",controller:"ViewTodoController",templateUrl:"frontend/partials/todo/view-todo.html",resolve:{viewedTodo:["Todos","$stateParams",function(Todos,$stateParams){return $stateParams.todoId?Todos.get($stateParams.todoId):null}]}})}]).controller("TodoListController",["$scope","$state","searchResults","paginationConfig",function($scope,$state,searchResults,paginationConfig){console.log("Rendering documents."),$scope.todos=searchResults.content,console.log(searchResults),console.log(searchResults.totalElements),console.log(paginationConfig.pageSize),$scope.pagination={currentPage:searchResults.number+1,itemsPerPage:paginationConfig.pageSize,totalItems:searchResults.totalElements},$scope.addTodo=function(){$state.go("todo.add")},$scope.pageChanged=function(newPageNumber){$state.go("todo.page",{pageNumber:newPageNumber,pageSize:paginationConfig.pageSize},{reload:!0,inherit:!0,notify:!0})}}]).controller("TodoTreeController",["$scope","$state","searchResults","paginationConfig",function($scope,$state,searchResults,paginationConfig){$("#MySplitter").height(600).split({orientation:"vertical",limit:10,position:"20%"});console.log("Rendering documents tree.");var currentDefFormId="",cmis_root="/jooq/browser/test/root";$("#treecontainer").jstree({core:{data:{url:function(node){return"#"===node.id?cmis_root+"?objectId=0&cmisselector=children":cmis_root+"?objectId="+node.id+"&cmisselector=children"},dataFilter:function(data){var nodes=[];return $.each(JSON.parse(data).objects,function(i,item){var node={};node.id=item.object.properties["cmis:objectId"].value,node.data={type:item.object.properties["cmis:objectTypeId"].value},node.text=item.object.properties["cmis:name"].value,"cmis:folder"==item.object.properties["cmis:objectTypeId"].value&&(node.children=!0),nodes.push(node)}),JSON.stringify(nodes)},data:function(node){return console.log(node),{id:node.id,text:"1"}}}}}),$("#treecontainer").on("select_node.jstree",function(e,data){if(console.log("node_id: "+data.node.type+" - "+data.node.id),"cmis:folder"==data.node.data.type)$scope.loadGrid(data.node.id);else{var docid=parseInt(data.node.id),viewsUrl="/jooq/api/docs/"+docid;$.getJSON(viewsUrl,function(viewdata){"view"==viewdata.type?(currentDefFormId=viewdata.data.defaultForm,$scope.loadGrid("0",viewdata)):$state.go("todo.view",{todoId:docid},{reload:!0,inherit:!0,notify:!0})})}}),$scope.loadGrid=function(folderId,viewdata){console.log("Rendering documents grid."),$("#jqGrid").jqGrid("GridUnload");var dateOptions={dataInit:function(element){$(element).datepicker({id:"orderDate_datePicker",dateFormat:"yy-mm-dd",maxDate:new Date(2020,0,1),showOn:"focus"})},sopt:["gt","lt","eq"]},editSettings={recreateForm:!0,jqModal:!1,reloadAfterSubmit:!1,closeOnEscape:!0,savekey:[!0,13],closeAfterEdit:!0,afterShowForm:function(){$("#lui_"+grid[0].id).hide()}},addSettings={recreateForm:!0,jqModal:!1,reloadAfterSubmit:!1,savekey:[!0,13],closeOnEscape:!0,closeAfterAdd:!0,afterShowForm:function(){$("#lui_"+grid[0].id).hide()}},delSettings={processing:!0},id=folderId,viewEntriesUrl=cmis_root+"?objectId="+id+"&cmisselector=children",sys_fields=["id","type","title","description","modifier","modificationTime","autor","creationTime"],fields=["id","title","description","modifier","modificationTime"],rowSize=paginationConfig.pageSize,columns=[{name:"id",key:!0,width:75,jsonmap:"object.properties.cmis:objectId.value"},{name:"type",label:"Тип",width:100,jsonmap:"object.properties.cmis:objectTypeId.value"},{name:"title",label:"Заголовок",width:150,jsonmap:"object.properties.cmis:name.value"},{name:"description",label:"Описание",width:150,jsonmap:"object.properties.cmis:description.value"},{name:"author",label:"Создал",width:150,jsonmap:"object.properties.cmis:createdBy.value"},{name:"creationTime",label:"Дата создания",width:150,jsonmap:"object.properties.cmis:creationDate.value",formatter:"date",formatoptions:{srcformat:"U/1000",newformat:"d.m.Y H:i"},sorttype:"date",searchoptions:dateOptions},{name:"modifier",label:"Изменил",width:150,jsonmap:"object.properties.cmis:lastModifiedBy.value"},{name:"modificationTime",label:"Дата изменения",width:150,jsonmap:"object.properties.cmis:lastModificationDate.value",formatter:"date",formatoptions:{srcformat:"U/1000",newformat:"d.m.Y H:i"},sorttype:"date",searchoptions:dateOptions}];console.log(viewdata),null!=viewdata&&(viewEntriesUrl=viewdata.data.query+"?fields=",fields=[],columns=[],$.each(viewdata.data.columnDescriptions,function(i,item){if(0!=item.visible){var colWidth=140;item.width&&(colWidth=parseInt(item.width));var fieldOps={name:item.field,label:item.name,width:colWidth};item.sortField&&(fieldOps.index=item.sortField),-1==$.inArray(item.field,sys_fields)&&(fieldOps.jsonmap="data."+item.field,fields.push(item.field)),"INTEGER"==item.type&&(fieldOps.searchoptions={sopt:["gt","lt","eq"]}),"DATE"==item.type&&(fieldOps.sorttype="date",fieldOps.searchoptions=dateOptions),columns.push(fieldOps)}}),console.log(columns),viewEntriesUrl+=fields.join(),viewEntriesUrl+="&size="+rowSize,console.log(viewEntriesUrl)),$("#jqGrid").jqGrid({url:viewEntriesUrl,mtype:"GET",datatype:"json",page:1,colModel:columns,autowidth:!0,shrinkToFit:!1,height:"100%",maxHeight:500,rowNum:paginationConfig.pageSize,serializeGridData:function(postData){return"number"==typeof postData.page&&postData.page--,postData.sort=null!=postData.sidx&&""!=postData.sidx?postData.sidx+","+postData.sord:"ID,DESC",postData},jsonReader:{repeatitems:!1,root:function(data){return data.content?data.content:data.objects},total:function(data){return data.totalPages},page:function(data){return data.number+1},records:function(data){return data.totalElements?data.totalElements:data.numItems}},onSelectRow:function(ids){if(null==ids)loadGridCMIS("0");else{var rowData=$("#jqGrid").getRowData(ids);if(console.log("Type: "+rowData.type),"cmis:folder"==rowData.type)$scope.loadGrid(ids);else{console.log("request doc "+ids);var docid=parseInt(ids),viewsUrl="/jooq/api/docs/"+docid;$.getJSON(viewsUrl,function(viewdata){"view"==viewdata.type?(currentDefFormId=viewdata.data.defaultForm,$scope.loadGrid("0",viewdata)):$state.go("todo.view",{todoId:docid},{reload:!0,inherit:!0,notify:!0})})}}},scroll:1,emptyrecords:"Scroll to bottom to retrieve new page",pager:"#jqGridPager",loadComplete:function(){$("tr.jqgrow",this).contextMenu("folderMenu",{bindings:{edit:function(trigger){$("#jqGrid").editGridRow(trigger.id,editSettings)},add:function(){$("#jqGrid").editGridRow("new",addSettings)},del:function(trigger){$("#del").hasClass("ui-state-disabled")===!1&&$("#jqGrid").delGridRow(trigger.id,delSettings)}},onContextMenu:function(event){var rowId=$(event.target).closest("tr.jqgrow").attr("id");return $("#del").attr("disabled",Number(rowId)%2===0),Number(rowId)%2===0?$("#del").attr("disabled","disabled").addClass("ui-state-disabled"):$("#del").removeAttr("disabled").removeClass("ui-state-disabled"),!0}})}}),$("#jqGrid").navGrid("#jqGridPager",{search:!0,add:!1,edit:!1,del:!1,refresh:!0},{},{},{},{multipleSearch:!0,uniqueSearchFields:!0,multipleGroup:!0})},$scope.loadGrid("0")}]).controller("AddTodoController",["$scope","$state","Todos",function($scope,$state,Todos){console.log("Rendering add todo entry page."),$scope.todo={},$scope.saveTodo=function(){if($scope.todoForm.$valid){var onSuccess=function(added){$state.go("todo.view",{todoId:added.id},{reload:!0,inherit:!0,notify:!0})};$scope.todo.data=JSON.parse($scope.todo.data),Todos.save($scope.todo,onSuccess)}}}]).controller("DeleteTodoController",["$scope","$modalInstance","$state","Todos","deletedTodo",function($scope,$modalInstance,$state,Todos,deletedTodo){$scope.todo=deletedTodo,$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.delete=function(){var onSuccess=function(){$modalInstance.close(),$state.go("todo.index",{},{reload:!0,inherit:!0,notify:!0})};Todos.delete($scope.todo,onSuccess)}}]).controller("EditTodoController",["$scope","$state","updatedTodo","Todos",function($scope,$state,updatedTodo,Todos){console.log(updatedTodo),$scope.todo=updatedTodo,$scope.todo.data=JSON.stringify($scope.todo.data),$scope.saveTodo=function(){if($scope.todoForm.$valid){var onSuccess=function(updated){$state.go("todo.view",{todoId:updated.id},{reload:!0,inherit:!0,notify:!0})};$scope.todo.data=JSON.parse($scope.todo.data),Todos.update($scope.todo,onSuccess)}}}]).controller("SearchController",["$scope","$state","paginationConfig",function($scope,$state,paginationConfig){var userWritingSearchTerm=!1,minimumSearchTermLength=3;$scope.missingChars=minimumSearchTermLength,$scope.searchTerm="",$scope.searchFieldBlur=function(){userWritingSearchTerm=!1},$scope.searchFieldFocus=function(){userWritingSearchTerm=!0},$scope.showMissingCharacterText=function(){return userWritingSearchTerm&&$scope.searchTerm.length<minimumSearchTermLength?!0:!1},$scope.search=function(){$scope.searchTerm.length<minimumSearchTermLength?$scope.missingChars=minimumSearchTermLength-$scope.searchTerm.length:($scope.missingChars=0,$state.go("todo.search",{searchTerm:$scope.searchTerm,pageNumber:1,pageSize:paginationConfig.pageSize},{reload:!0,inherit:!0,notify:!0}))}}]).controller("SearchResultController",["$scope","$state","paginationConfig","searchTerm","searchResults",function($scope,$state,paginationConfig,searchTerm,searchResults){console.log("Rendering search results page."),$scope.todos=searchResults.content,$scope.pagination={currentPage:searchResults.number+1,itemsPerPage:paginationConfig.pageSize,totalItems:searchResults.totalElements},$scope.pageChanged=function(newPageNumber){$state.go("todo.search",{searchTerm:searchTerm,pageNumber:newPageNumber,pageSize:paginationConfig.pageSize},{reload:!0,inherit:!0,notify:!0})}}]).controller("ViewTodoController",["$scope","$state","$modal","viewedTodo",function($scope,$state,$modal,viewedTodo){console.log("Rendering view todo entry page."),$scope.todo=viewedTodo,$scope.showEditPage=function(){$state.go("todo.edit",{todoId:$scope.todo.id},{reload:!0,inherit:!0,notify:!0})},$scope.showDeleteDialog=function(){$modal.open({templateUrl:"frontend/partials/todo/delete-todo-modal.html",controller:"DeleteTodoController",resolve:{deletedTodo:function(){return $scope.todo}}})}}]),angular.module("app.todo.services",["ngResource"]).factory("Todos",["$resource","NotificationService",function($resource,NotificationService){var api=$resource("/api/docs/:id",{id:"@id"},{query:{method:"GET",params:{},isArray:!1},get:{method:"GET"},save:{method:"POST"},update:{method:"PUT"}});return{"delete":function(todo,successCallback){return api.delete(todo,function(){NotificationService.flashMessage("todo.notifications.delete.success","success"),successCallback()})},query:function(pageNumber,pageSize){return api.query({page:pageNumber,size:pageSize,sort:"ID,DESC"}).$promise},get:function(todoId){return api.get({id:todoId}).$promise},save:function(todo,successCallback){api.save(todo,function(added){NotificationService.flashMessage("todo.notifications.add.success","success"),successCallback(added)})},update:function(todo,successCallback){api.update(todo,function(updated){NotificationService.flashMessage("todo.notifications.update.success","success"),successCallback(updated)})}}}]),angular.module("demo",["blueimp.fileupload"]).config(["$httpProvider","fileUploadProvider",function($httpProvider,fileUploadProvider){delete $httpProvider.defaults.headers.common["X-Requested-With"],fileUploadProvider.defaults.redirect=window.location.href.replace(/\/[^\/]*$/,"/cors/result.html?%s")}]).controller("DemoFileUploadController",["$scope","$http","$filter","$window",function($scope){$scope.options={url:url}}]).controller("FileDestroyController",["$scope","$http",function($scope,$http){var state,file=$scope.file;file.url?(file.$state=function(){return state},file.$destroy=function(){return state="pending",$http({url:file.deleteUrl,method:file.deleteType}).then(function(){state="resolved",$scope.clear(file)},function(){state="rejected"})}):file.$cancel||file._index||(file.$cancel=function(){$scope.clear(file)})}]),angular.module("app.search.services",["ngResource"]).factory("Search",["$resource",function($resource){var api=$resource("/api/docs/search",{},{query:{method:"GET",isArray:!1}});return{findBySearchTerm:function(searchTerm,pageNumber,pageSize){return api.query({page:pageNumber,searchTerm:searchTerm,size:pageSize,sort:"ID,DESC"}).$promise}}}]);
//# sourceMappingURL=data:application/json;base64,